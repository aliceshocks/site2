(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/_app"],{

/***/ "./lib/bootstrap-client.ts":
/*!*********************************!*\
  !*** ./lib/bootstrap-client.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bootstrap": function() { return /* binding */ bootstrap; }
/* harmony export */ });
/* module decorator */ module = __webpack_require__.hmd(module);
function bootstrap() {
  console.log("\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2003\u2003\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2588\u2588\u2554\u255D\u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255A\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255A\u2550\u255D\u2588\u2588\u2588\u2588\u2588\u2550\u255D\u2591\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u255A\u255D\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\n  \u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2588\u2588\u2557\u2591\u2003\u2003\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255D\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255A\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255A\u2588\u2588\u2588\u2588\u2551\n  \u255A\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255A\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2551\u2591\u255A\u2588\u2588\u2557\u2003\u2003\u255A\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255A\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255D\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255A\u2588\u2588\u2588\u2551\n  \u2591\u255A\u2550\u2550\u2550\u2550\u255D\u2591\u255A\u2550\u255D\u2591\u2591\u255A\u2550\u255D\u2591\u255A\u2550\u2550\u2550\u2550\u255D\u2591\u255A\u2550\u255D\u2591\u2591\u255A\u2550\u255D\u2003\u2003\u2591\u255A\u2550\u2550\u2550\u2550\u255D\u2591\u2591\u2591\u2591\u255A\u2550\u255D\u2591\u2591\u255A\u2550\u255D\u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D\u2591\u255A\u2550\u2550\u2550\u2550\u2550\u255D\u2591\u255A\u2550\u255D\u2591\u2591\u255A\u2550\u255D\u255A\u2550\u255D\u2591\u2591\u255A\u2550\u2550\u255D\n  \n  \u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\n  \u2588\u2588\u2551\u2591\u2588\u2588\u2554\u255D\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u255A\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255D\n  \u2588\u2588\u2588\u2588\u2588\u2550\u255D\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u255A\u2588\u2588\u2588\u2588\u2554\u255D\u2591\n  \u2588\u2588\u2554\u2550\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u2550\u2550\u255D\u2591\u2591\u2588\u2588\u2551\u255A\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u255A\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u255A\u2588\u2588\u2554\u255D\u2591\u2591\n  \u2588\u2588\u2551\u2591\u255A\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u255A\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255A\u2588\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\n  \u255A\u2550\u255D\u2591\u2591\u255A\u2550\u255D\u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D\u255A\u2550\u255D\u2591\u2591\u255A\u2550\u2550\u255D\u255A\u2550\u255D\u2591\u2591\u255A\u2550\u2550\u255D\u2591\u2591\u2591\u255A\u2550\u255D\u2591\u2591\u2591\n");
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./lib/config.ts":
/*!***********************!*\
  !*** ./lib/config.ts ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rootNotionPageId": function() { return /* binding */ rootNotionPageId; },
/* harmony export */   "rootNotionSpaceId": function() { return /* binding */ rootNotionSpaceId; },
/* harmony export */   "pageUrlOverrides": function() { return /* binding */ pageUrlOverrides; },
/* harmony export */   "inversePageUrlOverrides": function() { return /* binding */ inversePageUrlOverrides; },
/* harmony export */   "pageUrlAdditions": function() { return /* binding */ pageUrlAdditions; },
/* harmony export */   "name": function() { return /* binding */ name; },
/* harmony export */   "author": function() { return /* binding */ author; },
/* harmony export */   "domain": function() { return /* binding */ domain; },
/* harmony export */   "description": function() { return /* binding */ description; },
/* harmony export */   "twitter": function() { return /* binding */ twitter; },
/* harmony export */   "github": function() { return /* binding */ github; },
/* harmony export */   "linkedin": function() { return /* binding */ linkedin; },
/* harmony export */   "socialImageTitle": function() { return /* binding */ socialImageTitle; },
/* harmony export */   "socialImageSubtitle": function() { return /* binding */ socialImageSubtitle; },
/* harmony export */   "defaultPageIcon": function() { return /* binding */ defaultPageIcon; },
/* harmony export */   "defaultPageCover": function() { return /* binding */ defaultPageCover; },
/* harmony export */   "defaultPageCoverPosition": function() { return /* binding */ defaultPageCoverPosition; },
/* harmony export */   "utterancesGitHubRepo": function() { return /* binding */ utterancesGitHubRepo; },
/* harmony export */   "imageCDNHost": function() { return /* binding */ imageCDNHost; },
/* harmony export */   "isPreviewImageSupportEnabled": function() { return /* binding */ isPreviewImageSupportEnabled; },
/* harmony export */   "isDev": function() { return /* binding */ isDev; },
/* harmony export */   "includeNotionIdInUrls": function() { return /* binding */ includeNotionIdInUrls; },
/* harmony export */   "isServer": function() { return /* binding */ isServer; },
/* harmony export */   "port": function() { return /* binding */ port; },
/* harmony export */   "host": function() { return /* binding */ host; },
/* harmony export */   "apiBaseUrl": function() { return /* binding */ apiBaseUrl; },
/* harmony export */   "api": function() { return /* binding */ api; },
/* harmony export */   "fathomId": function() { return /* binding */ fathomId; },
/* harmony export */   "fathomConfig": function() { return /* binding */ fathomConfig; },
/* harmony export */   "googleProjectId": function() { return /* binding */ googleProjectId; },
/* harmony export */   "googleApplicationCredentials": function() { return /* binding */ googleApplicationCredentials; },
/* harmony export */   "firebaseCollectionImages": function() { return /* binding */ firebaseCollectionImages; }
/* harmony export */ });
/* harmony import */ var B_jacko_Documents_GitHub_site2_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var notion_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! notion-utils */ "./node_modules/notion-utils/build/esm/index.js");
/* harmony import */ var _get_config_value__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-config-value */ "./lib/get-config-value.ts");
/* module decorator */ module = __webpack_require__.hmd(module);
/* provided dependency */ var process = __webpack_require__(/*! process */ "./node_modules/process/browser.js");
/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")["Buffer"];


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,B_jacko_Documents_GitHub_site2_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Site-wide app configuration.
 *
 * This file pulls from the root "site.config.js" as well as environment variables
 * for optional depenencies.
 */


var rootNotionPageId = (0,notion_utils__WEBPACK_IMPORTED_MODULE_2__.parsePageId)((0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('rootNotionPageId'), {
  uuid: false
});

if (!rootNotionPageId) {
  throw new Error('Config error invalid "rootNotionPageId"');
} // if you want to restrict pages to a single notion workspace (optional)


var rootNotionSpaceId = (0,notion_utils__WEBPACK_IMPORTED_MODULE_2__.parsePageId)((0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('rootNotionSpaceId', null), {
  uuid: true
});
var pageUrlOverrides = cleanPageUrlMap((0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('pageUrlOverrides', {}) || {}, 'pageUrlOverrides');
var inversePageUrlOverrides = invertPageUrlOverrides(pageUrlOverrides);
var pageUrlAdditions = cleanPageUrlMap((0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('pageUrlAdditions', {}) || {}, 'pageUrlAdditions'); // general site config

var name = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('name');
var author = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('author');
var domain = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('domain');
var description = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('description', 'Notion Blog'); // social accounts

var twitter = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('twitter', null);
var github = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('github', null);
var linkedin = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('linkedin', null);
var socialImageTitle = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('socialImageTitle', null);
var socialImageSubtitle = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('socialImageSubtitle', null); // default notion values for site-wide consistency (optional; may be overridden on a per-page basis)

var defaultPageIcon = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('defaultPageIcon', null);
var defaultPageCover = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('defaultPageCover', null);
var defaultPageCoverPosition = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('defaultPageCoverPosition', 0.5); // Optional utteranc.es comments via GitHub issue comments

var utterancesGitHubRepo = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('utterancesGitHubRepo', null); // Optional image CDN host to proxy all image requests through

var imageCDNHost = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('imageCDNHost', null); // Optional whether or not to enable support for LQIP preview images
// (requires a Google Firebase collection)

var isPreviewImageSupportEnabled = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('isPreviewImageSupportEnabled', false);
var isDev =  true || 0; // where it all starts -- the site's root Notion page

var includeNotionIdInUrls = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getSiteConfig)('includeNotionIdInUrls', !!isDev); // ----------------------------------------------------------------------------

var isServer = false;
var port = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getEnv)('PORT', '3000');
var host = isDev ? "http://localhost:".concat(port) : "https://".concat(domain);
var apiBaseUrl = "".concat(host, "/api");
var api = {
  createPreviewImage: "".concat(apiBaseUrl, "/create-preview-image"),
  searchNotion: "".concat(apiBaseUrl, "/search-notion"),
  renderSocialImage: function renderSocialImage(pageId) {
    return "".concat(apiBaseUrl, "/render-social-image/").concat(pageId);
  }
}; // ----------------------------------------------------------------------------

var fathomId = isDev ? null : process.env.NEXT_PUBLIC_FATHOM_ID;
var fathomConfig = fathomId ? {
  excludedDomains: ['localhost', 'localhost:3000']
} : undefined;
var defaultEnvValueForPreviewImageSupport = isPreviewImageSupportEnabled && isServer ? undefined : null;
var googleProjectId = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getEnv)('GCLOUD_PROJECT', defaultEnvValueForPreviewImageSupport);
var googleApplicationCredentials = getGoogleApplicationCredentials();
var firebaseCollectionImages = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getEnv)('FIREBASE_COLLECTION_IMAGES', defaultEnvValueForPreviewImageSupport); // this hack is necessary because vercel doesn't support secret files so we need to encode our google
// credentials a base64-encoded string of the JSON-ified content

function getGoogleApplicationCredentials() {
  if (!isPreviewImageSupportEnabled || !isServer) {
    return null;
  }

  try {
    var googleApplicationCredentialsBase64 = (0,_get_config_value__WEBPACK_IMPORTED_MODULE_1__.getEnv)('GOOGLE_APPLICATION_CREDENTIALS', defaultEnvValueForPreviewImageSupport);
    return JSON.parse(Buffer.from(googleApplicationCredentialsBase64, 'base64').toString());
  } catch (err) {
    console.error('Firebase config error: invalid "GOOGLE_APPLICATION_CREDENTIALS" should be base64-encoded JSON\n');
    throw err;
  }
}

function cleanPageUrlMap(pageUrlMap, label) {
  return Object.keys(pageUrlMap).reduce(function (acc, uri) {
    var pageId = pageUrlMap[uri];
    var uuid = (0,notion_utils__WEBPACK_IMPORTED_MODULE_2__.parsePageId)(pageId, {
      uuid: false
    });

    if (!uuid) {
      throw new Error("Invalid ".concat(label, " page id \"").concat(pageId, "\""));
    }

    if (!uri) {
      throw new Error("Missing ".concat(label, " value for page \"").concat(pageId, "\""));
    }

    if (!uri.startsWith('/')) {
      throw new Error("Invalid ".concat(label, " value for page \"").concat(pageId, "\": value \"").concat(uri, "\" should be a relative URI that starts with \"/\""));
    }

    var path = uri.slice(1);
    return _objectSpread(_objectSpread({}, acc), {}, (0,B_jacko_Documents_GitHub_site2_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({}, path, uuid));
  }, {});
}

function invertPageUrlOverrides(pageUrlOverrides) {
  return Object.keys(pageUrlOverrides).reduce(function (acc, uri) {
    var pageId = pageUrlOverrides[uri];
    return _objectSpread(_objectSpread({}, acc), {}, (0,B_jacko_Documents_GitHub_site2_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)({}, pageId, uri));
  }, {});
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./lib/get-config-value.ts":
/*!*********************************!*\
  !*** ./lib/get-config-value.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSiteConfig": function() { return /* binding */ getSiteConfig; },
/* harmony export */   "getEnv": function() { return /* binding */ getEnv; }
/* harmony export */ });
/* harmony import */ var B_jacko_Documents_GitHub_site2_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _site_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../site.config */ "./site.config.js");
/* harmony import */ var _site_config__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_site_config__WEBPACK_IMPORTED_MODULE_1__);
/* module decorator */ module = __webpack_require__.hmd(module);
/* provided dependency */ var process = __webpack_require__(/*! process */ "./node_modules/process/browser.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,B_jacko_Documents_GitHub_site2_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



if (!(_site_config__WEBPACK_IMPORTED_MODULE_1___default())) {
  throw new Error("Config error: invalid site.config.js");
} // TODO: allow environment variables to override site.config.js


var siteConfigOverrides;

try {
  if (process.env.NEXT_PUBLIC_SITE_CONFIG) {
    siteConfigOverrides = JSON.parse(process.env.NEXT_PUBLIC_SITE_CONFIG);
  }
} catch (err) {
  console.error('Invalid config "NEXT_PUBLIC_SITE_CONFIG" failed to parse');
  throw err;
}

var siteConfig = _objectSpread(_objectSpread({}, (_site_config__WEBPACK_IMPORTED_MODULE_1___default())), siteConfigOverrides);

function getSiteConfig(key, defaultValue) {
  var value = siteConfig[key];

  if (value !== undefined) {
    return value;
  }

  if (defaultValue !== undefined) {
    return defaultValue;
  }

  throw new Error("Config error: missing required site config value \"".concat(key, "\""));
}
function getEnv(key, defaultValue) {
  var env = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : process.env;
  var value = env[key];

  if (value !== undefined) {
    return value;
  }

  if (defaultValue !== undefined) {
    return defaultValue;
  }

  throw new Error("Config error: missing required env variable \"".concat(key, "\""));
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./pages/_app.tsx":
/*!************************!*\
  !*** ./pages/_app.tsx ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ App; }
/* harmony export */ });
/* harmony import */ var B_jacko_Documents_GitHub_site2_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var styles_global_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styles/global.css */ "./styles/global.css");
/* harmony import */ var styles_global_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styles_global_css__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_notion_x_src_styles_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-notion-x/src/styles.css */ "./node_modules/react-notion-x/src/styles.css");
/* harmony import */ var react_notion_x_src_styles_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_notion_x_src_styles_css__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var prismjs_themes_prism_coy_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prismjs/themes/prism-coy.css */ "./node_modules/prismjs/themes/prism-coy.css");
/* harmony import */ var prismjs_themes_prism_coy_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prismjs_themes_prism_coy_css__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react_static_tweets_styles_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-static-tweets/styles.css */ "./node_modules/react-static-tweets/styles.css");
/* harmony import */ var react_static_tweets_styles_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_static_tweets_styles_css__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var styles_notion_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! styles/notion.css */ "./styles/notion.css");
/* harmony import */ var styles_notion_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(styles_notion_css__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var styles_prism_theme_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! styles/prism-theme.css */ "./styles/prism-theme.css");
/* harmony import */ var styles_prism_theme_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(styles_prism_theme_css__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! prismjs */ "./node_modules/prismjs/prism.js");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(prismjs__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var prismjs_components_prism_markup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! prismjs/components/prism-markup */ "./node_modules/prismjs/components/prism-markup.js");
/* harmony import */ var prismjs_components_prism_markup__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_markup__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var prismjs_components_prism_javascript__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! prismjs/components/prism-javascript */ "./node_modules/prismjs/components/prism-javascript.js");
/* harmony import */ var prismjs_components_prism_javascript__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_javascript__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! prismjs/components/prism-typescript */ "./node_modules/prismjs/components/prism-typescript.js");
/* harmony import */ var prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_typescript__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var prismjs_components_prism_bash__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! prismjs/components/prism-bash */ "./node_modules/prismjs/components/prism-bash.js");
/* harmony import */ var prismjs_components_prism_bash__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(prismjs_components_prism_bash__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/router */ "./node_modules/next/router.js");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var lib_bootstrap_client__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lib/bootstrap-client */ "./lib/bootstrap-client.ts");
/* harmony import */ var lib_config__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lib/config */ "./lib/config.ts");
/* harmony import */ var fathom_client__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! fathom-client */ "./node_modules/fathom-client/dist/fathom-client.esm.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__);
/* module decorator */ module = __webpack_require__.hmd(module);


var _jsxFileName = "B:\\jacko\\Documents\\GitHub\\site2\\pages\\_app.tsx",
    _s = $RefreshSig$();

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,B_jacko_Documents_GitHub_site2_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// global styles shared across the entire site
 // core styles shared by all of react-notion-x (required)

 // used for code syntax highlighting (optional)

 // this might be better for dark mode
// import 'prismjs/themes/prism-okaidia.css'
// used for collection views selector (optional)
// TODO: re-add if we enable collection view dropdowns
// import 'rc-dropdown/assets/index.css'
// used for rendering equations (optional)
// import 'katex/dist/katex.min.css'
// core styles for static tweet renderer (optional)

 // global style overrides for notion

 // global style overrides for prism theme (optional)

 // here we're bringing in any languages we want to support for
// syntax highlighting via Notion's Code block













if (true) {
  (0,lib_bootstrap_client__WEBPACK_IMPORTED_MODULE_14__.bootstrap)();
}

function App(_ref) {
  _s();

  var Component = _ref.Component,
      pageProps = _ref.pageProps;
  var router = (0,next_router__WEBPACK_IMPORTED_MODULE_13__.useRouter)();
  react__WEBPACK_IMPORTED_MODULE_12___default().useEffect(function () {
    if (lib_config__WEBPACK_IMPORTED_MODULE_15__.fathomId) {
      var onRouteChangeComplete = function onRouteChangeComplete() {
        fathom_client__WEBPACK_IMPORTED_MODULE_16__.trackPageview();
      };

      fathom_client__WEBPACK_IMPORTED_MODULE_16__.load(lib_config__WEBPACK_IMPORTED_MODULE_15__.fathomId, lib_config__WEBPACK_IMPORTED_MODULE_15__.fathomConfig);
      router.events.on('routeChangeComplete', onRouteChangeComplete);
      return function () {
        router.events.off('routeChangeComplete', onRouteChangeComplete);
      };
    }
  }, []);
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxDEV)(Component, _objectSpread({}, pageProps), void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 66,
    columnNumber: 10
  }, this);
}

_s(App, "vQduR7x+OPXj6PSmJyFnf+hU7bg=", false, function () {
  return [next_router__WEBPACK_IMPORTED_MODULE_13__.useRouter];
});

_c = App;

var _c;

$RefreshReg$(_c, "App");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./site.config.js":
/*!************************!*\
  !*** ./site.config.js ***!
  \************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
module.exports = {
  // where it all starts -- the site's root Notion page (required)
  rootNotionPageId: '7992ab56634e4c0181be4d6b8d1d9064',
  // if you want to restrict pages to a single notion workspace (optional)
  // (this should be a Notion ID;     see the docs for how to extract this)
  rootNotionSpaceId: null,
  // basic site info (required)
  name: "Alice Shaughnessy",
  domain: 'alicecshocks.com',
  author: "Jack O'Regan Kenny",
  // open graph metadata (optional)
  description: "Alice Shaughnessy",
  socialImageTitle: "AliceShaughnessy",
  socialImageSubtitle: 'I build stuff',
  // social usernames (optional)
  twitter: 'AliceShaugh',
  github: '',
  linkedin: 'aliceshaughnessy',
  email: 'mailto:shocks.alice@gmail.com',
  // default notion icon and cover images for site-wide consistency (optional)
  // page-specific values will override these site-wide defaults
  defaultPageIcon: null,
  defaultPageCover: null,
  defaultPageCoverPosition: 0.5,
  // image CDN host to proxy all image requests through (optional)
  // NOTE: this requires you to set up an external image proxy
  imageCDNHost: null,
  // Utteranc.es comments via GitHub issue comments (optional)
  utterancesGitHubRepo: null,
  // whether or not to enable support for LQIP preview images (optional)
  // NOTE: this requires you to set up Google Firebase and add the environment
  // variables specified in .env.example
  isPreviewImageSupportEnabled: false,
  // map of notion page IDs to URL paths (optional)
  // any pages defined here will override their default URL paths
  // example:
  //
  // pageUrlOverrides: {
  //   '/foo': '067dd719a912471ea9a3ac10710e7fdf',
  //   '/bar': '0be6efce9daf42688f65c76b89f8eb27'
  // }
  pageUrlOverrides: null
};

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    var proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    var copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        Buffer.from(buf).copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (var i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = (function () {
  var alphabet = '0123456789abcdef'
  var table = new Array(256)
  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16
    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()


/***/ }),

/***/ "./node_modules/eventemitter3/index.js":
/*!*********************************************!*\
  !*** ./node_modules/eventemitter3/index.js ***!
  \*********************************************/
/***/ (function(module) {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ "./node_modules/fathom-client/dist/fathom-client.esm.js":
/*!**************************************************************!*\
  !*** ./node_modules/fathom-client/dist/fathom-client.esm.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "load": function() { return /* binding */ load; },
/* harmony export */   "trackGoal": function() { return /* binding */ trackGoal; },
/* harmony export */   "trackPageview": function() { return /* binding */ trackPageview; }
/* harmony export */ });
// refer to https://usefathom.com/support/tracking-advanced

/**
 * Enqueues a command to dispatch to fathom when the library is loaded.
 *
 * @param command - A set of arguments to dispatch to fathom later.
 */
var enqueue = function enqueue(command) {
  window.__fathomClientQueue = window.__fathomClientQueue || [];

  window.__fathomClientQueue.push(command);
};
/**
 * Flushes the command queue.
 */


var flushQueue = function flushQueue() {
  window.__fathomClientQueue = window.__fathomClientQueue || [];

  window.__fathomClientQueue.forEach(function (command) {
    switch (command.type) {
      case 'trackPageview':
        if (command.opts) {
          window.fathom.trackPageview(command.opts);
        } else {
          window.fathom.trackPageview();
        }

        return;

      case 'trackGoal':
        window.fathom.trackGoal(command.code, command.cents);
        return;
    }
  });

  window.__fathomClientQueue = [];
};

var load = function load(siteId, opts) {
  var tracker = document.createElement('script');
  var firstScript = document.getElementsByTagName('script')[0];
  tracker.id = 'fathom-script';
  tracker.async = true;
  tracker.setAttribute('site', siteId);
  tracker.src = opts && opts.url ? opts.url : 'https://cdn.usefathom.com/script.js';

  if (opts) {
    if (opts.auto !== undefined) tracker.setAttribute('auto', "".concat(opts.auto));
    if (opts.honorDNT !== undefined) tracker.setAttribute('honor-dnt', "".concat(opts.honorDNT));
    if (opts.canonical !== undefined) tracker.setAttribute('canonical', "".concat(opts.canonical));
    if (opts.includedDomains) tracker.setAttribute('included-domains', opts.includedDomains.join(','));
    if (opts.excludedDomains) tracker.setAttribute('excluded-domains', opts.excludedDomains.join(','));
    if (opts.spa) tracker.setAttribute('spa', opts.spa);
  }

  tracker.onload = flushQueue;
  firstScript.parentNode.insertBefore(tracker, firstScript);
};
/**
 * Tracks a pageview.
 *
 * @param opts - An optional `url` or `referrer` to override auto-detected values.
 */

var trackPageview = function trackPageview(opts) {
  if (window.fathom) {
    if (opts) {
      window.fathom.trackPageview(opts);
    } else {
      window.fathom.trackPageview();
    }
  } else {
    enqueue({
      type: 'trackPageview',
      opts: opts
    });
  }
};
/**
 * Tracks a goal.
 *
 * @param code - The goal ID.
 * @param cents - The value in cents.
 */

var trackGoal = function trackGoal(code, cents) {
  if (window.fathom) {
    window.fathom.trackGoal(code, cents);
  } else {
    enqueue({
      type: 'trackGoal',
      code: code,
      cents: cents
    });
  }
};




/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app!":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app! ***!
  \*******************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {


    (window.__NEXT_P = window.__NEXT_P || []).push([
      "/_app",
      function () {
        return __webpack_require__(/*! private-next-pages/_app */ "./pages/_app.tsx");
      }
    ]);
  

/***/ }),

/***/ "./node_modules/prismjs/themes/prism-coy.css":
/*!***************************************************!*\
  !*** ./node_modules/prismjs/themes/prism-coy.css ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../../next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./prism-coy.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/prismjs/themes/prism-coy.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = function(element) {
                // These elements should always exist. If they do not,
                // this code should fail.
                var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');
                var parentNode = anchorElement.parentNode// Normally <head>
                ;
                // Each style tag should be placed right before our
                // anchor. By inserting before and not after, we do not
                // need to track the last inserted element.
                parentNode.insertBefore(element, anchorElement);
            };
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
    if (!a && b || a && !b) {
        return false;
    }
    let p;
    for(p in a){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (a[p] !== b[p]) {
            return false;
        }
    }
    for(p in b){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (!a[p]) {
            return false;
        }
    }
    return true;
};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./prism-coy.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/prismjs/themes/prism-coy.css",
      function () {
        content = __webpack_require__(/*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./prism-coy.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/prismjs/themes/prism-coy.css");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.id, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./node_modules/react-notion-x/src/styles.css":
/*!****************************************************!*\
  !*** ./node_modules/react-notion-x/src/styles.css ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../../next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./styles.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/react-notion-x/src/styles.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = function(element) {
                // These elements should always exist. If they do not,
                // this code should fail.
                var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');
                var parentNode = anchorElement.parentNode// Normally <head>
                ;
                // Each style tag should be placed right before our
                // anchor. By inserting before and not after, we do not
                // need to track the last inserted element.
                parentNode.insertBefore(element, anchorElement);
            };
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
    if (!a && b || a && !b) {
        return false;
    }
    let p;
    for(p in a){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (a[p] !== b[p]) {
            return false;
        }
    }
    for(p in b){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (!a[p]) {
            return false;
        }
    }
    return true;
};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./styles.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/react-notion-x/src/styles.css",
      function () {
        content = __webpack_require__(/*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./styles.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/react-notion-x/src/styles.css");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.id, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./node_modules/react-static-tweets/styles.css":
/*!*****************************************************!*\
  !*** ./node_modules/react-static-tweets/styles.css ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./styles.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/react-static-tweets/styles.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = function(element) {
                // These elements should always exist. If they do not,
                // this code should fail.
                var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');
                var parentNode = anchorElement.parentNode// Normally <head>
                ;
                // Each style tag should be placed right before our
                // anchor. By inserting before and not after, we do not
                // need to track the last inserted element.
                parentNode.insertBefore(element, anchorElement);
            };
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
    if (!a && b || a && !b) {
        return false;
    }
    let p;
    for(p in a){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (a[p] !== b[p]) {
            return false;
        }
    }
    for(p in b){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (!a[p]) {
            return false;
        }
    }
    return true;
};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !!../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./styles.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/react-static-tweets/styles.css",
      function () {
        content = __webpack_require__(/*! !!../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./styles.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/react-static-tweets/styles.css");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.id, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./styles/global.css":
/*!***************************!*\
  !*** ./styles/global.css ***!
  \***************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./global.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/global.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = function(element) {
                // These elements should always exist. If they do not,
                // this code should fail.
                var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');
                var parentNode = anchorElement.parentNode// Normally <head>
                ;
                // Each style tag should be placed right before our
                // anchor. By inserting before and not after, we do not
                // need to track the last inserted element.
                parentNode.insertBefore(element, anchorElement);
            };
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
    if (!a && b || a && !b) {
        return false;
    }
    let p;
    for(p in a){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (a[p] !== b[p]) {
            return false;
        }
    }
    for(p in b){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (!a[p]) {
            return false;
        }
    }
    return true;
};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./global.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/global.css",
      function () {
        content = __webpack_require__(/*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./global.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/global.css");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.id, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./styles/notion.css":
/*!***************************!*\
  !*** ./styles/notion.css ***!
  \***************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./notion.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/notion.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = function(element) {
                // These elements should always exist. If they do not,
                // this code should fail.
                var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');
                var parentNode = anchorElement.parentNode// Normally <head>
                ;
                // Each style tag should be placed right before our
                // anchor. By inserting before and not after, we do not
                // need to track the last inserted element.
                parentNode.insertBefore(element, anchorElement);
            };
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
    if (!a && b || a && !b) {
        return false;
    }
    let p;
    for(p in a){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (a[p] !== b[p]) {
            return false;
        }
    }
    for(p in b){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (!a[p]) {
            return false;
        }
    }
    return true;
};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./notion.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/notion.css",
      function () {
        content = __webpack_require__(/*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./notion.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/notion.css");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.id, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./styles/prism-theme.css":
/*!********************************!*\
  !*** ./styles/prism-theme.css ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./prism-theme.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/prism-theme.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = function(element) {
                // These elements should always exist. If they do not,
                // this code should fail.
                var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');
                var parentNode = anchorElement.parentNode// Normally <head>
                ;
                // Each style tag should be placed right before our
                // anchor. By inserting before and not after, we do not
                // need to track the last inserted element.
                parentNode.insertBefore(element, anchorElement);
            };
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
    if (!a && b || a && !b) {
        return false;
    }
    let p;
    for(p in a){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (a[p] !== b[p]) {
            return false;
        }
    }
    for(p in b){
        if (isNamedExport && p === 'default') {
            continue;
        }
        if (!a[p]) {
            return false;
        }
    }
    return true;
};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./prism-theme.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/prism-theme.css",
      function () {
        content = __webpack_require__(/*! !!../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./prism-theme.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/prism-theme.css");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.id, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js ***!
  \************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

const isOldIE = function isOldIE1() {
    let memo;
    return function memorize() {
        if (typeof memo === 'undefined') {
            // Test for IE <= 9 as proposed by Browserhacks
            // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
            // Tests for existence of standard globals is to allow style-loader
            // to operate correctly into non-standard environments
            // @see https://github.com/webpack-contrib/style-loader/issues/177
            memo = Boolean(window && document && document.all && !window.atob);
        }
        return memo;
    };
}();
const getTarget = function getTarget1() {
    const memo = {
    };
    return function memorize(target) {
        if (typeof memo[target] === 'undefined') {
            let styleTarget = document.querySelector(target);
            // Special case to return head of iframe instead of iframe itself
            if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
                try {
                    // This will throw an exception if access to iframe is blocked
                    // due to cross-origin restrictions
                    styleTarget = styleTarget.contentDocument.head;
                } catch (e) {
                    // istanbul ignore next
                    styleTarget = null;
                }
            }
            memo[target] = styleTarget;
        }
        return memo[target];
    };
}();
const stylesInDom = [];
function getIndexByIdentifier(identifier) {
    let result = -1;
    for(let i = 0; i < stylesInDom.length; i++){
        if (stylesInDom[i].identifier === identifier) {
            result = i;
            break;
        }
    }
    return result;
}
function modulesToDom(list, options) {
    const idCountMap = {
    };
    const identifiers = [];
    for(let i = 0; i < list.length; i++){
        const item = list[i];
        const id = options.base ? item[0] + options.base : item[0];
        const count = idCountMap[id] || 0;
        const identifier = id + ' ' + count.toString();
        idCountMap[id] = count + 1;
        const index = getIndexByIdentifier(identifier);
        const obj = {
            css: item[1],
            media: item[2],
            sourceMap: item[3]
        };
        if (index !== -1) {
            stylesInDom[index].references++;
            stylesInDom[index].updater(obj);
        } else {
            stylesInDom.push({
                identifier: identifier,
                updater: addStyle(obj, options),
                references: 1
            });
        }
        identifiers.push(identifier);
    }
    return identifiers;
}
function insertStyleElement(options) {
    const style = document.createElement('style');
    const attributes = options.attributes || {
    };
    if (typeof attributes.nonce === 'undefined') {
        const nonce = // eslint-disable-next-line no-undef
         true ? __webpack_require__.nc : 0;
        if (nonce) {
            attributes.nonce = nonce;
        }
    }
    Object.keys(attributes).forEach(function(key) {
        style.setAttribute(key, attributes[key]);
    });
    if (typeof options.insert === 'function') {
        options.insert(style);
    } else {
        const target = getTarget(options.insert || 'head');
        if (!target) {
            throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
        }
        target.appendChild(style);
    }
    return style;
}
function removeStyleElement(style) {
    // istanbul ignore if
    if (style.parentNode === null) {
        return false;
    }
    style.parentNode.removeChild(style);
}
/* istanbul ignore next  */ const replaceText = function replaceText1() {
    const textStore = [];
    return function replace(index, replacement) {
        textStore[index] = replacement;
        return textStore.filter(Boolean).join('\n');
    };
}();
function applyToSingletonTag(style, index, remove, obj) {
    const css = remove ? '' : obj.media ? '@media ' + obj.media + ' {' + obj.css + '}' : obj.css;
    // For old IE
    /* istanbul ignore if  */ if (style.styleSheet) {
        style.styleSheet.cssText = replaceText(index, css);
    } else {
        const cssNode = document.createTextNode(css);
        const childNodes = style.childNodes;
        if (childNodes[index]) {
            style.removeChild(childNodes[index]);
        }
        if (childNodes.length) {
            style.insertBefore(cssNode, childNodes[index]);
        } else {
            style.appendChild(cssNode);
        }
    }
}
function applyToTag(style, options, obj) {
    let css = obj.css;
    const media = obj.media;
    const sourceMap = obj.sourceMap;
    if (media) {
        style.setAttribute('media', media);
    } else {
        style.removeAttribute('media');
    }
    if (sourceMap && typeof btoa !== 'undefined') {
        css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */';
    }
    // For old IE
    /* istanbul ignore if  */ if (style.styleSheet) {
        style.styleSheet.cssText = css;
    } else {
        while(style.firstChild){
            style.removeChild(style.firstChild);
        }
        style.appendChild(document.createTextNode(css));
    }
}
let singleton = null;
let singletonCounter = 0;
function addStyle(obj, options) {
    let style;
    let update;
    let remove;
    if (options.singleton) {
        const styleIndex = singletonCounter++;
        style = singleton || (singleton = insertStyleElement(options));
        update = applyToSingletonTag.bind(null, style, styleIndex, false);
        remove = applyToSingletonTag.bind(null, style, styleIndex, true);
    } else {
        style = insertStyleElement(options);
        update = applyToTag.bind(null, style, options);
        remove = function() {
            removeStyleElement(style);
        };
    }
    update(obj);
    return function updateStyle(newObj) {
        if (newObj) {
            if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
                return;
            }
            update(obj = newObj);
        } else {
            remove();
        }
    };
}
module.exports = function(list, options) {
    options = options || {
    };
    // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
    // tags it will allow on a page
    if (!options.singleton && typeof options.singleton !== 'boolean') {
        options.singleton = isOldIE();
    }
    list = list || [];
    let lastIdentifiers = modulesToDom(list, options);
    return function update(newList) {
        newList = newList || [];
        if (Object.prototype.toString.call(newList) !== '[object Array]') {
            return;
        }
        for(let i = 0; i < lastIdentifiers.length; i++){
            const identifier = lastIdentifiers[i];
            const index = getIndexByIdentifier(identifier);
            stylesInDom[index].references--;
        }
        const newLastIdentifiers = modulesToDom(newList, options);
        for(let i1 = 0; i1 < lastIdentifiers.length; i1++){
            const identifier = lastIdentifiers[i1];
            const index = getIndexByIdentifier(identifier);
            if (stylesInDom[index].references === 0) {
                stylesInDom[index].updater();
                stylesInDom.splice(index, 1);
            }
        }
        lastIdentifiers = newLastIdentifiers;
    };
};

//# sourceMappingURL=injectStylesIntoStyleTag.js.map

/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/api.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/api.js ***!
  \***********************************************************/
/***/ (function(module) {

var __dirname = "/";
module.exports=function(){"use strict";var n={762:function(n){n.exports=function(n){var t=[];t.toString=function toString(){return this.map(function(t){var r=cssWithMappingToString(t,n);if(t[2]){return"@media ".concat(t[2]," {").concat(r,"}")}return r}).join("")};t.i=function(n,r,o){if(typeof n==="string"){n=[[null,n,""]]}var e={};if(o){for(var a=0;a<this.length;a++){var c=this[a][0];if(c!=null){e[c]=true}}}for(var i=0;i<n.length;i++){var u=[].concat(n[i]);if(o&&e[u[0]]){continue}if(r){if(!u[2]){u[2]=r}else{u[2]="".concat(r," and ").concat(u[2])}}t.push(u)}};return t};function cssWithMappingToString(n,t){var r=n[1]||"";var o=n[3];if(!o){return r}if(t&&typeof btoa==="function"){var e=toComment(o);var a=o.sources.map(function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")});return[r].concat(a).concat([e]).join("\n")}return[r].join("\n")}function toComment(n){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n))));var r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t);return"/*# ".concat(r," */")}}};var t={};function __nccwpck_require__(r){if(t[r]){return t[r].exports}var o=t[r]={exports:{}};var e=true;try{n[r](o,o.exports,__nccwpck_require__);e=false}finally{if(e)delete t[r]}return o.exports}__nccwpck_require__.ab=__dirname+"/";return __nccwpck_require__(762)}();

/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/prismjs/themes/prism-coy.css":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/prismjs/themes/prism-coy.css ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/**\n * prism.js Coy theme for JavaScript, CoffeeScript, CSS and HTML\n * Based on https://github.com/tshedor/workshop-wp-theme (Example: http://workshop.kansan.com/category/sessions/basics or http://workshop.timshedor.com/category/sessions/basics);\n * @author Tim  Shedor\n */\n\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tcolor: black;\n\tbackground: none;\n\tfont-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n\tfont-size: 1em;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n}\n\n/* Code blocks */\npre[class*=\"language-\"] {\n\tposition: relative;\n\tmargin: .5em 0;\n\toverflow: visible;\n\tpadding: 0;\n}\npre[class*=\"language-\"]>code {\n\tposition: relative;\n\tborder-left: 10px solid #358ccb;\n\t-webkit-box-shadow: -1px 0px 0px 0px #358ccb, 0px 0px 0px 1px #dfdfdf;\n\t        box-shadow: -1px 0px 0px 0px #358ccb, 0px 0px 0px 1px #dfdfdf;\n\tbackground-color: #fdfdfd;\n\tbackground-image: -webkit-gradient(linear, left top, left bottom, color-stop(50%, transparent), color-stop(50%, rgba(69, 142, 209, 0.04)));\n\tbackground-image: -webkit-linear-gradient(transparent 50%, rgba(69, 142, 209, 0.04) 50%);\n\tbackground-image: linear-gradient(transparent 50%, rgba(69, 142, 209, 0.04) 50%);\n\tbackground-size: 3em 3em;\n\tbackground-origin: content-box;\n\tbackground-attachment: local;\n}\n\ncode[class*=\"language-\"] {\n\tmax-height: inherit;\n\theight: inherit;\n\tpadding: 0 1em;\n\tdisplay: block;\n\toverflow: auto;\n}\n\n/* Margin bottom to accommodate shadow */\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tbackground-color: #fdfdfd;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n\tmargin-bottom: 1em;\n}\n\n/* Inline code */\n:not(pre) > code[class*=\"language-\"] {\n\tposition: relative;\n\tpadding: .2em;\n\tborder-radius: 0.3em;\n\tcolor: #c92c2c;\n\tborder: 1px solid rgba(0, 0, 0, 0.1);\n\tdisplay: inline;\n\twhite-space: normal;\n}\n\npre[class*=\"language-\"]:before,\npre[class*=\"language-\"]:after {\n\tcontent: '';\n\tz-index: -2;\n\tdisplay: block;\n\tposition: absolute;\n\tbottom: 0.75em;\n\tleft: 0.18em;\n\twidth: 40%;\n\theight: 20%;\n\tmax-height: 13em;\n\t-webkit-box-shadow: 0px 13px 8px #979797;\n\t        box-shadow: 0px 13px 8px #979797;\n\t-webkit-transform: rotate(-2deg);\n\ttransform: rotate(-2deg);\n}\n\npre[class*=\"language-\"]:after {\n\tright: 0.75em;\n\tleft: auto;\n\t-webkit-transform: rotate(2deg);\n\ttransform: rotate(2deg);\n}\n\n.token.comment,\n.token.block-comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: #7D8B99;\n}\n\n.token.punctuation {\n\tcolor: #5F6364;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.function-name,\n.token.constant,\n.token.symbol,\n.token.deleted {\n\tcolor: #c92c2c;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.function,\n.token.builtin,\n.token.inserted {\n\tcolor: #2f9c0a;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.token.variable {\n\tcolor: #a67f59;\n\tbackground: rgba(255, 255, 255, 0.5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword,\n.token.class-name {\n\tcolor: #1990b8;\n}\n\n.token.regex,\n.token.important {\n\tcolor: #e90;\n}\n\n.language-css .token.string,\n.style .token.string {\n\tcolor: #a67f59;\n\tbackground: rgba(255, 255, 255, 0.5);\n}\n\n.token.important {\n\tfont-weight: normal;\n}\n\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n.token.namespace {\n\topacity: .7;\n}\n\n@media screen and (max-width: 767px) {\n\tpre[class*=\"language-\"]:before,\n\tpre[class*=\"language-\"]:after {\n\t\tbottom: 14px;\n\t\t-webkit-box-shadow: none;\n\t\t        box-shadow: none;\n\t}\n\n}\n\n/* Plugin styles: Line Numbers */\npre[class*=\"language-\"].line-numbers.line-numbers {\n\tpadding-left: 0;\n}\n\npre[class*=\"language-\"].line-numbers.line-numbers code {\n\tpadding-left: 3.8em;\n}\n\npre[class*=\"language-\"].line-numbers.line-numbers .line-numbers-rows {\n\tleft: 0;\n}\n\n/* Plugin styles: Line Highlight */\npre[class*=\"language-\"][data-line] {\n\tpadding-top: 0;\n\tpadding-bottom: 0;\n\tpadding-left: 0;\n}\npre[data-line] code {\n\tposition: relative;\n\tpadding-left: 4em;\n}\npre .line-highlight {\n\tmargin-top: 0;\n}\n", "",{"version":3,"sources":["webpack://node_modules/prismjs/themes/prism-coy.css"],"names":[],"mappings":"AAAA;;;;EAIE;;AAEF;;CAEC,YAAY;CACZ,gBAAgB;CAChB,sEAAsE;CACtE,cAAc;CACd,gBAAgB;CAChB,gBAAgB;CAChB,oBAAoB;CACpB,kBAAkB;CAClB,iBAAiB;CACjB,gBAAgB;;CAEhB,gBAAgB;CAEhB,WAAW;;CAEX,qBAAqB;CACrB,kBAAkB;CAClB,iBAAiB;CACjB,aAAa;AACd;;AAEA,gBAAgB;AAChB;CACC,kBAAkB;CAClB,cAAc;CACd,iBAAiB;CACjB,UAAU;AACX;AACA;CACC,kBAAkB;CAClB,+BAA+B;CAC/B,qEAA6D;SAA7D,6DAA6D;CAC7D,yBAAyB;CACzB,0IAAgF;CAAhF,wFAAgF;CAAhF,gFAAgF;CAChF,wBAAwB;CACxB,8BAA8B;CAC9B,4BAA4B;AAC7B;;AAEA;CACC,mBAAmB;CACnB,eAAe;CACf,cAAc;CACd,cAAc;CACd,cAAc;AACf;;AAEA,wCAAwC;AACxC;;CAEC,yBAAyB;CACzB,8BAA8B;CAC9B,2BAA2B;CAC3B,sBAAsB;CACtB,kBAAkB;AACnB;;AAEA,gBAAgB;AAChB;CACC,kBAAkB;CAClB,aAAa;CACb,oBAAoB;CACpB,cAAc;CACd,oCAAoC;CACpC,eAAe;CACf,mBAAmB;AACpB;;AAEA;;CAEC,WAAW;CACX,WAAW;CACX,cAAc;CACd,kBAAkB;CAClB,cAAc;CACd,YAAY;CACZ,UAAU;CACV,WAAW;CACX,gBAAgB;CAChB,wCAAgC;SAAhC,gCAAgC;CAChC,gCAAgC;CAIhC,wBAAwB;AACzB;;AAEA;CACC,aAAa;CACb,UAAU;CACV,+BAA+B;CAI/B,uBAAuB;AACxB;;AAEA;;;;;CAKC,cAAc;AACf;;AAEA;CACC,cAAc;AACf;;AAEA;;;;;;;;CAQC,cAAc;AACf;;AAEA;;;;;;;CAOC,cAAc;AACf;;AAEA;;;;CAIC,cAAc;CACd,oCAAoC;AACrC;;AAEA;;;;CAIC,cAAc;AACf;;AAEA;;CAEC,WAAW;AACZ;;AAEA;;CAEC,cAAc;CACd,oCAAoC;AACrC;;AAEA;CACC,mBAAmB;AACpB;;AAEA;CACC,iBAAiB;AAClB;AACA;CACC,kBAAkB;AACnB;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,WAAW;AACZ;;AAEA;CACC;;EAEC,YAAY;EACZ,wBAAgB;UAAhB,gBAAgB;CACjB;;AAED;;AAEA,gCAAgC;AAChC;CACC,eAAe;AAChB;;AAEA;CACC,mBAAmB;AACpB;;AAEA;CACC,OAAO;AACR;;AAEA,kCAAkC;AAClC;CACC,cAAc;CACd,iBAAiB;CACjB,eAAe;AAChB;AACA;CACC,kBAAkB;CAClB,iBAAiB;AAClB;AACA;CACC,aAAa;AACd","sourcesContent":["/**\n * prism.js Coy theme for JavaScript, CoffeeScript, CSS and HTML\n * Based on https://github.com/tshedor/workshop-wp-theme (Example: http://workshop.kansan.com/category/sessions/basics or http://workshop.timshedor.com/category/sessions/basics);\n * @author Tim  Shedor\n */\n\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tcolor: black;\n\tbackground: none;\n\tfont-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n\tfont-size: 1em;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n}\n\n/* Code blocks */\npre[class*=\"language-\"] {\n\tposition: relative;\n\tmargin: .5em 0;\n\toverflow: visible;\n\tpadding: 0;\n}\npre[class*=\"language-\"]>code {\n\tposition: relative;\n\tborder-left: 10px solid #358ccb;\n\tbox-shadow: -1px 0px 0px 0px #358ccb, 0px 0px 0px 1px #dfdfdf;\n\tbackground-color: #fdfdfd;\n\tbackground-image: linear-gradient(transparent 50%, rgba(69, 142, 209, 0.04) 50%);\n\tbackground-size: 3em 3em;\n\tbackground-origin: content-box;\n\tbackground-attachment: local;\n}\n\ncode[class*=\"language-\"] {\n\tmax-height: inherit;\n\theight: inherit;\n\tpadding: 0 1em;\n\tdisplay: block;\n\toverflow: auto;\n}\n\n/* Margin bottom to accommodate shadow */\n:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tbackground-color: #fdfdfd;\n\t-webkit-box-sizing: border-box;\n\t-moz-box-sizing: border-box;\n\tbox-sizing: border-box;\n\tmargin-bottom: 1em;\n}\n\n/* Inline code */\n:not(pre) > code[class*=\"language-\"] {\n\tposition: relative;\n\tpadding: .2em;\n\tborder-radius: 0.3em;\n\tcolor: #c92c2c;\n\tborder: 1px solid rgba(0, 0, 0, 0.1);\n\tdisplay: inline;\n\twhite-space: normal;\n}\n\npre[class*=\"language-\"]:before,\npre[class*=\"language-\"]:after {\n\tcontent: '';\n\tz-index: -2;\n\tdisplay: block;\n\tposition: absolute;\n\tbottom: 0.75em;\n\tleft: 0.18em;\n\twidth: 40%;\n\theight: 20%;\n\tmax-height: 13em;\n\tbox-shadow: 0px 13px 8px #979797;\n\t-webkit-transform: rotate(-2deg);\n\t-moz-transform: rotate(-2deg);\n\t-ms-transform: rotate(-2deg);\n\t-o-transform: rotate(-2deg);\n\ttransform: rotate(-2deg);\n}\n\npre[class*=\"language-\"]:after {\n\tright: 0.75em;\n\tleft: auto;\n\t-webkit-transform: rotate(2deg);\n\t-moz-transform: rotate(2deg);\n\t-ms-transform: rotate(2deg);\n\t-o-transform: rotate(2deg);\n\ttransform: rotate(2deg);\n}\n\n.token.comment,\n.token.block-comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: #7D8B99;\n}\n\n.token.punctuation {\n\tcolor: #5F6364;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.function-name,\n.token.constant,\n.token.symbol,\n.token.deleted {\n\tcolor: #c92c2c;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.function,\n.token.builtin,\n.token.inserted {\n\tcolor: #2f9c0a;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.token.variable {\n\tcolor: #a67f59;\n\tbackground: rgba(255, 255, 255, 0.5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword,\n.token.class-name {\n\tcolor: #1990b8;\n}\n\n.token.regex,\n.token.important {\n\tcolor: #e90;\n}\n\n.language-css .token.string,\n.style .token.string {\n\tcolor: #a67f59;\n\tbackground: rgba(255, 255, 255, 0.5);\n}\n\n.token.important {\n\tfont-weight: normal;\n}\n\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n.token.namespace {\n\topacity: .7;\n}\n\n@media screen and (max-width: 767px) {\n\tpre[class*=\"language-\"]:before,\n\tpre[class*=\"language-\"]:after {\n\t\tbottom: 14px;\n\t\tbox-shadow: none;\n\t}\n\n}\n\n/* Plugin styles: Line Numbers */\npre[class*=\"language-\"].line-numbers.line-numbers {\n\tpadding-left: 0;\n}\n\npre[class*=\"language-\"].line-numbers.line-numbers code {\n\tpadding-left: 3.8em;\n}\n\npre[class*=\"language-\"].line-numbers.line-numbers .line-numbers-rows {\n\tleft: 0;\n}\n\n/* Plugin styles: Line Highlight */\npre[class*=\"language-\"][data-line] {\n\tpadding-top: 0;\n\tpadding-bottom: 0;\n\tpadding-left: 0;\n}\npre[data-line] code {\n\tposition: relative;\n\tpadding-left: 4em;\n}\npre .line-highlight {\n\tmargin-top: 0;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/react-notion-x/src/styles.css":
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/react-notion-x/src/styles.css ***!
  \******************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ":root {\n  --fg-color: rgb(55, 53, 47);\n  --fg-color-0: rgba(55, 53, 47, 0.09);\n  --fg-color-1: rgba(55, 53, 47, 0.16);\n  --fg-color-2: rgba(55, 53, 47, 0.4);\n  --fg-color-3: rgba(55, 53, 47, 0.6);\n  --fg-color-4: #000;\n  --fg-color-5: rgba(55, 53, 47, 0.024);\n  --fg-color-6: rgba(55, 53, 47, 0.8);\n  --fg-color-icon: var(--fg-color);\n\n  --bg-color: #fff;\n  --bg-color-0: rgba(135, 131, 120, 0.15);\n  --bg-color-1: rgb(247, 246, 243);\n  --bg-color-2: rgba(135, 131, 120, 0.15);\n\n  --select-color-0: rgb(46, 170, 220);\n  --select-color-1: rgba(45, 170, 219, 0.3);\n  --select-color-2: #d9eff8;\n\n  --notion-red: rgb(224, 62, 62);\n  --notion-pink: rgb(173, 26, 114);\n  --notion-blue: rgb(11, 110, 153);\n  --notion-purple: rgb(105, 64, 165);\n  --notion-teal: rgb(15, 123, 108);\n  --notion-yellow: rgb(223, 171, 1);\n  --notion-orange: rgb(217, 115, 13);\n  --notion-brown: rgb(100, 71, 58);\n  --notion-gray: rgb(155, 154, 151);\n\n  --notion-red_background: rgb(251, 228, 228);\n  --notion-pink_background: rgb(244, 223, 235);\n  --notion-blue_background: rgb(221, 235, 241);\n  --notion-purple_background: rgb(234, 228, 242);\n  --notion-teal_background: rgb(221, 237, 234);\n  --notion-yellow_background: rgb(251, 243, 219);\n  --notion-orange_background: rgb(250, 235, 221);\n  --notion-brown_background: rgb(233, 229, 227);\n  --notion-gray_background: rgb(235, 236, 237);\n\n  --notion-red_background_co: rgba(251, 228, 228, 0.3);\n  --notion-pink_background_co: rgba(244, 223, 235, 0.3);\n  --notion-blue_background_co: rgba(221, 235, 241, 0.3);\n  --notion-purple_background_co: rgba(234, 228, 242, 0.3);\n  --notion-teal_background_co: rgba(221, 237, 234, 0.3);\n  --notion-yellow_background_co: rgba(251, 243, 219, 0.3);\n  --notion-orange_background_co: rgba(250, 235, 221, 0.3);\n  --notion-brown_background_co: rgba(233, 229, 227, 0.3);\n  --notion-gray_background_co: rgba(235, 236, 237, 0.3);\n\n  --notion-item-blue: rgba(0, 120, 223, 0.2);\n  --notion-item-orange: rgba(245, 93, 0, 0.2);\n  --notion-item-green: rgba(0, 135, 107, 0.2);\n  --notion-item-pink: rgba(221, 0, 129, 0.2);\n  --notion-item-brown: rgba(140, 46, 0, 0.2);\n  --notion-item-red: rgba(255, 0, 26, 0.2);\n  --notion-item-yellow: rgba(233, 168, 0, 0.2);\n  --notion-item-default: rgba(206, 205, 202, 0.5);\n  --notion-item-purple: rgba(103, 36, 222, 0.2);\n  --notion-item-gray: rgba(155, 154, 151, 0.4);\n\n  --notion-max-width: 720px;\n  --notion-header-height: 45px;\n}\n\n.dark-mode {\n  --fg-color: rgba(255, 255, 255, 0.9);\n  --fg-color-0: var(--fg-color);\n  --fg-color-1: var(--fg-color);\n  --fg-color-2: var(--fg-color);\n  --fg-color-3: var(--fg-color);\n  --fg-color-4: var(--fg-color);\n  --fg-color-5: rgba(255, 255, 255, 0.7);\n  --fg-color-6: #fff;\n  --fg-color-icon: #fff;\n\n  --bg-color: #2f3437;\n  --bg-color-0: rgb(71, 76, 80);\n  --bg-color-1: rgb(63, 68, 71);\n  --bg-color-2: rgba(135, 131, 120, 0.15);\n\n  --notion-red: rgb(255, 115, 105);\n  --notion-pink: rgb(226, 85, 161);\n  --notion-blue: rgb(82, 156, 202);\n  --notion-purple: rgb(154, 109, 215);\n  --notion-teal: rgb(77, 171, 154);\n  --notion-yellow: rgb(255, 220, 73);\n  --notion-orange: rgb(255, 163, 68);\n  --notion-brown: rgb(147, 114, 100);\n  --notion-gray: rgba(151, 154, 155, 0.95);\n  --notion-red_background: rgb(89, 65, 65);\n  --notion-pink_background: rgb(83, 59, 76);\n  --notion-blue_background: rgb(54, 73, 84);\n  --notion-purple_background: rgb(68, 63, 87);\n  --notion-teal_background: rgb(53, 76, 75);\n  --notion-yellow_background: rgb(89, 86, 59);\n  --notion-orange_background: rgb(89, 74, 58);\n  --notion-brown_background: rgb(67, 64, 64);\n  --notion-gray_background: rgb(69, 75, 78);\n  --notion-red_background_co: rgba(89, 65, 65, 0.3);\n  --notion-pink_background_co: rgba(83, 59, 76, 0.3);\n  --notion-blue_background_co: rgba(120, 162, 187, 0.3);\n  --notion-purple_background_co: rgba(68, 63, 87, 0.3);\n  --notion-teal_background_co: rgba(53, 76, 75, 0.3);\n  --notion-yellow_background_co: rgba(89, 86, 59, 0.3);\n  --notion-orange_background_co: rgba(89, 74, 58, 0.3);\n  --notion-brown_background_co: rgba(67, 64, 64, 0.3);\n  --notion-gray_background_co: rgba(69, 75, 78, 0.3);\n}\n\n.notion {\n  font-size: 16px;\n  line-height: 1.5;\n  color: var(--fg-color);\n  caret-color: var(--fg-color);\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica,\n    'Apple Color Emoji', Arial, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';\n}\n\n.notion > * {\n  padding: 3px 0;\n}\n\n.notion * {\n  -webkit-margin-before: 0;\n          margin-block-start: 0;\n  -webkit-margin-after: 0;\n          margin-block-end: 0;\n}\n\n.notion *::-moz-selection {\n  background: var(--select-color-1);\n}\n\n.notion *::selection {\n  background: var(--select-color-1);\n}\n\n.notion *,\n.notion *:focus {\n  outline: 0;\n}\n\n.notion-page-content {\n  width: 100%;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n}\n\n@media (min-width: 1300px) and (min-height: 300px) {\n  .notion-page-content-has-aside {\n    display: -webkit-flex;\n    display: -moz-box;\n    display: flex;\n    -webkit-flex-direction: row;\n       -moz-box-orient: horizontal;\n       -moz-box-direction: normal;\n            flex-direction: row;\n    width: -webkit-calc((100vw + var(--notion-max-width)) / 2);\n    width: calc((100vw + var(--notion-max-width)) / 2);\n  }\n\n  .notion-page-content-has-aside .notion-aside {\n    display: -webkit-flex;\n    display: -moz-box;\n    display: flex;\n  }\n\n  .notion-page-content-has-aside .notion-page-content-inner {\n    width: var(--notion-max-width);\n    max-width: var(--notion-max-width);\n  }\n}\n\n.notion-page-content-inner {\n  position: relative;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  -webkit-align-items: flex-start;\n     -moz-box-align: start;\n          align-items: flex-start;\n}\n\n.notion-aside {\n  position: -webkit-sticky;\n  position: sticky;\n  top: 148px;\n  /* top: calc((100vh - 48px - 100%) / 2); */\n\n  -webkit-align-self: flex-start;\n\n          align-self: flex-start;\n  -webkit-flex: 1 1;\n     -moz-box-flex: 1;\n          flex: 1 1;\n\n  display: none;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n}\n\n.notion-aside-table-of-contents {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  max-height: -webkit-calc(100vh - 148px - 16px);\n  max-height: calc(100vh - 148px - 16px);\n  overflow: hidden auto;\n  min-width: 222px;\n  overflow: auto;\n}\n\n.notion-aside-table-of-contents-header {\n  text-transform: uppercase;\n  font-weight: 400;\n  font-size: 1.1em;\n  word-break: break-word;\n}\n\n.notion-aside-table-of-contents .notion-table-of-contents-item {\n  line-height: 1;\n}\n\n.notion-aside-table-of-contents\n  .notion-table-of-contents-item-indent-level-0:first-of-type {\n  margin-top: 0;\n}\n\n.notion-aside-table-of-contents .notion-table-of-contents-item-indent-level-0 {\n  margin-top: 0.25em;\n}\n\n.notion-aside-table-of-contents .notion-table-of-contents-item-indent-level-1 {\n  font-size: 13px;\n}\n\n.notion-aside-table-of-contents .notion-table-of-contents-item-indent-level-2 {\n  font-size: 12px;\n}\n\n.notion-aside-table-of-contents .notion-table-of-contents-item-body {\n  border: 0 none;\n}\n\n.notion-table-of-contents-active-item {\n  color: var(--select-color-0) !important;\n}\n\n.notion-app {\n  position: relative;\n  background: var(--bg-color);\n  min-height: 100vh;\n}\n\n.notion-viewport {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.medium-zoom-overlay {\n  z-index: 300;\n}\n\n.medium-zoom-image {\n  border-radius: 0;\n}\n\n.medium-zoom-image--opened {\n  z-index: 301;\n}\n\n.notion-frame {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n\n.notion-page-scroller {\n  position: relative;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  -webkit-flex-grow: 1;\n     -moz-box-flex: 1;\n          flex-grow: 1;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  min-height: -webkit-calc(100vh - var(--notion-header-height));\n  min-height: calc(100vh - var(--notion-header-height));\n}\n\n.notion-red,\n.notion-red_co {\n  color: var(--notion-red);\n}\n.notion-pink,\n.notion-pink_co {\n  color: var(--notion-pink);\n}\n.notion-blue,\n.notion-blue_co {\n  color: var(--notion-blue);\n}\n.notion-purple,\n.notion-purple_co {\n  color: var(--notion-purple);\n}\n.notion-teal,\n.notion-teal_co {\n  color: var(--notion-teal);\n}\n.notion-yellow,\n.notion-yellow_co {\n  color: var(--notion-yellow);\n}\n.notion-orange,\n.notion-orange_co {\n  color: var(--notion-orange);\n}\n.notion-brown,\n.notion-brown_co {\n  color: var(--notion-brown);\n}\n.notion-gray,\n.notion-gray_co {\n  color: var(--notion-gray);\n}\n.notion-red_background {\n  background-color: var(--notion-red_background);\n}\n.notion-pink_background {\n  background-color: var(--notion-pink_background);\n}\n.notion-blue_background {\n  background-color: var(--notion-blue_background);\n}\n.notion-purple_background {\n  background-color: var(--notion-purple_background);\n}\n.notion-teal_background {\n  background-color: var(--notion-teal_background);\n}\n.notion-yellow_background {\n  background-color: var(--notion-yellow_background);\n}\n.notion-orange_background {\n  background-color: var(--notion-orange_background);\n}\n.notion-brown_background {\n  background-color: var(--notion-brown_background);\n}\n.notion-gray_background {\n  background-color: var(--notion-gray_background);\n}\n.notion-red_background_co {\n  background-color: var(--notion-red_background_co);\n}\n.notion-pink_background_co {\n  background-color: var(--notion-pink_background_co);\n}\n.notion-blue_background_co {\n  background-color: var(--notion-blue_background_co);\n}\n.notion-purple_background_co {\n  background-color: var(--notion-purple_background_co);\n}\n.notion-teal_background_co {\n  background-color: var(--notion-teal_background_co);\n}\n.notion-yellow_background_co {\n  background-color: var(--notion-yellow_background_co);\n}\n.notion-orange_background_co {\n  background-color: var(--notion-orange_background_co);\n}\n.notion-brown_background_co {\n  background-color: var(--notion-brown_background_co);\n}\n.notion-gray_background_co {\n  background-color: var(--notion-gray_background_co);\n}\n\n.notion-item-blue {\n  background-color: var(--notion-item-blue);\n}\n.notion-item-orange {\n  background-color: var(--notion-item-orange);\n}\n.notion-item-green {\n  background-color: var(--notion-item-green);\n}\n.notion-item-pink {\n  background-color: var(--notion-item-pink);\n}\n.notion-item-brown {\n  background-color: var(--notion-item-brown);\n}\n.notion-item-red {\n  background-color: var(--notion-item-red);\n}\n.notion-item-yellow {\n  background-color: var(--notion-item-yellow);\n}\n.notion-item-default {\n  background-color: var(--notion-item-default);\n}\n.notion-item-purple {\n  background-color: var(--notion-item-purple);\n}\n.notion-item-gray {\n  background-color: var(--notion-item-gray);\n}\n\n.notion b {\n  font-weight: 600;\n}\n\n.notion-title {\n  width: 100%;\n  font-size: 2.5em;\n  font-weight: 700;\n  margin-bottom: 20px;\n  line-height: 1.2;\n}\n\n.notion-h {\n  position: relative;\n  display: inline-block;\n\n  font-weight: 600;\n  line-height: 1.3;\n  padding: 3px 2px;\n  margin-bottom: 1px;\n\n  max-width: 100%;\n  white-space: pre-wrap;\n  word-break: break-word;\n}\n\n.notion-h1 {\n  font-size: 1.875em;\n  margin-top: 1.08em;\n}\n\n.notion-header-anchor {\n  position: absolute;\n  top: -54px;\n  left: 0;\n}\n\n.notion-title + .notion-h1,\n.notion-title + .notion-h2,\n.notion-title + .notion-h3 {\n  margin-top: 0;\n}\n/* TODO: notion-page-content */\n.notion-h1:first-child {\n  margin-top: 0;\n}\n/* .notion-h1:first-of-type {\n  margin-top: 2px;\n} */\n.notion-h2 {\n  font-size: 1.5em;\n  margin-top: 1.1em;\n}\n.notion-h3 {\n  font-size: 1.25em;\n  margin-top: 1em;\n}\n\n.notion-h:hover .notion-hash-link {\n  opacity: 1;\n}\n\n.notion-hash-link {\n  opacity: 0;\n  text-decoration: none;\n  float: left;\n  margin-left: -20px;\n  padding-right: 4px;\n  fill: var(--fg-color-icon);\n}\n\n.notion-page-cover {\n  display: block;\n  object-fit: cover;\n  width: 100%;\n  height: 30vh;\n  min-height: 30vh;\n  max-height: 30vh;\n  padding: 0;\n}\n\n.notion-page {\n  position: relative;\n  padding: 0;\n  margin: 0 auto;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  -webkit-flex-grow: 1;\n     -moz-box-flex: 1;\n          flex-grow: 1;\n  -webkit-flex-shrink: 0;\n          flex-shrink: 0;\n  -webkit-align-items: flex-start;\n     -moz-box-align: start;\n          align-items: flex-start;\n  width: 100%;\n  max-width: 100%;\n}\n\n.notion-full-page {\n  padding-bottom: -webkit-calc(max(10vh, 120px));\n  padding-bottom: calc(max(10vh, 120px));\n}\n\n.notion-page-no-cover {\n  margin-top: 48px !important;\n  padding-top: 96px;\n}\n\n.notion-page-no-cover.notion-page-no-icon {\n  padding-top: 0;\n}\n\n.notion-page-no-cover.notion-page-has-image-icon {\n  padding-top: 148px;\n}\n\n.notion-page-has-cover.notion-page-no-icon {\n  padding-top: 48px;\n}\n\n.notion-page-has-cover {\n  padding-top: 112px;\n}\n\n.notion-page-has-cover.notion-page-has-text-icon {\n  padding-top: 64px;\n}\n\n.notion-page-icon-wrapper {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: row;\n     -moz-box-orient: horizontal;\n     -moz-box-direction: normal;\n          flex-direction: row;\n  -webkit-justify-content: center;\n     -moz-box-pack: center;\n          justify-content: center;\n}\n\n.notion-page-icon-wrapper .notion-page-icon {\n  position: relative;\n  display: block;\n}\n\n.notion-page-has-cover .notion-page-icon-wrapper img.notion-page-icon {\n  top: -62px;\n}\n\n.notion-page-has-cover .notion-page-icon-wrapper span.notion-page-icon {\n  top: -42px;\n}\n\n.notion-page-icon-wrapper span.notion-page-icon {\n  height: 78px;\n  width: 78px;\n  max-width: 78px;\n  max-height: 78px;\n  font-size: 78px;\n  line-height: 1.1;\n  margin-left: 0;\n  color: var(--fg-color-icon);\n}\n\n.notion-page-icon-wrapper img.notion-page-icon {\n  display: block;\n  border-radius: 3px;\n  width: 124px;\n  height: 124px;\n  max-width: 124px;\n  max-height: 124px;\n}\n\n.notion-page {\n  width: var(--notion-max-width);\n  padding-left: -webkit-calc(min(12px, 8vw));\n  padding-left: calc(min(12px, 8vw));\n  padding-right: -webkit-calc(min(12px, 8vw));\n  padding-right: calc(min(12px, 8vw));\n}\n\n.notion-full-width {\n  --notion-max-width: -webkit-calc(min(1920px, 98vw));\n  --notion-max-width: calc(min(1920px, 98vw));\n  padding-left: -webkit-calc(min(96px, 8vw));\n  padding-left: calc(min(96px, 8vw));\n  padding-right: -webkit-calc(min(96px, 8vw));\n  padding-right: calc(min(96px, 8vw));\n}\n\n.notion-small-text {\n  font-size: 14px;\n}\n\n.notion-quote {\n  display: block;\n  width: 100%;\n  white-space: pre-wrap;\n  word-break: break-word;\n  border-left: 3px solid currentcolor;\n  padding: 0.2em 0.9em;\n  margin: 6px 0;\n  font-size: 1.2em;\n}\n\n.notion-hr {\n  width: 100%;\n  margin: 6px 0;\n  padding: 0;\n  border-top: none;\n  border-color: var(--fg-color-0);\n}\n\n.notion-link {\n  color: inherit;\n  word-break: break-word;\n  text-decoration: inherit;\n  border-bottom: 0.05em solid;\n  border-color: var(--fg-color-2);\n  opacity: 0.7;\n  -webkit-transition: border-color 100ms ease-in, opacity 100ms ease-in;\n  transition: border-color 100ms ease-in, opacity 100ms ease-in;\n}\n\n.notion-link:hover {\n  border-color: var(--fg-color-6);\n  opacity: 1;\n}\n\n.notion-collection .notion-link {\n  opacity: 1;\n}\n\n.notion-blank {\n  width: 100%;\n  min-height: 1rem;\n  padding: 3px 2px;\n  margin-top: 1px;\n  margin-bottom: 1px;\n}\n\n.notion-page-link {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  color: var(--fg-color);\n  text-decoration: none;\n  width: 100%;\n  height: 30px;\n  margin: 1px 0;\n  -webkit-transition: background 120ms ease-in 0s;\n  transition: background 120ms ease-in 0s;\n}\n\n.notion-page-link:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-collection-card .notion-page-link {\n  height: unset;\n  margin: 0;\n  -webkit-transition: unset;\n  transition: unset;\n}\n.notion-collection-card .notion-page-link {\n  background: unset;\n}\n\n.notion-page-icon {\n  font-family: 'Apple Color Emoji', 'Segoe UI Emoji', NotoColorEmoji,\n    'Noto Color Emoji', 'Segoe UI Symbol', 'Android Emoji', EmojiSymbols;\n  font-size: 1.1em;\n  margin: 2px 4px 0 2px;\n  fill: var(--fg-color-6);\n  color: var(--fg-color-icon);\n}\n\nimg.notion-page-icon,\nsvg.notion-page-icon {\n  display: block;\n  object-fit: fill;\n  border-radius: 3px;\n  /* padding: 1px; */\n  max-width: 22px;\n  max-height: 22px;\n}\n\n.notion-icon {\n  display: block;\n  width: 18px;\n  height: 18px;\n  color: var(--fg-color-icon);\n}\n\n.notion-page-text {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  line-height: 1.3;\n  border-bottom: 1px solid var(--fg-color-1);\n  margin: 4px 0;\n}\n\n.notion-inline-code {\n  color: #eb5757;\n  padding: 0.2em 0.4em;\n  background: var(--bg-color-2);\n  border-radius: 3px;\n  font-size: 85%;\n  font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier,\n    monospace;\n}\n\n.notion-inline-underscore {\n  text-decoration: underline;\n}\n\n.notion-list {\n  margin: 0;\n  -webkit-margin-before: 0.6em;\n          margin-block-start: 0.6em;\n  -webkit-margin-after: 0.6em;\n          margin-block-end: 0.6em;\n}\n\n.notion-list-disc {\n  list-style-type: disc;\n  -webkit-padding-start: 1.7em;\n     -moz-padding-start: 1.7em;\n          padding-inline-start: 1.7em;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.notion-list-numbered {\n  list-style-type: decimal;\n  -webkit-padding-start: 1.6em;\n     -moz-padding-start: 1.6em;\n          padding-inline-start: 1.6em;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.notion-list-disc li {\n  padding-left: 0.1em;\n}\n\n.notion-list-numbered li {\n  padding-left: 0.2em;\n}\n\n.notion-list li {\n  padding: 6px 0;\n  white-space: pre-wrap;\n}\n\n.notion-asset-wrapper {\n  margin: 0.5rem 0;\n  max-width: 100vw;\n  min-width: 100%;\n  -webkit-align-self: center;\n          align-self: center;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n}\n\n.notion-asset-wrapper-image {\n  max-width: 100%;\n}\n\n.notion-asset-wrapper-full {\n  max-width: 100vw;\n}\n\n.notion-asset-wrapper img {\n  width: 100%;\n  height: 100%;\n  max-height: 100%;\n}\n\n.notion-asset-wrapper iframe {\n  border: none;\n  background: rgb(247, 246, 245);\n}\n\n.notion-text {\n  width: 100%;\n  white-space: pre-wrap;\n  word-break: break-word;\n  padding: 3px 2px;\n  margin: 1px 0;\n}\n\n.notion-text:first-child {\n  margin-top: 2px;\n}\n\n.notion-text-children {\n  padding-left: 1.5em;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n}\n\n.notion-block {\n  padding: 3px 2px;\n}\n\n.notion .notion-code {\n  font-size: 85%;\n}\n\n.notion-code {\n  width: 100%;\n  padding: 30px 16px 30px 20px;\n  margin: 4px 0;\n  border-radius: 3px;\n  -moz-tab-size: 2;\n       tab-size: 2;\n  display: block;\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n  overflow: auto;\n  background: var(--bg-color-1);\n  font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier,\n    monospace;\n}\n\n.notion-column {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  padding-top: 12px;\n  padding-bottom: 12px;\n}\n\n.notion-column > *:first-child {\n  margin-top: 0;\n  margin-left: 0;\n  margin-right: 0;\n}\n\n.notion-column > *:last-child {\n  margin-left: 0;\n  margin-right: 0;\n  margin-bottom: 0;\n}\n\n.notion-row {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  overflow: hidden;\n  width: 100%;\n  max-width: 100%;\n}\n\n@media (max-width: 640px) {\n  .notion-row {\n    -webkit-flex-direction: column;\n       -moz-box-orient: vertical;\n       -moz-box-direction: normal;\n            flex-direction: column;\n  }\n\n  .notion-row .notion-column {\n    width: 100% !important;\n  }\n\n  .notion-row .notion-spacer {\n    display: none;\n  }\n}\n\n.notion-bookmark {\n  margin: 4px 0;\n  width: 100%;\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n  text-decoration: none;\n  border: 1px solid var(--fg-color-1);\n  border-radius: 3px;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  overflow: hidden;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n\n.dark-mode .notion-bookmark {\n  border-color: var(--bg-color-0);\n}\n\n.notion-bookmark > div:first-child {\n  -webkit-flex: 4 1 180px;\n     -moz-box-flex: 4;\n          flex: 4 1 180px;\n  padding: 12px 14px 14px;\n  overflow: hidden;\n  text-align: left;\n  color: var(--fg-color);\n}\n\n.notion-bookmark-title {\n  font-size: 14px;\n  line-height: 20px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-height: 24px;\n  margin-bottom: 2px;\n}\n\n.notion-bookmark-description {\n  font-size: 12px;\n  line-height: 16px;\n  opacity: 0.8;\n  height: 32px;\n  overflow: hidden;\n}\n\n.notion-bookmark-link {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  margin-top: 6px;\n}\n\n.notion-bookmark-link > img {\n  width: 16px;\n  height: 16px;\n  min-width: 16px;\n  margin-right: 6px;\n}\n\n.notion-bookmark-link > div {\n  font-size: 12px;\n  line-height: 16px;\n  color: var(--fg-color);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-bookmark-image {\n  -webkit-flex: 1 1 180px;\n     -moz-box-flex: 1;\n          flex: 1 1 180px;\n  position: relative;\n}\n\n.notion-bookmark-image img {\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.notion-column .notion-bookmark-image {\n  display: none;\n}\n\n.notion-spacer {\n  width: -webkit-calc(min(32px, 4vw));\n  width: calc(min(32px, 4vw));\n}\n\n.notion-spacer:last-child {\n  display: none;\n}\n\n.notion-asset-object-fit {\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  border-radius: 1px;\n}\n\n.notion-image {\n  display: block;\n  width: 100%;\n  border-radius: 1px;\n}\n\n.notion-asset-caption {\n  padding: 6px 0 6px 2px;\n  white-space: pre-wrap;\n  word-break: break-word;\n  caret-color: var(--fg-color);\n  font-size: 14px;\n  line-height: 1.4;\n  color: var(--fg-color-3);\n}\n\n.notion-callout {\n  padding: 16px 16px 16px 12px;\n  display: -webkit-inline-flex;\n  display: -moz-inline-box;\n  display: inline-flex;\n  width: 100%;\n  border-radius: 3px;\n  border-width: 1px;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n  margin: 4px 0;\n  border: 1px solid var(--fg-color-0);\n}\n\n.dark-mode .notion-callout {\n  border-color: var(--bg-color-2);\n}\n\n.notion-callout .notion-page-icon {\n  -webkit-align-self: flex-start;\n          align-self: flex-start;\n  width: 24px;\n  height: 24px;\n  font-size: 1.3em;\n  line-height: 1em;\n}\n\n.notion-callout-text {\n  margin-left: 8px;\n  white-space: pre-wrap;\n  word-break: break-word;\n  width: 100%;\n}\n\n.notion-toggle {\n  padding: 3px 2px;\n}\n.notion-toggle > summary {\n  cursor: pointer;\n  outline: none;\n}\n.notion-toggle > div {\n  margin-left: 1.1em;\n}\n\n.notion-collection {\n  -webkit-align-self: center;\n          align-self: center;\n  min-width: 100%;\n}\n\n.notion-collection-header {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  height: 42px;\n  padding: 4px 2px;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.notion-collection-header-title {\n  display: -webkit-inline-flex;\n  display: -moz-inline-box;\n  display: inline-flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  font-size: 1.25em;\n  line-height: 1.2;\n  font-weight: 600;\n  white-space: pre-wrap;\n  word-break: break-word;\n  margin-right: 0.5em;\n}\n\n.notion-collection-view-dropdown {\n  cursor: pointer;\n  padding: 4px 8px;\n  border-radius: 3px;\n  -webkit-transition: background 120ms ease-in 0s;\n  transition: background 120ms ease-in 0s;\n}\n\n.notion-collection-view-dropdown:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-collection-view-dropdown-icon {\n  position: relative;\n  top: 2px;\n  margin-left: 4px;\n}\n\n.notion-collection-view-type-menu-item {\n  cursor: pointer;\n}\n\n.notion-collection-view-type-menu-item .notion-collection-view-type {\n  width: 340px;\n  max-width: 100%;\n  min-width: 100px;\n}\n\n.notion-collection-view-type {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  font-size: 14px;\n}\n\n.notion-collection-view-type-icon {\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  /* fill: var(--fg-color); */\n  fill: rgba(55, 53, 47);\n  margin-right: 6px;\n}\n\n.notion-collection-view-type-title {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: var(--fg-color);\n}\n\n.notion-table {\n  width: 100vw;\n  max-width: 100vw;\n  -webkit-align-self: center;\n          align-self: center;\n  overflow: auto hidden;\n}\n\n.notion-table-view {\n  position: relative;\n  float: left;\n  min-width: var(--notion-max-width);\n  padding-left: 0;\n  -webkit-transition: padding 200ms ease-out;\n  transition: padding 200ms ease-out;\n}\n\n.notion-table-header {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  position: absolute;\n  z-index: 82;\n  height: 33px;\n  color: var(--fg-color-3);\n  min-width: var(--notion-max-width);\n}\n\n.notion-table-header-inner {\n  width: 100%;\n  display: -webkit-inline-flex;\n  display: -moz-inline-box;\n  display: inline-flex;\n  border-top: 1px solid var(--fg-color-1);\n  border-bottom: 1px solid var(--fg-color-1);\n  /* box-shadow: white -3px 0 0, rgba(55, 53, 47, 0.16) 0 1px 0; */\n}\n\n.notion-table-header-placeholder {\n  height: 34px;\n}\n\n.notion-table-th {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  position: relative;\n}\n\n.notion-table-view-header-cell {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-shrink: 0;\n          flex-shrink: 0;\n  overflow: hidden;\n  height: 32px;\n  font-size: 14px;\n  padding: 0;\n}\n\n.notion-table-view-header-cell-inner {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  width: 100%;\n  height: 100%;\n  padding-left: 8px;\n  padding-right: 8px;\n  border-right: 1px solid var(--fg-color-0);\n}\n\n.notion-table-th:last-child .notion-table-view-header-cell-inner {\n  border-right: 0 none;\n}\n\n.notion-collection-column-title {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  line-height: 120%;\n  min-width: 0;\n  font-size: 14px;\n}\n\n.notion-collection-column-title-icon {\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  min-width: 14px;\n  min-height: 14px;\n  fill: var(--fg-color-2);\n  margin-right: 6px;\n}\n\n.notion-collection-column-title-body {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-table-body {\n  position: relative;\n  min-width: var(--notion-max-width);\n}\n\n.notion-table-row {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  border-bottom: 1px solid var(--fg-color-1);\n}\n\n.notion-table-cell {\n  min-height: 32px;\n  padding: 5px 8px 6px;\n  font-size: 14px;\n  line-height: 1;\n  white-space: normal;\n  overflow: hidden;\n  word-break: break-word;\n  border-right: 1px solid var(--fg-color-1);\n}\n\n.notion-table-cell:last-child {\n  border-right: 0 none;\n}\n\n.notion-table-cell-title {\n  font-weight: 500;\n}\n\n.notion-table-cell-text {\n  white-space: pre-wrap;\n}\n\n.notion-table-cell-text,\n.notion-table-cell-number,\n.notion-table-cell-url,\n.notion-table-cell-email,\n.notion-table-cell-phone_number {\n  line-height: 1.5;\n}\n\n.notion-table-cell-number {\n  white-space: pre-wrap;\n}\n\n.notion-table-cell-select,\n.notion-table-cell-multi_select {\n  padding: 7px 8px 0;\n}\n\n.notion-property-select,\n.notion-property-multi_select {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n          flex-wrap: wrap;\n}\n\n.notion-property-select-item,\n.notion-property-multi_select-item {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  padding: 0 6px;\n  border-radius: 3px;\n  height: 18px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  line-height: 120%;\n}\n\n.notion-property-multi_select-item {\n  margin: 0 6px 6px 0;\n}\n\n.notion-collection-card .notion-property-multi_select-item {\n  margin: 0 6px 0 0;\n}\n\n.notion-property-file {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n          flex-wrap: wrap;\n  -webkit-align-content: flex-start;\n          align-content: flex-start;\n}\n\n.notion-property-file img {\n  max-height: 24px;\n  max-width: 100%;\n  margin-right: 6px;\n}\n\n.notion-collection-card-cover .notion-property-file {\n  height: 100%;\n}\n\n.notion-collection-card-cover .notion-property-file img {\n  width: 100%;\n  margin: 0;\n  max-height: 100%;\n}\n\n.notion-property-checkbox {\n  width: 16px;\n  height: 16px;\n}\n\n.notion-property-checkbox-checked {\n  width: 16px;\n  height: 16px;\n  background: var(--select-color-0);\n}\n\n.notion-property-checkbox-checked svg {\n  position: relative;\n  display: block;\n  /* top: -3px; */\n  top: 1px;\n  left: 1px;\n  width: 14px;\n  height: 14px;\n  fill: #fff;\n}\n\n.notion-property-checkbox-unchecked {\n  width: 16px;\n  height: 16px;\n  border: 1.3px solid var(--fg-color);\n}\n\n.notion-gallery {\n  -webkit-align-self: center;\n          align-self: center;\n}\n\n.notion-gallery-view {\n  position: relative;\n  padding-left: 0;\n  -webkit-transition: padding 200ms ease-out;\n  transition: padding 200ms ease-out;\n}\n\n.notion-gallery-grid {\n  display: grid;\n  position: relative;\n  grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));\n  grid-auto-rows: 1fr;\n  grid-gap: 16px;\n  gap: 16px;\n  border-top: 1px solid var(--fg-color-1);\n  padding-top: 16px;\n  padding-bottom: 4px;\n}\n\n.notion-gallery-grid-size-small {\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n}\n\n.notion-gallery-grid-size-large {\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n}\n\n.notion-collection-card {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  overflow: hidden;\n\n  text-decoration: none;\n  -webkit-box-shadow: rgba(15, 15, 15, 0.1) 0 0 0 1px, rgba(15, 15, 15, 0.1) 0 2px 4px;\n          box-shadow: rgba(15, 15, 15, 0.1) 0 0 0 1px, rgba(15, 15, 15, 0.1) 0 2px 4px;\n  border-radius: 3px;\n  background: var(--bg-color);\n  color: var(--fg-color);\n  -webkit-transition: background 100ms ease-out 0s;\n  transition: background 100ms ease-out 0s;\n\n  -webkit-user-select: none;\n\n     -moz-user-select: none;\n\n      -ms-user-select: none;\n\n          user-select: none;\n  cursor: pointer;\n}\n\n.notion-collection-card:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-collection-card-cover {\n  position: relative;\n  width: 100%;\n  height: 190px;\n  border-bottom: 1px solid var(--fg-color-0);\n  overflow: hidden;\n}\n\n.notion-collection-card-cover img {\n  width: 100%;\n  height: 100%;\n  border-radius: 1px 1px 0 0;\n  /* object-fit: cover; */\n}\n\n.notion-collection-card-cover .notion-collection-card-cover-empty {\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  overflow: hidden;\n  background: var(--fg-color-5);\n  -webkit-box-shadow: var(--fg-color-0) 0 -1px 0 0 inset;\n          box-shadow: var(--fg-color-0) 0 -1px 0 0 inset;\n  padding: 8px 8px 0;\n}\n\n.notion-collection-card-size-small .notion-collection-card-cover {\n  height: 124px;\n}\n\n.notion-collection-card-body {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  padding: 4px 10px;\n}\n\n.notion-collection-card-property {\n  padding: 4px 0;\n  white-space: nowrap;\n  word-break: break-word;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 12px;\n}\n\n.notion-collection-card-property:first-child {\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.notion-collection-card-property:not(:first-child) {\n  white-space: nowrap;\n  text-overflow: clip;\n}\n\n.notion-collection-card-property img {\n  max-height: 18px;\n}\n\n.notion-list-collection {\n  -webkit-align-self: center;\n          align-self: center;\n}\n\n.notion-list-collection {\n  width: 100%;\n  max-width: 100%;\n}\n\n.notion-list-view {\n  position: relative;\n  padding-left: 0;\n  -webkit-transition: padding 200ms ease-out;\n  transition: padding 200ms ease-out;\n  max-width: 100%;\n}\n\n.notion-list-body {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  border-top: 1px solid var(--fg-color-1);\n  padding-top: 8px;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.notion-list-item {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-justify-content: space-between;\n     -moz-box-pack: justify;\n          justify-content: space-between;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  padding: 0 4px;\n  margin: 1px 0;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.notion-list-item-title {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  line-height: 1.3;\n}\n\n.notion-list-item-body {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  -webkit-flex-wrap: nowrap;\n          flex-wrap: nowrap;\n  overflow: hidden;\n}\n\n.notion-list-item-property {\n  /* display: flex;\n  align-items: center; */\n  margin-left: 14px;\n  font-size: 14px;\n}\n\n.notion-list-item-property .notion-property-date,\n.notion-list-item-property .notion-property-created_time,\n.notion-list-item-property .notion-property-last_edited_time,\n.notion-list-item-property .notion-property-url {\n  display: inline-block;\n  color: var(--fg-color-3);\n  font-size: 12px;\n  /* white-space: nowrap; */\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-board {\n  width: 100vw;\n  max-width: 100vw;\n  -webkit-align-self: center;\n          align-self: center;\n  overflow: auto hidden;\n}\n\n.notion-board-view {\n  position: relative;\n  float: left;\n  min-width: 100%;\n  padding-left: 0;\n  -webkit-transition: padding 200ms ease-out;\n  transition: padding 200ms ease-out;\n}\n\n.notion-board-header {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  position: absolute;\n  z-index: 82;\n  height: 44px;\n  min-width: 100%;\n}\n\n.notion-board-header-inner {\n  display: -webkit-inline-flex;\n  display: -moz-inline-box;\n  display: inline-flex;\n  border-top: 1px solid var(--fg-color-1);\n  border-bottom: 1px solid var(--fg-color-1);\n}\n\n.notion-board-header-placeholder {\n  height: var(--notion-header-height);\n}\n\n.notion-board-th {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  font-size: 14px;\n  padding-right: 16px;\n  -webkit-box-sizing: content-box;\n     -moz-box-sizing: content-box;\n          box-sizing: content-box;\n  -webkit-flex-shrink: 0;\n          flex-shrink: 0;\n}\n\n.notion-board-th-body {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  font-size: 14px;\n  line-height: 1.2;\n  padding-left: 2px;\n  padding-right: 4px;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.notion-board-th-count {\n  color: var(--fg-color-3);\n  font-weight: 500;\n  padding: 0 8px;\n}\n\n.notion-board-th-empty {\n  margin-right: 4px;\n  position: relative;\n  top: 2px;\n}\n\n.notion-board-body {\n  display: -webkit-inline-flex;\n  display: -moz-inline-box;\n  display: inline-flex;\n}\n\n.notion-board-group {\n  -webkit-flex: 0 0 auto;\n     -moz-box-flex: 0;\n          flex: 0 0 auto;\n  padding-right: 16px;\n  -webkit-box-sizing: content-box;\n     -moz-box-sizing: content-box;\n          box-sizing: content-box;\n}\n\n.notion-board-group-card {\n  margin-bottom: 8px;\n}\n\n.notion-board-view .notion-board-th,\n.notion-board-view .notion-board-group {\n  width: 260px;\n}\n\n.notion-board-view-size-small .notion-board-th,\n.notion-board-view-size-small .notion-board-group {\n  width: 180px;\n}\n\n.notion-board-view-size-large .notion-board-th,\n.notion-board-view-size-large .notion-board-group {\n  width: 320px;\n}\n\n.notion-board-view .notion-collection-card .notion-collection-card-cover {\n  height: 148px;\n}\n\n.notion-board-view-size-small\n  .notion-collection-card\n  .notion-collection-card-cover {\n  height: 100px;\n}\n\n.notion-board-view-size-large\n  .notion-collection-card\n  .notion-collection-card-cover {\n  height: 180px;\n}\n\n.notion-table-of-contents {\n  width: 100%;\n  margin: 4px 0;\n}\n\n.notion-table-of-contents-item {\n  color: inherit;\n  text-decoration: none;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  -webkit-transition: background 20ms ease-in 0s;\n  transition: background 20ms ease-in 0s;\n  cursor: pointer;\n  width: 100%;\n\n  padding: 6px 2px;\n  font-size: 14px;\n  line-height: 1.3;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-table-of-contents-item:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-table-of-contents-item-body {\n  border-bottom: 1px solid var(--fg-color-1);\n}\n\n.notion-to-do {\n  width: 100%;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n}\n\n.notion-to-do-item {\n  width: 100%;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  width: 100%;\n  padding-left: 2px;\n  min-height: -webkit-calc(1.5em + 3px + 3px);\n  min-height: calc(1.5em + 3px + 3px);\n}\n\n.notion-to-do-children {\n  padding-left: 1.5em;\n}\n\n.notion-to-do-checked .notion-to-do-item {\n  text-decoration: line-through;\n  opacity: 0.375;\n}\n\n.notion-to-do-body {\n  white-space: pre-wrap;\n  word-break: break-word;\n}\n\n.notion-to-do-item .notion-property-checkbox {\n  margin-right: 8px;\n}\n\n.notion-google-drive {\n  width: 100%;\n  -webkit-align-self: center;\n          align-self: center;\n  margin: 4px 0;\n}\n\n.notion-google-drive-link {\n  position: relative;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  color: inherit;\n  text-decoration: none;\n  width: 100%;\n  border: 1px solid var(--fg-color-1);\n  border-radius: 3px;\n\n  -webkit-user-select: none;\n\n     -moz-user-select: none;\n\n      -ms-user-select: none;\n\n          user-select: none;\n  -webkit-transition: background 20ms ease-in 0s;\n  transition: background 20ms ease-in 0s;\n  cursor: pointer;\n}\n\n.notion-google-drive-link:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-google-drive-preview {\n  display: block;\n  position: relative;\n  width: 100%;\n  padding-bottom: 55%;\n  overflow: hidden;\n}\n\n.notion-google-drive-preview img {\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  object-fit: cover;\n  object-position: center top;\n}\n\n.notion-google-drive-body {\n  width: 100%;\n  min-height: 60px;\n  padding: 12px 14px 14px;\n  overflow: hidden;\n  border-top: 1px solid var(--fg-color-1);\n}\n\n.notion-google-drive-body-title {\n  font-size: 14px;\n  line-height: 20px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-bottom: 2px;\n}\n\n.notion-google-drive-body-modified-time {\n  font-size: 12px;\n  line-height: 1.3;\n  color: var(--fg-color-3);\n  max-height: 32px;\n  overflow: hidden;\n}\n\n.notion-google-drive-body-source {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  margin-top: 6px;\n}\n\n.notion-google-drive-body-source-icon {\n  -webkit-flex-shrink: 0;\n          flex-shrink: 0;\n  background-size: cover;\n  width: 16px;\n  height: 16px;\n  margin-right: 6px;\n}\n\n.notion-google-drive-body-source-domain {\n  font-size: 12px;\n  line-height: 16px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-file {\n  width: 100%;\n  margin: 1px 0;\n}\n\n.notion-file-link {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  padding: 3px 2px;\n  border-radius: 3px;\n  -webkit-transition: background 20ms ease-in 0s;\n  transition: background 20ms ease-in 0s;\n  color: inherit;\n  text-decoration: none;\n}\n\n.notion-file-link:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-file-icon {\n  margin-right: 2px;\n  width: 1.35em;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  -webkit-justify-content: center;\n     -moz-box-pack: center;\n          justify-content: center;\n  -webkit-flex-grow: 0;\n     -moz-box-flex: 0;\n          flex-grow: 0;\n  -webkit-flex-shrink: 0;\n          flex-shrink: 0;\n  min-height: -webkit-calc(1.5em + 3px + 3px);\n  min-height: calc(1.5em + 3px + 3px);\n  height: 1.35em;\n}\n\n.notion-file-info {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: baseline;\n     -moz-box-align: baseline;\n          align-items: baseline;\n}\n\n.notion-file-title {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-file-size {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: var(--fg-color-3);\n  font-size: 12px;\n  line-height: 16px;\n  margin-left: 6px;\n}\n\n.notion-audio {\n  width: 100%;\n}\n\n.notion-audio audio {\n  width: 100%;\n}\n\n.notion-equation {\n  position: relative;\n  display: -webkit-inline-flex;\n  display: -moz-inline-box;\n  display: inline-flex;\n  color: inherit;\n  fill: inherit;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  border-radius: 3px;\n  -webkit-transition: background 20ms ease-in 0s;\n  transition: background 20ms ease-in 0s;\n}\n\n.notion-equation-inline {\n  -webkit-user-select: all;\n  -moz-user-select: all;\n  -ms-user-select: all;\n      user-select: all;\n}\n\n.notion-equation-block {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  overflow: auto;\n  width: 100%;\n  max-width: 100%;\n  padding: 4px 8px;\n  margin: 4px 0;\n  cursor: pointer;\n}\n\n.notion-equation:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-equation:active,\n.notion-equation:focus {\n  background: var(--select-color-2);\n}\n\n.notion-frame .katex-display .katex {\n  padding-right: 32px;\n}\n\n.notion-frame .katex > .katex-html {\n  white-space: normal;\n}\n\n.notion-page-title {\n  display: -webkit-inline-flex;\n  display: -moz-inline-box;\n  display: inline-flex;\n  max-width: 100%;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  line-height: 1.3;\n  -webkit-transition: background 120ms ease-in 0s;\n  transition: background 120ms ease-in 0s;\n}\n\n.notion-page-title-icon {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  -webkit-justify-content: center;\n     -moz-box-pack: center;\n          justify-content: center;\n  height: 22px;\n  width: 22px;\n  border-radius: 3px;\n  -webkit-flex-shrink: 0;\n          flex-shrink: 0;\n  margin-left: 2px;\n  margin-right: 6px;\n}\n\n.notion-collection-card-property .notion-link {\n  border-bottom: 0 none;\n}\n\n.notion-collection-card-property .notion-page-title {\n  -webkit-transition: none;\n  transition: none;\n}\n\n.notion-collection-card-property .notion-page-title:hover {\n  background: unset;\n}\n\n.notion-collection-card-property .notion-page-title-icon {\n  margin-left: 0;\n  height: 18px;\n  width: 18px;\n}\n\n.notion-collection-card-property .notion-page-title-text {\n  border-bottom: 0 none;\n}\n\n.notion-collection-card-property\n  .notion-property-relation\n  .notion-page-title-text {\n  border-bottom: 1px solid;\n}\n\n.notion-page-title-text {\n  position: relative;\n  top: 1px;\n  border-bottom: 1px solid var(--fg-color-1);\n  line-height: 1.3;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n}\n\n/* removes double underline with links */\n.notion-link .notion-page-title-text {\n  border-bottom: 0px;\n}\n\n.notion-collection-row {\n  width: 100%;\n  padding: 4px 0 8px;\n  border-bottom: 1px solid var(--fg-color-0);\n  margin-bottom: 1em;\n}\n\n.notion-collection-row-body {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n}\n\n.notion-collection-row-property {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  margin-bottom: 4px;\n}\n\n.notion-collection-row-value {\n  -webkit-flex: 1 1;\n     -moz-box-flex: 1;\n          flex: 1 1;\n  padding: 6px 8px 7px;\n  font-size: 14px;\n}\n\n.notion-collection-row-property .notion-collection-column-title {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  width: 160px;\n  height: 34px;\n  color: var(--fg-color-3);\n  padding: 0 6px;\n}\n\n.notion-collection-row-property .notion-property {\n  width: 100%;\n}\n\n.notion-collection-row-property .notion-collection-column-title-icon {\n  width: 16px;\n  height: 16px;\n  min-width: 16px;\n  min-height: 16px;\n}\n\n.notion-collection-row-property .notion-link {\n  border-bottom: 0 none;\n}\n\n.notion-collection-row-property\n  .notion-property-relation\n  .notion-page-title-text {\n  border-bottom: 1px solid;\n}\n\n.notion-user {\n  display: block;\n  object-fit: cover;\n  border-radius: 100%;\n  width: 20px;\n  height: 20px;\n}\n\n.notion-list-item-property .notion-property-multi_select-item {\n  margin-bottom: 0;\n  -webkit-flex-wrap: none;\n          flex-wrap: none;\n}\n\n.notion-list-item-property .notion-property-multi_select-item:last-of-type {\n  margin-right: 0;\n}\n\n.notion-toggle .notion-collection-header,\n.notion-toggle .notion-table-view,\n.notion-toggle .notion-board-view,\n.notion-column .notion-collection-header,\n.notion-column .notion-table-view,\n.notion-column .notion-board-view {\n  padding-left: 0 !important;\n  padding-right: 0 !important;\n}\n\n.notion-toggle .notion-table,\n.notion-toggle .notion-board,\n.notion-column .notion-table,\n.notion-column .notion-board {\n  width: 100% !important;\n  max-width: 100% !important;\n}\n\n@media only screen and (max-width: 730px) {\n  .notion-page {\n    padding-left: 2vw;\n    padding-right: 2vw;\n  }\n\n  .notion-asset-wrapper {\n    max-width: 100%;\n  }\n\n  .notion-asset-wrapper-full {\n    max-width: 100vw;\n  }\n}\n\n@media (max-width: 640px) {\n  .notion-bookmark-image {\n    display: none;\n  }\n}\n\n.lazy-image-wrapper {\n  position: relative;\n  overflow: hidden;\n}\n\n.lazy-image-wrapper img {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  max-width: 100%;\n  max-height: 100%;\n  min-width: 100%;\n  min-height: 100%;\n}\n\n.lazy-image-preview {\n  -webkit-filter: blur(20px);\n          filter: blur(20px);\n  -webkit-transform: scale(1.1);\n          transform: scale(1.1);\n\n  opacity: 1;\n  -webkit-transition: opacity 400ms ease-in !important;\n  transition: opacity 400ms ease-in !important;\n  -webkit-transition-delay: 100ms;\n          transition-delay: 100ms;\n  will-change: opacity;\n}\n\n.lazy-image-wrapper img.lazy-image-real {\n  position: relative;\n}\n\n.lazy-image-real {\n  opacity: 0;\n  -webkit-transition: opacity 400ms ease-out !important;\n  transition: opacity 400ms ease-out !important;\n  will-change: opacity;\n}\n\n.lazy-image-real.medium-zoom-image {\n  -webkit-transition: opacity 400ms ease-out,\n    -webkit-transform 0.3s cubic-bezier(0.2, 0, 0.2, 1) !important;\n  transition: opacity 400ms ease-out,\n    -webkit-transform 0.3s cubic-bezier(0.2, 0, 0.2, 1) !important;\n  transition: transform 0.3s cubic-bezier(0.2, 0, 0.2, 1),\n    opacity 400ms ease-out !important;\n  transition: transform 0.3s cubic-bezier(0.2, 0, 0.2, 1),\n    opacity 400ms ease-out,\n    -webkit-transform 0.3s cubic-bezier(0.2, 0, 0.2, 1) !important;\n  will-change: opacity, transform;\n}\n\n.medium-zoom-image--opened {\n  object-fit: cover;\n  opacity: 1;\n}\n\n/* NOTE: if we hide the preview image, there's a weird bug with react hydration where\n   the image will sometimes flicker to show the background during initial page load.\n   So I'm removing this `opacity: 0` for now, but it will cause issues if the real\n   image is transparent. */\n.lazy-image-loaded .lazy-image-preview {\n  opacity: 0;\n}\n\n.lazy-image-loaded .lazy-image-real {\n  opacity: 1;\n}\n\n.notion-page-cover.lazy-image-wrapper {\n  padding: 0 !important;\n}\n\n.notion-collection-card-cover .lazy-image-wrapper {\n  padding: 0 !important;\n  height: 100%;\n}\n\n.notion-page-cover .lazy-image-preview,\n.notion-page-cover .lazy-image-real {\n  will-change: unset !important;\n}\n\n.notion-page-cover .lazy-image-loaded .lazy-image-preview {\n  opacity: 1;\n}\n\n.notion-lite {\n  overflow-y: auto;\n}\n\n.notion-lite .notion-page {\n  width: 100%;\n  padding: 0;\n  /* padding: calc(max(2vmin, 8px)); */\n}\n\n.notion-lite .notion-collection-header,\n.notion-lite .notion-table-view,\n.notion-lite .notion-board-view {\n  padding-left: 0 !important;\n  padding-right: 0 !important;\n}\n\n.notion-lite .notion-board,\n.notion-lite .notion-table {\n  width: 100% !important;\n}\n\n.notion-header {\n  position: -webkit-sticky;\n  position: sticky;\n  top: 0;\n  left: 0;\n  z-index: 200;\n\n  width: 100%;\n  max-width: 100vw;\n  overflow: hidden;\n  height: var(--notion-header-height);\n  min-height: var(--notion-header-height);\n\n  background: var(--bg-color);\n}\n\n.notion-header .nav-header {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 100%;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: row;\n     -moz-box-orient: horizontal;\n     -moz-box-direction: normal;\n          flex-direction: row;\n  -webkit-justify-content: space-between;\n     -moz-box-pack: justify;\n          justify-content: space-between;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  padding: 0 12px;\n  -webkit-text-size-adjust: 100%;\n          text-size-adjust: 100%;\n  line-height: 1.5;\n  line-height: 1.2;\n  font-size: 14px;\n}\n\n.notion-header .breadcrumbs {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: row;\n     -moz-box-orient: horizontal;\n     -moz-box-direction: normal;\n          flex-direction: row;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  height: 100%;\n  -webkit-flex-grow: 0;\n     -moz-box-flex: 0;\n          flex-grow: 0;\n  min-width: 0;\n  margin-right: 8px;\n}\n\n.notion-header .breadcrumb {\n  display: -webkit-inline-flex;\n  display: -moz-inline-box;\n  display: inline-flex;\n  -webkit-flex-direction: row;\n     -moz-box-orient: horizontal;\n     -moz-box-direction: normal;\n          flex-direction: row;\n  -webkit-justify-content: center;\n     -moz-box-pack: center;\n          justify-content: center;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  color: var(--fg-color);\n  text-decoration: none;\n  margin: 1px 0px;\n  padding: 4px 6px;\n  border-radius: 3px;\n  -webkit-transition: background 120ms ease-in 0s;\n  transition: background 120ms ease-in 0s;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  background: transparent;\n  cursor: pointer;\n}\n\n.notion-header .breadcrumb .icon {\n  position: relative;\n  top: -1px;\n}\n\n.notion-header img.icon {\n  width: 18px !important;\n  height: 18px !important;\n}\n\n.notion-header .icon {\n  font-size: 18px;\n  margin-right: 6px;\n  line-height: 1.1;\n}\n\n.notion-header .searchIcon {\n  width: 14px;\n  height: 14px;\n  margin-right: 6px;\n  color: var(--fg-color);\n  fill: var(--fg-color);\n}\n\n.notion-header .breadcrumb:not(.active):hover {\n  background: var(--bg-color-0);\n}\n\n.notion-header .breadcrumb:not(.active):active {\n  background: var(--bg-color-1);\n}\n\n.notion-header .breadcrumb.active {\n  cursor: default;\n}\n\n.notion-header .spacer {\n  margin: 0 2px;\n  color: var(--fg-color-2);\n}\n\n.notion-header .button {\n  height: 28px;\n  padding: 0 8px;\n}\n\n.notion-search-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(15, 15, 15, 0.6);\n\n  display: -webkit-flex;\n\n  display: -moz-box;\n\n  display: flex;\n  -webkit-justify-content: center;\n     -moz-box-pack: center;\n          justify-content: center;\n  -webkit-align-items: flex-start;\n     -moz-box-align: start;\n          align-items: flex-start;\n  z-index: 1001;\n}\n\n.notion-search {\n  -webkit-box-shadow: rgba(15, 15, 15, 0.05) 0px 0px 0px 1px,\n    rgba(15, 15, 15, 0.1) 0px 5px 10px, rgba(15, 15, 15, 0.2) 0px 15px 40px;\n          box-shadow: rgba(15, 15, 15, 0.05) 0px 0px 0px 1px,\n    rgba(15, 15, 15, 0.1) 0px 5px 10px, rgba(15, 15, 15, 0.2) 0px 15px 40px;\n  border-radius: 3px;\n  background: #fff;\n\n  position: relative;\n  top: 90px;\n  max-width: 600px;\n  min-height: 50px;\n  max-height: 80vh;\n  width: 75%;\n  overflow: hidden;\n  outline: none;\n\n  font-size: 16px;\n  line-height: 1.5;\n  color: rgb(55, 53, 47);\n  caret-color: rgb(55, 53, 47);\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica,\n    'Apple Color Emoji', Arial, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';\n}\n\n.notion-search .quickFindMenu {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  min-width: 100%;\n  max-width: -webkit-calc(100vw - 24px);\n  max-width: calc(100vw - 24px);\n  height: 100%;\n  max-height: 80vh;\n  min-height: 50px;\n}\n\n.notion-search .searchBar {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: row;\n     -moz-box-orient: horizontal;\n     -moz-box-direction: normal;\n          flex-direction: row;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  height: 52px;\n  -webkit-box-shadow: rgba(55, 53, 47, 0.09) 0px 1px 0px;\n          box-shadow: rgba(55, 53, 47, 0.09) 0px 1px 0px;\n  font-size: 18px;\n  line-height: 27px;\n  padding: 0 16px;\n}\n\n.notion-search .searchInput {\n  resize: none;\n  white-space: nowrap;\n  border: none;\n  outline: none;\n  -webkit-flex: 1 1;\n     -moz-box-flex: 1;\n          flex: 1 1;\n\n  line-height: inherit;\n  font-size: inherit;\n}\n\n.notion-search .inlineIcon {\n  margin-right: 10px;\n  fill: rgba(55, 53, 47, 0.4);\n}\n\n.notion-search .clearButton {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  border-radius: 20px;\n  cursor: pointer;\n  margin-left: 8px;\n}\n\n.notion-search .clearIcon {\n  width: 14px;\n  height: 14px;\n  fill: rgba(55, 53, 47, 0.3);\n}\n\n.notion-search .clearButton:hover .clearIcon {\n  fill: rgba(55, 53, 47, 0.4);\n}\n\n.notion-search .clearButton:active .clearIcon {\n  fill: rgba(55, 53, 47, 0.8);\n}\n\n@-webkit-keyframes spinner {\n  to {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n@keyframes spinner {\n  to {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n.notion-search .loadingIcon {\n  -webkit-animation: spinner 0.6s linear infinite;\n          animation: spinner 0.6s linear infinite;\n}\n\n.notion-search .noResultsPane {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  -webkit-justify-content: center;\n     -moz-box-pack: center;\n          justify-content: center;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  padding: 32px 16px;\n}\n\n.notion-search .noResults {\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 20px;\n  color: rgba(55, 53, 47, 0.6);\n}\n\n.notion-search .noResultsDetail {\n  font-size: 14px;\n  margin-top: 2px;\n  color: rgba(55, 53, 47, 0.4);\n}\n\n.notion-search .resultsFooter {\n  -webkit-box-shadow: rgba(55, 53, 47, 0.09) 0px -1px 0px;\n          box-shadow: rgba(55, 53, 47, 0.09) 0px -1px 0px;\n  margin-top: 1px;\n  font-size: 12px;\n  min-height: 28px;\n  color: rgba(55, 53, 47, 0.4);\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  padding: 0 16px;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  -webkit-justify-content: center;\n     -moz-box-pack: center;\n          justify-content: center;\n}\n\n.notion-search .resultsCount {\n  font-weight: 500;\n  color: rgba(55, 53, 47, 0.6);\n}\n\n.notion-search .resultsPane {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  height: 100%;\n  -webkit-flex: 1 1;\n     -moz-box-flex: 1;\n          flex: 1 1;\n  overflow: auto;\n}\n\n.notion-search .result {\n  padding: 8px 14px;\n  border-bottom: 1px solid rgba(55, 53, 47, 0.06);\n  min-height: 36px;\n  font-size: 14px;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: row;\n     -moz-box-orient: horizontal;\n     -moz-box-direction: normal;\n          flex-direction: row;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  -webkit-justify-content: flex-start;\n     -moz-box-pack: start;\n          justify-content: flex-start;\n  color: rgb(55, 53, 47);\n  text-decoration: none;\n}\n\n.notion-search .resultsPane .result:hover {\n  background: rgba(55, 53, 47, 0.08) !important;\n}\n\n.notion-search .resultsPane .result:active {\n  background: rgba(55, 53, 47, 0.16) !important;\n}\n\n.notion-sync-block {\n  width: 100%;\n}\n", "",{"version":3,"sources":["webpack://node_modules/react-notion-x/src/styles.css"],"names":[],"mappings":"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","sourcesContent":[":root {\n  --fg-color: rgb(55, 53, 47);\n  --fg-color-0: rgba(55, 53, 47, 0.09);\n  --fg-color-1: rgba(55, 53, 47, 0.16);\n  --fg-color-2: rgba(55, 53, 47, 0.4);\n  --fg-color-3: rgba(55, 53, 47, 0.6);\n  --fg-color-4: #000;\n  --fg-color-5: rgba(55, 53, 47, 0.024);\n  --fg-color-6: rgba(55, 53, 47, 0.8);\n  --fg-color-icon: var(--fg-color);\n\n  --bg-color: #fff;\n  --bg-color-0: rgba(135, 131, 120, 0.15);\n  --bg-color-1: rgb(247, 246, 243);\n  --bg-color-2: rgba(135, 131, 120, 0.15);\n\n  --select-color-0: rgb(46, 170, 220);\n  --select-color-1: rgba(45, 170, 219, 0.3);\n  --select-color-2: #d9eff8;\n\n  --notion-red: rgb(224, 62, 62);\n  --notion-pink: rgb(173, 26, 114);\n  --notion-blue: rgb(11, 110, 153);\n  --notion-purple: rgb(105, 64, 165);\n  --notion-teal: rgb(15, 123, 108);\n  --notion-yellow: rgb(223, 171, 1);\n  --notion-orange: rgb(217, 115, 13);\n  --notion-brown: rgb(100, 71, 58);\n  --notion-gray: rgb(155, 154, 151);\n\n  --notion-red_background: rgb(251, 228, 228);\n  --notion-pink_background: rgb(244, 223, 235);\n  --notion-blue_background: rgb(221, 235, 241);\n  --notion-purple_background: rgb(234, 228, 242);\n  --notion-teal_background: rgb(221, 237, 234);\n  --notion-yellow_background: rgb(251, 243, 219);\n  --notion-orange_background: rgb(250, 235, 221);\n  --notion-brown_background: rgb(233, 229, 227);\n  --notion-gray_background: rgb(235, 236, 237);\n\n  --notion-red_background_co: rgba(251, 228, 228, 0.3);\n  --notion-pink_background_co: rgba(244, 223, 235, 0.3);\n  --notion-blue_background_co: rgba(221, 235, 241, 0.3);\n  --notion-purple_background_co: rgba(234, 228, 242, 0.3);\n  --notion-teal_background_co: rgba(221, 237, 234, 0.3);\n  --notion-yellow_background_co: rgba(251, 243, 219, 0.3);\n  --notion-orange_background_co: rgba(250, 235, 221, 0.3);\n  --notion-brown_background_co: rgba(233, 229, 227, 0.3);\n  --notion-gray_background_co: rgba(235, 236, 237, 0.3);\n\n  --notion-item-blue: rgba(0, 120, 223, 0.2);\n  --notion-item-orange: rgba(245, 93, 0, 0.2);\n  --notion-item-green: rgba(0, 135, 107, 0.2);\n  --notion-item-pink: rgba(221, 0, 129, 0.2);\n  --notion-item-brown: rgba(140, 46, 0, 0.2);\n  --notion-item-red: rgba(255, 0, 26, 0.2);\n  --notion-item-yellow: rgba(233, 168, 0, 0.2);\n  --notion-item-default: rgba(206, 205, 202, 0.5);\n  --notion-item-purple: rgba(103, 36, 222, 0.2);\n  --notion-item-gray: rgba(155, 154, 151, 0.4);\n\n  --notion-max-width: 720px;\n  --notion-header-height: 45px;\n}\n\n.dark-mode {\n  --fg-color: rgba(255, 255, 255, 0.9);\n  --fg-color-0: var(--fg-color);\n  --fg-color-1: var(--fg-color);\n  --fg-color-2: var(--fg-color);\n  --fg-color-3: var(--fg-color);\n  --fg-color-4: var(--fg-color);\n  --fg-color-5: rgba(255, 255, 255, 0.7);\n  --fg-color-6: #fff;\n  --fg-color-icon: #fff;\n\n  --bg-color: #2f3437;\n  --bg-color-0: rgb(71, 76, 80);\n  --bg-color-1: rgb(63, 68, 71);\n  --bg-color-2: rgba(135, 131, 120, 0.15);\n\n  --notion-red: rgb(255, 115, 105);\n  --notion-pink: rgb(226, 85, 161);\n  --notion-blue: rgb(82, 156, 202);\n  --notion-purple: rgb(154, 109, 215);\n  --notion-teal: rgb(77, 171, 154);\n  --notion-yellow: rgb(255, 220, 73);\n  --notion-orange: rgb(255, 163, 68);\n  --notion-brown: rgb(147, 114, 100);\n  --notion-gray: rgba(151, 154, 155, 0.95);\n  --notion-red_background: rgb(89, 65, 65);\n  --notion-pink_background: rgb(83, 59, 76);\n  --notion-blue_background: rgb(54, 73, 84);\n  --notion-purple_background: rgb(68, 63, 87);\n  --notion-teal_background: rgb(53, 76, 75);\n  --notion-yellow_background: rgb(89, 86, 59);\n  --notion-orange_background: rgb(89, 74, 58);\n  --notion-brown_background: rgb(67, 64, 64);\n  --notion-gray_background: rgb(69, 75, 78);\n  --notion-red_background_co: rgba(89, 65, 65, 0.3);\n  --notion-pink_background_co: rgba(83, 59, 76, 0.3);\n  --notion-blue_background_co: rgba(120, 162, 187, 0.3);\n  --notion-purple_background_co: rgba(68, 63, 87, 0.3);\n  --notion-teal_background_co: rgba(53, 76, 75, 0.3);\n  --notion-yellow_background_co: rgba(89, 86, 59, 0.3);\n  --notion-orange_background_co: rgba(89, 74, 58, 0.3);\n  --notion-brown_background_co: rgba(67, 64, 64, 0.3);\n  --notion-gray_background_co: rgba(69, 75, 78, 0.3);\n}\n\n.notion {\n  font-size: 16px;\n  line-height: 1.5;\n  color: var(--fg-color);\n  caret-color: var(--fg-color);\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica,\n    'Apple Color Emoji', Arial, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';\n}\n\n.notion > * {\n  padding: 3px 0;\n}\n\n.notion * {\n  margin-block-start: 0;\n  margin-block-end: 0;\n}\n\n.notion *::selection {\n  background: var(--select-color-1);\n}\n\n.notion *,\n.notion *:focus {\n  outline: 0;\n}\n\n.notion-page-content {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n@media (min-width: 1300px) and (min-height: 300px) {\n  .notion-page-content-has-aside {\n    display: flex;\n    flex-direction: row;\n    width: calc((100vw + var(--notion-max-width)) / 2);\n  }\n\n  .notion-page-content-has-aside .notion-aside {\n    display: flex;\n  }\n\n  .notion-page-content-has-aside .notion-page-content-inner {\n    width: var(--notion-max-width);\n    max-width: var(--notion-max-width);\n  }\n}\n\n.notion-page-content-inner {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.notion-aside {\n  position: sticky;\n  top: 148px;\n  /* top: calc((100vh - 48px - 100%) / 2); */\n\n  align-self: flex-start;\n  flex: 1;\n\n  display: none;\n  flex-direction: column;\n  align-items: center;\n}\n\n.notion-aside-table-of-contents {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-height: calc(100vh - 148px - 16px);\n  overflow: hidden auto;\n  min-width: 222px;\n  overflow: auto;\n}\n\n.notion-aside-table-of-contents-header {\n  text-transform: uppercase;\n  font-weight: 400;\n  font-size: 1.1em;\n  word-break: break-word;\n}\n\n.notion-aside-table-of-contents .notion-table-of-contents-item {\n  line-height: 1;\n}\n\n.notion-aside-table-of-contents\n  .notion-table-of-contents-item-indent-level-0:first-of-type {\n  margin-top: 0;\n}\n\n.notion-aside-table-of-contents .notion-table-of-contents-item-indent-level-0 {\n  margin-top: 0.25em;\n}\n\n.notion-aside-table-of-contents .notion-table-of-contents-item-indent-level-1 {\n  font-size: 13px;\n}\n\n.notion-aside-table-of-contents .notion-table-of-contents-item-indent-level-2 {\n  font-size: 12px;\n}\n\n.notion-aside-table-of-contents .notion-table-of-contents-item-body {\n  border: 0 none;\n}\n\n.notion-table-of-contents-active-item {\n  color: var(--select-color-0) !important;\n}\n\n.notion-app {\n  position: relative;\n  background: var(--bg-color);\n  min-height: 100vh;\n}\n\n.notion-viewport {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.medium-zoom-overlay {\n  z-index: 300;\n}\n\n.medium-zoom-image {\n  border-radius: 0;\n}\n\n.medium-zoom-image--opened {\n  z-index: 301;\n}\n\n.notion-frame {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n\n.notion-page-scroller {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  align-items: center;\n  min-height: calc(100vh - var(--notion-header-height));\n}\n\n.notion-red,\n.notion-red_co {\n  color: var(--notion-red);\n}\n.notion-pink,\n.notion-pink_co {\n  color: var(--notion-pink);\n}\n.notion-blue,\n.notion-blue_co {\n  color: var(--notion-blue);\n}\n.notion-purple,\n.notion-purple_co {\n  color: var(--notion-purple);\n}\n.notion-teal,\n.notion-teal_co {\n  color: var(--notion-teal);\n}\n.notion-yellow,\n.notion-yellow_co {\n  color: var(--notion-yellow);\n}\n.notion-orange,\n.notion-orange_co {\n  color: var(--notion-orange);\n}\n.notion-brown,\n.notion-brown_co {\n  color: var(--notion-brown);\n}\n.notion-gray,\n.notion-gray_co {\n  color: var(--notion-gray);\n}\n.notion-red_background {\n  background-color: var(--notion-red_background);\n}\n.notion-pink_background {\n  background-color: var(--notion-pink_background);\n}\n.notion-blue_background {\n  background-color: var(--notion-blue_background);\n}\n.notion-purple_background {\n  background-color: var(--notion-purple_background);\n}\n.notion-teal_background {\n  background-color: var(--notion-teal_background);\n}\n.notion-yellow_background {\n  background-color: var(--notion-yellow_background);\n}\n.notion-orange_background {\n  background-color: var(--notion-orange_background);\n}\n.notion-brown_background {\n  background-color: var(--notion-brown_background);\n}\n.notion-gray_background {\n  background-color: var(--notion-gray_background);\n}\n.notion-red_background_co {\n  background-color: var(--notion-red_background_co);\n}\n.notion-pink_background_co {\n  background-color: var(--notion-pink_background_co);\n}\n.notion-blue_background_co {\n  background-color: var(--notion-blue_background_co);\n}\n.notion-purple_background_co {\n  background-color: var(--notion-purple_background_co);\n}\n.notion-teal_background_co {\n  background-color: var(--notion-teal_background_co);\n}\n.notion-yellow_background_co {\n  background-color: var(--notion-yellow_background_co);\n}\n.notion-orange_background_co {\n  background-color: var(--notion-orange_background_co);\n}\n.notion-brown_background_co {\n  background-color: var(--notion-brown_background_co);\n}\n.notion-gray_background_co {\n  background-color: var(--notion-gray_background_co);\n}\n\n.notion-item-blue {\n  background-color: var(--notion-item-blue);\n}\n.notion-item-orange {\n  background-color: var(--notion-item-orange);\n}\n.notion-item-green {\n  background-color: var(--notion-item-green);\n}\n.notion-item-pink {\n  background-color: var(--notion-item-pink);\n}\n.notion-item-brown {\n  background-color: var(--notion-item-brown);\n}\n.notion-item-red {\n  background-color: var(--notion-item-red);\n}\n.notion-item-yellow {\n  background-color: var(--notion-item-yellow);\n}\n.notion-item-default {\n  background-color: var(--notion-item-default);\n}\n.notion-item-purple {\n  background-color: var(--notion-item-purple);\n}\n.notion-item-gray {\n  background-color: var(--notion-item-gray);\n}\n\n.notion b {\n  font-weight: 600;\n}\n\n.notion-title {\n  width: 100%;\n  font-size: 2.5em;\n  font-weight: 700;\n  margin-bottom: 20px;\n  line-height: 1.2;\n}\n\n.notion-h {\n  position: relative;\n  display: inline-block;\n\n  font-weight: 600;\n  line-height: 1.3;\n  padding: 3px 2px;\n  margin-bottom: 1px;\n\n  max-width: 100%;\n  white-space: pre-wrap;\n  word-break: break-word;\n}\n\n.notion-h1 {\n  font-size: 1.875em;\n  margin-top: 1.08em;\n}\n\n.notion-header-anchor {\n  position: absolute;\n  top: -54px;\n  left: 0;\n}\n\n.notion-title + .notion-h1,\n.notion-title + .notion-h2,\n.notion-title + .notion-h3 {\n  margin-top: 0;\n}\n/* TODO: notion-page-content */\n.notion-h1:first-child {\n  margin-top: 0;\n}\n/* .notion-h1:first-of-type {\n  margin-top: 2px;\n} */\n.notion-h2 {\n  font-size: 1.5em;\n  margin-top: 1.1em;\n}\n.notion-h3 {\n  font-size: 1.25em;\n  margin-top: 1em;\n}\n\n.notion-h:hover .notion-hash-link {\n  opacity: 1;\n}\n\n.notion-hash-link {\n  opacity: 0;\n  text-decoration: none;\n  float: left;\n  margin-left: -20px;\n  padding-right: 4px;\n  fill: var(--fg-color-icon);\n}\n\n.notion-page-cover {\n  display: block;\n  object-fit: cover;\n  width: 100%;\n  height: 30vh;\n  min-height: 30vh;\n  max-height: 30vh;\n  padding: 0;\n}\n\n.notion-page {\n  position: relative;\n  padding: 0;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  flex-shrink: 0;\n  align-items: flex-start;\n  width: 100%;\n  max-width: 100%;\n}\n\n.notion-full-page {\n  padding-bottom: calc(max(10vh, 120px));\n}\n\n.notion-page-no-cover {\n  margin-top: 48px !important;\n  padding-top: 96px;\n}\n\n.notion-page-no-cover.notion-page-no-icon {\n  padding-top: 0;\n}\n\n.notion-page-no-cover.notion-page-has-image-icon {\n  padding-top: 148px;\n}\n\n.notion-page-has-cover.notion-page-no-icon {\n  padding-top: 48px;\n}\n\n.notion-page-has-cover {\n  padding-top: 112px;\n}\n\n.notion-page-has-cover.notion-page-has-text-icon {\n  padding-top: 64px;\n}\n\n.notion-page-icon-wrapper {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}\n\n.notion-page-icon-wrapper .notion-page-icon {\n  position: relative;\n  display: block;\n}\n\n.notion-page-has-cover .notion-page-icon-wrapper img.notion-page-icon {\n  top: -62px;\n}\n\n.notion-page-has-cover .notion-page-icon-wrapper span.notion-page-icon {\n  top: -42px;\n}\n\n.notion-page-icon-wrapper span.notion-page-icon {\n  height: 78px;\n  width: 78px;\n  max-width: 78px;\n  max-height: 78px;\n  font-size: 78px;\n  line-height: 1.1;\n  margin-left: 0;\n  color: var(--fg-color-icon);\n}\n\n.notion-page-icon-wrapper img.notion-page-icon {\n  display: block;\n  border-radius: 3px;\n  width: 124px;\n  height: 124px;\n  max-width: 124px;\n  max-height: 124px;\n}\n\n.notion-page {\n  width: var(--notion-max-width);\n  padding-left: calc(min(12px, 8vw));\n  padding-right: calc(min(12px, 8vw));\n}\n\n.notion-full-width {\n  --notion-max-width: calc(min(1920px, 98vw));\n  padding-left: calc(min(96px, 8vw));\n  padding-right: calc(min(96px, 8vw));\n}\n\n.notion-small-text {\n  font-size: 14px;\n}\n\n.notion-quote {\n  display: block;\n  width: 100%;\n  white-space: pre-wrap;\n  word-break: break-word;\n  border-left: 3px solid currentcolor;\n  padding: 0.2em 0.9em;\n  margin: 6px 0;\n  font-size: 1.2em;\n}\n\n.notion-hr {\n  width: 100%;\n  margin: 6px 0;\n  padding: 0;\n  border-top: none;\n  border-color: var(--fg-color-0);\n}\n\n.notion-link {\n  color: inherit;\n  word-break: break-word;\n  text-decoration: inherit;\n  border-bottom: 0.05em solid;\n  border-color: var(--fg-color-2);\n  opacity: 0.7;\n  transition: border-color 100ms ease-in, opacity 100ms ease-in;\n}\n\n.notion-link:hover {\n  border-color: var(--fg-color-6);\n  opacity: 1;\n}\n\n.notion-collection .notion-link {\n  opacity: 1;\n}\n\n.notion-blank {\n  width: 100%;\n  min-height: 1rem;\n  padding: 3px 2px;\n  margin-top: 1px;\n  margin-bottom: 1px;\n}\n\n.notion-page-link {\n  display: flex;\n  color: var(--fg-color);\n  text-decoration: none;\n  width: 100%;\n  height: 30px;\n  margin: 1px 0;\n  transition: background 120ms ease-in 0s;\n}\n\n.notion-page-link:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-collection-card .notion-page-link {\n  height: unset;\n  margin: 0;\n  transition: unset;\n}\n.notion-collection-card .notion-page-link {\n  background: unset;\n}\n\n.notion-page-icon {\n  font-family: 'Apple Color Emoji', 'Segoe UI Emoji', NotoColorEmoji,\n    'Noto Color Emoji', 'Segoe UI Symbol', 'Android Emoji', EmojiSymbols;\n  font-size: 1.1em;\n  margin: 2px 4px 0 2px;\n  fill: var(--fg-color-6);\n  color: var(--fg-color-icon);\n}\n\nimg.notion-page-icon,\nsvg.notion-page-icon {\n  display: block;\n  object-fit: fill;\n  border-radius: 3px;\n  /* padding: 1px; */\n  max-width: 22px;\n  max-height: 22px;\n}\n\n.notion-icon {\n  display: block;\n  width: 18px;\n  height: 18px;\n  color: var(--fg-color-icon);\n}\n\n.notion-page-text {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  line-height: 1.3;\n  border-bottom: 1px solid var(--fg-color-1);\n  margin: 4px 0;\n}\n\n.notion-inline-code {\n  color: #eb5757;\n  padding: 0.2em 0.4em;\n  background: var(--bg-color-2);\n  border-radius: 3px;\n  font-size: 85%;\n  font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier,\n    monospace;\n}\n\n.notion-inline-underscore {\n  text-decoration: underline;\n}\n\n.notion-list {\n  margin: 0;\n  margin-block-start: 0.6em;\n  margin-block-end: 0.6em;\n}\n\n.notion-list-disc {\n  list-style-type: disc;\n  padding-inline-start: 1.7em;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.notion-list-numbered {\n  list-style-type: decimal;\n  padding-inline-start: 1.6em;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.notion-list-disc li {\n  padding-left: 0.1em;\n}\n\n.notion-list-numbered li {\n  padding-left: 0.2em;\n}\n\n.notion-list li {\n  padding: 6px 0;\n  white-space: pre-wrap;\n}\n\n.notion-asset-wrapper {\n  margin: 0.5rem 0;\n  max-width: 100vw;\n  min-width: 100%;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n}\n\n.notion-asset-wrapper-image {\n  max-width: 100%;\n}\n\n.notion-asset-wrapper-full {\n  max-width: 100vw;\n}\n\n.notion-asset-wrapper img {\n  width: 100%;\n  height: 100%;\n  max-height: 100%;\n}\n\n.notion-asset-wrapper iframe {\n  border: none;\n  background: rgb(247, 246, 245);\n}\n\n.notion-text {\n  width: 100%;\n  white-space: pre-wrap;\n  word-break: break-word;\n  padding: 3px 2px;\n  margin: 1px 0;\n}\n\n.notion-text:first-child {\n  margin-top: 2px;\n}\n\n.notion-text-children {\n  padding-left: 1.5em;\n  display: flex;\n  flex-direction: column;\n}\n\n.notion-block {\n  padding: 3px 2px;\n}\n\n.notion .notion-code {\n  font-size: 85%;\n}\n\n.notion-code {\n  width: 100%;\n  padding: 30px 16px 30px 20px;\n  margin: 4px 0;\n  border-radius: 3px;\n  tab-size: 2;\n  display: block;\n  box-sizing: border-box;\n  overflow: auto;\n  background: var(--bg-color-1);\n  font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier,\n    monospace;\n}\n\n.notion-column {\n  display: flex;\n  flex-direction: column;\n  padding-top: 12px;\n  padding-bottom: 12px;\n}\n\n.notion-column > *:first-child {\n  margin-top: 0;\n  margin-left: 0;\n  margin-right: 0;\n}\n\n.notion-column > *:last-child {\n  margin-left: 0;\n  margin-right: 0;\n  margin-bottom: 0;\n}\n\n.notion-row {\n  display: flex;\n  overflow: hidden;\n  width: 100%;\n  max-width: 100%;\n}\n\n@media (max-width: 640px) {\n  .notion-row {\n    flex-direction: column;\n  }\n\n  .notion-row .notion-column {\n    width: 100% !important;\n  }\n\n  .notion-row .notion-spacer {\n    display: none;\n  }\n}\n\n.notion-bookmark {\n  margin: 4px 0;\n  width: 100%;\n  box-sizing: border-box;\n  text-decoration: none;\n  border: 1px solid var(--fg-color-1);\n  border-radius: 3px;\n  display: flex;\n  overflow: hidden;\n  user-select: none;\n}\n\n.dark-mode .notion-bookmark {\n  border-color: var(--bg-color-0);\n}\n\n.notion-bookmark > div:first-child {\n  flex: 4 1 180px;\n  padding: 12px 14px 14px;\n  overflow: hidden;\n  text-align: left;\n  color: var(--fg-color);\n}\n\n.notion-bookmark-title {\n  font-size: 14px;\n  line-height: 20px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  min-height: 24px;\n  margin-bottom: 2px;\n}\n\n.notion-bookmark-description {\n  font-size: 12px;\n  line-height: 16px;\n  opacity: 0.8;\n  height: 32px;\n  overflow: hidden;\n}\n\n.notion-bookmark-link {\n  display: flex;\n  margin-top: 6px;\n}\n\n.notion-bookmark-link > img {\n  width: 16px;\n  height: 16px;\n  min-width: 16px;\n  margin-right: 6px;\n}\n\n.notion-bookmark-link > div {\n  font-size: 12px;\n  line-height: 16px;\n  color: var(--fg-color);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-bookmark-image {\n  flex: 1 1 180px;\n  position: relative;\n}\n\n.notion-bookmark-image img {\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.notion-column .notion-bookmark-image {\n  display: none;\n}\n\n.notion-spacer {\n  width: calc(min(32px, 4vw));\n}\n\n.notion-spacer:last-child {\n  display: none;\n}\n\n.notion-asset-object-fit {\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  border-radius: 1px;\n}\n\n.notion-image {\n  display: block;\n  width: 100%;\n  border-radius: 1px;\n}\n\n.notion-asset-caption {\n  padding: 6px 0 6px 2px;\n  white-space: pre-wrap;\n  word-break: break-word;\n  caret-color: var(--fg-color);\n  font-size: 14px;\n  line-height: 1.4;\n  color: var(--fg-color-3);\n}\n\n.notion-callout {\n  padding: 16px 16px 16px 12px;\n  display: inline-flex;\n  width: 100%;\n  border-radius: 3px;\n  border-width: 1px;\n  align-items: center;\n  box-sizing: border-box;\n  margin: 4px 0;\n  border: 1px solid var(--fg-color-0);\n}\n\n.dark-mode .notion-callout {\n  border-color: var(--bg-color-2);\n}\n\n.notion-callout .notion-page-icon {\n  align-self: flex-start;\n  width: 24px;\n  height: 24px;\n  font-size: 1.3em;\n  line-height: 1em;\n}\n\n.notion-callout-text {\n  margin-left: 8px;\n  white-space: pre-wrap;\n  word-break: break-word;\n  width: 100%;\n}\n\n.notion-toggle {\n  padding: 3px 2px;\n}\n.notion-toggle > summary {\n  cursor: pointer;\n  outline: none;\n}\n.notion-toggle > div {\n  margin-left: 1.1em;\n}\n\n.notion-collection {\n  align-self: center;\n  min-width: 100%;\n}\n\n.notion-collection-header {\n  display: flex;\n  align-items: center;\n  height: 42px;\n  padding: 4px 2px;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.notion-collection-header-title {\n  display: inline-flex;\n  align-items: center;\n  font-size: 1.25em;\n  line-height: 1.2;\n  font-weight: 600;\n  white-space: pre-wrap;\n  word-break: break-word;\n  margin-right: 0.5em;\n}\n\n.notion-collection-view-dropdown {\n  cursor: pointer;\n  padding: 4px 8px;\n  border-radius: 3px;\n  transition: background 120ms ease-in 0s;\n}\n\n.notion-collection-view-dropdown:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-collection-view-dropdown-icon {\n  position: relative;\n  top: 2px;\n  margin-left: 4px;\n}\n\n.notion-collection-view-type-menu-item {\n  cursor: pointer;\n}\n\n.notion-collection-view-type-menu-item .notion-collection-view-type {\n  width: 340px;\n  max-width: 100%;\n  min-width: 100px;\n}\n\n.notion-collection-view-type {\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n}\n\n.notion-collection-view-type-icon {\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  /* fill: var(--fg-color); */\n  fill: rgba(55, 53, 47);\n  margin-right: 6px;\n}\n\n.notion-collection-view-type-title {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: var(--fg-color);\n}\n\n.notion-table {\n  width: 100vw;\n  max-width: 100vw;\n  align-self: center;\n  overflow: auto hidden;\n}\n\n.notion-table-view {\n  position: relative;\n  float: left;\n  min-width: var(--notion-max-width);\n  padding-left: 0;\n  transition: padding 200ms ease-out;\n}\n\n.notion-table-header {\n  display: flex;\n  position: absolute;\n  z-index: 82;\n  height: 33px;\n  color: var(--fg-color-3);\n  min-width: var(--notion-max-width);\n}\n\n.notion-table-header-inner {\n  width: 100%;\n  display: inline-flex;\n  border-top: 1px solid var(--fg-color-1);\n  border-bottom: 1px solid var(--fg-color-1);\n  /* box-shadow: white -3px 0 0, rgba(55, 53, 47, 0.16) 0 1px 0; */\n}\n\n.notion-table-header-placeholder {\n  height: 34px;\n}\n\n.notion-table-th {\n  display: flex;\n  position: relative;\n}\n\n.notion-table-view-header-cell {\n  display: flex;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: 32px;\n  font-size: 14px;\n  padding: 0;\n}\n\n.notion-table-view-header-cell-inner {\n  user-select: none;\n  display: flex;\n  width: 100%;\n  height: 100%;\n  padding-left: 8px;\n  padding-right: 8px;\n  border-right: 1px solid var(--fg-color-0);\n}\n\n.notion-table-th:last-child .notion-table-view-header-cell-inner {\n  border-right: 0 none;\n}\n\n.notion-collection-column-title {\n  display: flex;\n  align-items: center;\n  line-height: 120%;\n  min-width: 0;\n  font-size: 14px;\n}\n\n.notion-collection-column-title-icon {\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  min-width: 14px;\n  min-height: 14px;\n  fill: var(--fg-color-2);\n  margin-right: 6px;\n}\n\n.notion-collection-column-title-body {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-table-body {\n  position: relative;\n  min-width: var(--notion-max-width);\n}\n\n.notion-table-row {\n  display: flex;\n  border-bottom: 1px solid var(--fg-color-1);\n}\n\n.notion-table-cell {\n  min-height: 32px;\n  padding: 5px 8px 6px;\n  font-size: 14px;\n  line-height: 1;\n  white-space: normal;\n  overflow: hidden;\n  word-break: break-word;\n  border-right: 1px solid var(--fg-color-1);\n}\n\n.notion-table-cell:last-child {\n  border-right: 0 none;\n}\n\n.notion-table-cell-title {\n  font-weight: 500;\n}\n\n.notion-table-cell-text {\n  white-space: pre-wrap;\n}\n\n.notion-table-cell-text,\n.notion-table-cell-number,\n.notion-table-cell-url,\n.notion-table-cell-email,\n.notion-table-cell-phone_number {\n  line-height: 1.5;\n}\n\n.notion-table-cell-number {\n  white-space: pre-wrap;\n}\n\n.notion-table-cell-select,\n.notion-table-cell-multi_select {\n  padding: 7px 8px 0;\n}\n\n.notion-property-select,\n.notion-property-multi_select {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.notion-property-select-item,\n.notion-property-multi_select-item {\n  display: flex;\n  align-items: center;\n  padding: 0 6px;\n  border-radius: 3px;\n  height: 18px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  line-height: 120%;\n}\n\n.notion-property-multi_select-item {\n  margin: 0 6px 6px 0;\n}\n\n.notion-collection-card .notion-property-multi_select-item {\n  margin: 0 6px 0 0;\n}\n\n.notion-property-file {\n  display: flex;\n  flex-wrap: wrap;\n  align-content: flex-start;\n}\n\n.notion-property-file img {\n  max-height: 24px;\n  max-width: 100%;\n  margin-right: 6px;\n}\n\n.notion-collection-card-cover .notion-property-file {\n  height: 100%;\n}\n\n.notion-collection-card-cover .notion-property-file img {\n  width: 100%;\n  margin: 0;\n  max-height: 100%;\n}\n\n.notion-property-checkbox {\n  width: 16px;\n  height: 16px;\n}\n\n.notion-property-checkbox-checked {\n  width: 16px;\n  height: 16px;\n  background: var(--select-color-0);\n}\n\n.notion-property-checkbox-checked svg {\n  position: relative;\n  display: block;\n  /* top: -3px; */\n  top: 1px;\n  left: 1px;\n  width: 14px;\n  height: 14px;\n  fill: #fff;\n}\n\n.notion-property-checkbox-unchecked {\n  width: 16px;\n  height: 16px;\n  border: 1.3px solid var(--fg-color);\n}\n\n.notion-gallery {\n  align-self: center;\n}\n\n.notion-gallery-view {\n  position: relative;\n  padding-left: 0;\n  transition: padding 200ms ease-out;\n}\n\n.notion-gallery-grid {\n  display: grid;\n  position: relative;\n  grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));\n  grid-auto-rows: 1fr;\n  gap: 16px;\n  border-top: 1px solid var(--fg-color-1);\n  padding-top: 16px;\n  padding-bottom: 4px;\n}\n\n.notion-gallery-grid-size-small {\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n}\n\n.notion-gallery-grid-size-large {\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n}\n\n.notion-collection-card {\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n\n  text-decoration: none;\n  box-shadow: rgba(15, 15, 15, 0.1) 0 0 0 1px, rgba(15, 15, 15, 0.1) 0 2px 4px;\n  border-radius: 3px;\n  background: var(--bg-color);\n  color: var(--fg-color);\n  transition: background 100ms ease-out 0s;\n\n  user-select: none;\n  cursor: pointer;\n}\n\n.notion-collection-card:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-collection-card-cover {\n  position: relative;\n  width: 100%;\n  height: 190px;\n  border-bottom: 1px solid var(--fg-color-0);\n  overflow: hidden;\n}\n\n.notion-collection-card-cover img {\n  width: 100%;\n  height: 100%;\n  border-radius: 1px 1px 0 0;\n  /* object-fit: cover; */\n}\n\n.notion-collection-card-cover .notion-collection-card-cover-empty {\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  overflow: hidden;\n  background: var(--fg-color-5);\n  box-shadow: var(--fg-color-0) 0 -1px 0 0 inset;\n  padding: 8px 8px 0;\n}\n\n.notion-collection-card-size-small .notion-collection-card-cover {\n  height: 124px;\n}\n\n.notion-collection-card-body {\n  display: flex;\n  flex-direction: column;\n  padding: 4px 10px;\n}\n\n.notion-collection-card-property {\n  padding: 4px 0;\n  white-space: nowrap;\n  word-break: break-word;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 12px;\n}\n\n.notion-collection-card-property:first-child {\n  font-size: 14px;\n  font-weight: 500;\n}\n\n.notion-collection-card-property:not(:first-child) {\n  white-space: nowrap;\n  text-overflow: clip;\n}\n\n.notion-collection-card-property img {\n  max-height: 18px;\n}\n\n.notion-list-collection {\n  align-self: center;\n}\n\n.notion-list-collection {\n  width: 100%;\n  max-width: 100%;\n}\n\n.notion-list-view {\n  position: relative;\n  padding-left: 0;\n  transition: padding 200ms ease-out;\n  max-width: 100%;\n}\n\n.notion-list-body {\n  display: flex;\n  flex-direction: column;\n  border-top: 1px solid var(--fg-color-1);\n  padding-top: 8px;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.notion-list-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 4px;\n  margin: 1px 0;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.notion-list-item-title {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  line-height: 1.3;\n}\n\n.notion-list-item-body {\n  display: flex;\n  align-items: center;\n  flex-wrap: nowrap;\n  overflow: hidden;\n}\n\n.notion-list-item-property {\n  /* display: flex;\n  align-items: center; */\n  margin-left: 14px;\n  font-size: 14px;\n}\n\n.notion-list-item-property .notion-property-date,\n.notion-list-item-property .notion-property-created_time,\n.notion-list-item-property .notion-property-last_edited_time,\n.notion-list-item-property .notion-property-url {\n  display: inline-block;\n  color: var(--fg-color-3);\n  font-size: 12px;\n  /* white-space: nowrap; */\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-board {\n  width: 100vw;\n  max-width: 100vw;\n  align-self: center;\n  overflow: auto hidden;\n}\n\n.notion-board-view {\n  position: relative;\n  float: left;\n  min-width: 100%;\n  padding-left: 0;\n  transition: padding 200ms ease-out;\n}\n\n.notion-board-header {\n  display: flex;\n  position: absolute;\n  z-index: 82;\n  height: 44px;\n  min-width: 100%;\n}\n\n.notion-board-header-inner {\n  display: inline-flex;\n  border-top: 1px solid var(--fg-color-1);\n  border-bottom: 1px solid var(--fg-color-1);\n}\n\n.notion-board-header-placeholder {\n  height: var(--notion-header-height);\n}\n\n.notion-board-th {\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  padding-right: 16px;\n  box-sizing: content-box;\n  flex-shrink: 0;\n}\n\n.notion-board-th-body {\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  line-height: 1.2;\n  padding-left: 2px;\n  padding-right: 4px;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.notion-board-th-count {\n  color: var(--fg-color-3);\n  font-weight: 500;\n  padding: 0 8px;\n}\n\n.notion-board-th-empty {\n  margin-right: 4px;\n  position: relative;\n  top: 2px;\n}\n\n.notion-board-body {\n  display: inline-flex;\n}\n\n.notion-board-group {\n  flex: 0 0 auto;\n  padding-right: 16px;\n  box-sizing: content-box;\n}\n\n.notion-board-group-card {\n  margin-bottom: 8px;\n}\n\n.notion-board-view .notion-board-th,\n.notion-board-view .notion-board-group {\n  width: 260px;\n}\n\n.notion-board-view-size-small .notion-board-th,\n.notion-board-view-size-small .notion-board-group {\n  width: 180px;\n}\n\n.notion-board-view-size-large .notion-board-th,\n.notion-board-view-size-large .notion-board-group {\n  width: 320px;\n}\n\n.notion-board-view .notion-collection-card .notion-collection-card-cover {\n  height: 148px;\n}\n\n.notion-board-view-size-small\n  .notion-collection-card\n  .notion-collection-card-cover {\n  height: 100px;\n}\n\n.notion-board-view-size-large\n  .notion-collection-card\n  .notion-collection-card-cover {\n  height: 180px;\n}\n\n.notion-table-of-contents {\n  width: 100%;\n  margin: 4px 0;\n}\n\n.notion-table-of-contents-item {\n  color: inherit;\n  text-decoration: none;\n  user-select: none;\n  transition: background 20ms ease-in 0s;\n  cursor: pointer;\n  width: 100%;\n\n  padding: 6px 2px;\n  font-size: 14px;\n  line-height: 1.3;\n  display: flex;\n  align-items: center;\n\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-table-of-contents-item:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-table-of-contents-item-body {\n  border-bottom: 1px solid var(--fg-color-1);\n}\n\n.notion-to-do {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.notion-to-do-item {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding-left: 2px;\n  min-height: calc(1.5em + 3px + 3px);\n}\n\n.notion-to-do-children {\n  padding-left: 1.5em;\n}\n\n.notion-to-do-checked .notion-to-do-item {\n  text-decoration: line-through;\n  opacity: 0.375;\n}\n\n.notion-to-do-body {\n  white-space: pre-wrap;\n  word-break: break-word;\n}\n\n.notion-to-do-item .notion-property-checkbox {\n  margin-right: 8px;\n}\n\n.notion-google-drive {\n  width: 100%;\n  align-self: center;\n  margin: 4px 0;\n}\n\n.notion-google-drive-link {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  color: inherit;\n  text-decoration: none;\n  width: 100%;\n  border: 1px solid var(--fg-color-1);\n  border-radius: 3px;\n\n  user-select: none;\n  transition: background 20ms ease-in 0s;\n  cursor: pointer;\n}\n\n.notion-google-drive-link:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-google-drive-preview {\n  display: block;\n  position: relative;\n  width: 100%;\n  padding-bottom: 55%;\n  overflow: hidden;\n}\n\n.notion-google-drive-preview img {\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  object-fit: cover;\n  object-position: center top;\n}\n\n.notion-google-drive-body {\n  width: 100%;\n  min-height: 60px;\n  padding: 12px 14px 14px;\n  overflow: hidden;\n  border-top: 1px solid var(--fg-color-1);\n}\n\n.notion-google-drive-body-title {\n  font-size: 14px;\n  line-height: 20px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin-bottom: 2px;\n}\n\n.notion-google-drive-body-modified-time {\n  font-size: 12px;\n  line-height: 1.3;\n  color: var(--fg-color-3);\n  max-height: 32px;\n  overflow: hidden;\n}\n\n.notion-google-drive-body-source {\n  display: flex;\n  align-items: center;\n  margin-top: 6px;\n}\n\n.notion-google-drive-body-source-icon {\n  flex-shrink: 0;\n  background-size: cover;\n  width: 16px;\n  height: 16px;\n  margin-right: 6px;\n}\n\n.notion-google-drive-body-source-domain {\n  font-size: 12px;\n  line-height: 16px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-file {\n  width: 100%;\n  margin: 1px 0;\n}\n\n.notion-file-link {\n  display: flex;\n  align-items: center;\n  padding: 3px 2px;\n  border-radius: 3px;\n  transition: background 20ms ease-in 0s;\n  color: inherit;\n  text-decoration: none;\n}\n\n.notion-file-link:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-file-icon {\n  margin-right: 2px;\n  width: 1.35em;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-grow: 0;\n  flex-shrink: 0;\n  min-height: calc(1.5em + 3px + 3px);\n  height: 1.35em;\n}\n\n.notion-file-info {\n  display: flex;\n  align-items: baseline;\n}\n\n.notion-file-title {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.notion-file-size {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: var(--fg-color-3);\n  font-size: 12px;\n  line-height: 16px;\n  margin-left: 6px;\n}\n\n.notion-audio {\n  width: 100%;\n}\n\n.notion-audio audio {\n  width: 100%;\n}\n\n.notion-equation {\n  position: relative;\n  display: inline-flex;\n  color: inherit;\n  fill: inherit;\n  user-select: none;\n  border-radius: 3px;\n  transition: background 20ms ease-in 0s;\n}\n\n.notion-equation-inline {\n  -webkit-user-select: all;\n  -moz-user-select: all;\n  user-select: all;\n}\n\n.notion-equation-block {\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  width: 100%;\n  max-width: 100%;\n  padding: 4px 8px;\n  margin: 4px 0;\n  cursor: pointer;\n}\n\n.notion-equation:hover {\n  background: var(--bg-color-0);\n}\n\n.notion-equation:active,\n.notion-equation:focus {\n  background: var(--select-color-2);\n}\n\n.notion-frame .katex-display .katex {\n  padding-right: 32px;\n}\n\n.notion-frame .katex > .katex-html {\n  white-space: normal;\n}\n\n.notion-page-title {\n  display: inline-flex;\n  max-width: 100%;\n  align-items: center;\n  line-height: 1.3;\n  transition: background 120ms ease-in 0s;\n}\n\n.notion-page-title-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 22px;\n  width: 22px;\n  border-radius: 3px;\n  flex-shrink: 0;\n  margin-left: 2px;\n  margin-right: 6px;\n}\n\n.notion-collection-card-property .notion-link {\n  border-bottom: 0 none;\n}\n\n.notion-collection-card-property .notion-page-title {\n  transition: none;\n}\n\n.notion-collection-card-property .notion-page-title:hover {\n  background: unset;\n}\n\n.notion-collection-card-property .notion-page-title-icon {\n  margin-left: 0;\n  height: 18px;\n  width: 18px;\n}\n\n.notion-collection-card-property .notion-page-title-text {\n  border-bottom: 0 none;\n}\n\n.notion-collection-card-property\n  .notion-property-relation\n  .notion-page-title-text {\n  border-bottom: 1px solid;\n}\n\n.notion-page-title-text {\n  position: relative;\n  top: 1px;\n  border-bottom: 1px solid var(--fg-color-1);\n  line-height: 1.3;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n}\n\n/* removes double underline with links */\n.notion-link .notion-page-title-text {\n  border-bottom: 0px;\n}\n\n.notion-collection-row {\n  width: 100%;\n  padding: 4px 0 8px;\n  border-bottom: 1px solid var(--fg-color-0);\n  margin-bottom: 1em;\n}\n\n.notion-collection-row-body {\n  display: flex;\n  flex-direction: column;\n}\n\n.notion-collection-row-property {\n  display: flex;\n  align-items: center;\n  margin-bottom: 4px;\n}\n\n.notion-collection-row-value {\n  flex: 1;\n  padding: 6px 8px 7px;\n  font-size: 14px;\n}\n\n.notion-collection-row-property .notion-collection-column-title {\n  display: flex;\n  align-items: center;\n  width: 160px;\n  height: 34px;\n  color: var(--fg-color-3);\n  padding: 0 6px;\n}\n\n.notion-collection-row-property .notion-property {\n  width: 100%;\n}\n\n.notion-collection-row-property .notion-collection-column-title-icon {\n  width: 16px;\n  height: 16px;\n  min-width: 16px;\n  min-height: 16px;\n}\n\n.notion-collection-row-property .notion-link {\n  border-bottom: 0 none;\n}\n\n.notion-collection-row-property\n  .notion-property-relation\n  .notion-page-title-text {\n  border-bottom: 1px solid;\n}\n\n.notion-user {\n  display: block;\n  object-fit: cover;\n  border-radius: 100%;\n  width: 20px;\n  height: 20px;\n}\n\n.notion-list-item-property .notion-property-multi_select-item {\n  margin-bottom: 0;\n  flex-wrap: none;\n}\n\n.notion-list-item-property .notion-property-multi_select-item:last-of-type {\n  margin-right: 0;\n}\n\n.notion-toggle .notion-collection-header,\n.notion-toggle .notion-table-view,\n.notion-toggle .notion-board-view,\n.notion-column .notion-collection-header,\n.notion-column .notion-table-view,\n.notion-column .notion-board-view {\n  padding-left: 0 !important;\n  padding-right: 0 !important;\n}\n\n.notion-toggle .notion-table,\n.notion-toggle .notion-board,\n.notion-column .notion-table,\n.notion-column .notion-board {\n  width: 100% !important;\n  max-width: 100% !important;\n}\n\n@media only screen and (max-width: 730px) {\n  .notion-page {\n    padding-left: 2vw;\n    padding-right: 2vw;\n  }\n\n  .notion-asset-wrapper {\n    max-width: 100%;\n  }\n\n  .notion-asset-wrapper-full {\n    max-width: 100vw;\n  }\n}\n\n@media (max-width: 640px) {\n  .notion-bookmark-image {\n    display: none;\n  }\n}\n\n.lazy-image-wrapper {\n  position: relative;\n  overflow: hidden;\n}\n\n.lazy-image-wrapper img {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  max-width: 100%;\n  max-height: 100%;\n  min-width: 100%;\n  min-height: 100%;\n}\n\n.lazy-image-preview {\n  filter: blur(20px);\n  transform: scale(1.1);\n\n  opacity: 1;\n  transition: opacity 400ms ease-in !important;\n  transition-delay: 100ms;\n  will-change: opacity;\n}\n\n.lazy-image-wrapper img.lazy-image-real {\n  position: relative;\n}\n\n.lazy-image-real {\n  opacity: 0;\n  transition: opacity 400ms ease-out !important;\n  will-change: opacity;\n}\n\n.lazy-image-real.medium-zoom-image {\n  transition: transform 0.3s cubic-bezier(0.2, 0, 0.2, 1),\n    opacity 400ms ease-out !important;\n  will-change: opacity, transform;\n}\n\n.medium-zoom-image--opened {\n  object-fit: cover;\n  opacity: 1;\n}\n\n/* NOTE: if we hide the preview image, there's a weird bug with react hydration where\n   the image will sometimes flicker to show the background during initial page load.\n   So I'm removing this `opacity: 0` for now, but it will cause issues if the real\n   image is transparent. */\n.lazy-image-loaded .lazy-image-preview {\n  opacity: 0;\n}\n\n.lazy-image-loaded .lazy-image-real {\n  opacity: 1;\n}\n\n.notion-page-cover.lazy-image-wrapper {\n  padding: 0 !important;\n}\n\n.notion-collection-card-cover .lazy-image-wrapper {\n  padding: 0 !important;\n  height: 100%;\n}\n\n.notion-page-cover .lazy-image-preview,\n.notion-page-cover .lazy-image-real {\n  will-change: unset !important;\n}\n\n.notion-page-cover .lazy-image-loaded .lazy-image-preview {\n  opacity: 1;\n}\n\n.notion-lite {\n  overflow-y: auto;\n}\n\n.notion-lite .notion-page {\n  width: 100%;\n  padding: 0;\n  /* padding: calc(max(2vmin, 8px)); */\n}\n\n.notion-lite .notion-collection-header,\n.notion-lite .notion-table-view,\n.notion-lite .notion-board-view {\n  padding-left: 0 !important;\n  padding-right: 0 !important;\n}\n\n.notion-lite .notion-board,\n.notion-lite .notion-table {\n  width: 100% !important;\n}\n\n.notion-header {\n  position: sticky;\n  top: 0;\n  left: 0;\n  z-index: 200;\n\n  width: 100%;\n  max-width: 100vw;\n  overflow: hidden;\n  height: var(--notion-header-height);\n  min-height: var(--notion-header-height);\n\n  background: var(--bg-color);\n}\n\n.notion-header .nav-header {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 12px;\n  text-size-adjust: 100%;\n  line-height: 1.5;\n  line-height: 1.2;\n  font-size: 14px;\n}\n\n.notion-header .breadcrumbs {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  height: 100%;\n  flex-grow: 0;\n  min-width: 0;\n  margin-right: 8px;\n}\n\n.notion-header .breadcrumb {\n  display: inline-flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  color: var(--fg-color);\n  text-decoration: none;\n  margin: 1px 0px;\n  padding: 4px 6px;\n  border-radius: 3px;\n  transition: background 120ms ease-in 0s;\n  user-select: none;\n  background: transparent;\n  cursor: pointer;\n}\n\n.notion-header .breadcrumb .icon {\n  position: relative;\n  top: -1px;\n}\n\n.notion-header img.icon {\n  width: 18px !important;\n  height: 18px !important;\n}\n\n.notion-header .icon {\n  font-size: 18px;\n  margin-right: 6px;\n  line-height: 1.1;\n}\n\n.notion-header .searchIcon {\n  width: 14px;\n  height: 14px;\n  margin-right: 6px;\n  color: var(--fg-color);\n  fill: var(--fg-color);\n}\n\n.notion-header .breadcrumb:not(.active):hover {\n  background: var(--bg-color-0);\n}\n\n.notion-header .breadcrumb:not(.active):active {\n  background: var(--bg-color-1);\n}\n\n.notion-header .breadcrumb.active {\n  cursor: default;\n}\n\n.notion-header .spacer {\n  margin: 0 2px;\n  color: var(--fg-color-2);\n}\n\n.notion-header .button {\n  height: 28px;\n  padding: 0 8px;\n}\n\n.notion-search-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(15, 15, 15, 0.6);\n\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  z-index: 1001;\n}\n\n.notion-search {\n  box-shadow: rgba(15, 15, 15, 0.05) 0px 0px 0px 1px,\n    rgba(15, 15, 15, 0.1) 0px 5px 10px, rgba(15, 15, 15, 0.2) 0px 15px 40px;\n  border-radius: 3px;\n  background: #fff;\n\n  position: relative;\n  top: 90px;\n  max-width: 600px;\n  min-height: 50px;\n  max-height: 80vh;\n  width: 75%;\n  overflow: hidden;\n  outline: none;\n\n  font-size: 16px;\n  line-height: 1.5;\n  color: rgb(55, 53, 47);\n  caret-color: rgb(55, 53, 47);\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica,\n    'Apple Color Emoji', Arial, sans-serif, 'Segoe UI Emoji', 'Segoe UI Symbol';\n}\n\n.notion-search .quickFindMenu {\n  display: flex;\n  flex-direction: column;\n  min-width: 100%;\n  max-width: calc(100vw - 24px);\n  height: 100%;\n  max-height: 80vh;\n  min-height: 50px;\n}\n\n.notion-search .searchBar {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  height: 52px;\n  box-shadow: rgba(55, 53, 47, 0.09) 0px 1px 0px;\n  font-size: 18px;\n  line-height: 27px;\n  padding: 0 16px;\n}\n\n.notion-search .searchInput {\n  resize: none;\n  white-space: nowrap;\n  border: none;\n  outline: none;\n  flex: 1;\n\n  line-height: inherit;\n  font-size: inherit;\n}\n\n.notion-search .inlineIcon {\n  margin-right: 10px;\n  fill: rgba(55, 53, 47, 0.4);\n}\n\n.notion-search .clearButton {\n  user-select: none;\n  border-radius: 20px;\n  cursor: pointer;\n  margin-left: 8px;\n}\n\n.notion-search .clearIcon {\n  width: 14px;\n  height: 14px;\n  fill: rgba(55, 53, 47, 0.3);\n}\n\n.notion-search .clearButton:hover .clearIcon {\n  fill: rgba(55, 53, 47, 0.4);\n}\n\n.notion-search .clearButton:active .clearIcon {\n  fill: rgba(55, 53, 47, 0.8);\n}\n\n@keyframes spinner {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.notion-search .loadingIcon {\n  animation: spinner 0.6s linear infinite;\n}\n\n.notion-search .noResultsPane {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 32px 16px;\n}\n\n.notion-search .noResults {\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 20px;\n  color: rgba(55, 53, 47, 0.6);\n}\n\n.notion-search .noResultsDetail {\n  font-size: 14px;\n  margin-top: 2px;\n  color: rgba(55, 53, 47, 0.4);\n}\n\n.notion-search .resultsFooter {\n  box-shadow: rgba(55, 53, 47, 0.09) 0px -1px 0px;\n  margin-top: 1px;\n  font-size: 12px;\n  min-height: 28px;\n  color: rgba(55, 53, 47, 0.4);\n  user-select: none;\n  padding: 0 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.notion-search .resultsCount {\n  font-weight: 500;\n  color: rgba(55, 53, 47, 0.6);\n}\n\n.notion-search .resultsPane {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  flex: 1;\n  overflow: auto;\n}\n\n.notion-search .result {\n  padding: 8px 14px;\n  border-bottom: 1px solid rgba(55, 53, 47, 0.06);\n  min-height: 36px;\n  font-size: 14px;\n  user-select: none;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  color: rgb(55, 53, 47);\n  text-decoration: none;\n}\n\n.notion-search .resultsPane .result:hover {\n  background: rgba(55, 53, 47, 0.08) !important;\n}\n\n.notion-search .resultsPane .result:active {\n  background: rgba(55, 53, 47, 0.16) !important;\n}\n\n.notion-sync-block {\n  width: 100%;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/react-static-tweets/styles.css":
/*!*******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[5].use[2]!./node_modules/react-static-tweets/styles.css ***!
  \*******************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".static-tweet {\n  --colors-blue: #0c00ff;\n  --colors-purple: #be00ff;\n\n  --accents-1: #fafafa;\n  --accents-2: #eaeaea;\n  --accents-3: #999999;\n  --accents-4: #888888;\n  --accents-5: #666666;\n\n  --bg-color: #fff;\n  --link-color: var(--colors-blue);\n  --poll-bar-color: var(--colors-blue);\n  --inline-code-color: var(--colors-purple);\n  --code-color: #9efeff;\n  --code-bg-color: #1e1e3f;\n\n  --text-margin: 1.25rem 0;\n  --container-margin: 0.5rem 0;\n  --poll-margin: 1.5rem 1rem;\n  --heading-margin-top: 3.5rem;\n  --heading-margin-bottom: 2rem;\n  --li-margin: 0 0 0.5rem 0;\n\n  /* Embedded tweet */\n  --tweet-font: normal normal 16px/1.4 Helvetica, Roboto, 'Segoe UI', Calibri,\n    sans-serif;\n  --tweet-font-color: #1c2022;\n  --tweet-bg-color: #fff;\n  --tweet-border: 1px solid #e1e8ed;\n  --tweet-border-hover: 1px solid #ccd6dd;\n  --tweet-link-color: #2b7bb9;\n  --tweet-link-color-hover: #3b94d9;\n  --tweet-color-gray: #697882;\n  --tweet-color-red: #e02460;\n}\n\n.static-tweet {\n  width: 100%;\n  max-width: 550px;\n  min-width: 220px;\n}\n\n.static-tweet-caption {\n  font-size: 14px;\n  color: #999;\n  text-align: center;\n  margin: 0;\n  margin-top: 10px;\n  padding: 0;\n}\n\n.static-tweet-anchor {\n  color: var(--tweet-link-color);\n  text-decoration: none;\n}\n\n@media (any-hover: hover) {\n  .static-tweet-anchor:hover {\n    text-decoration: underline;\n  }\n}\n\n.static-tweet code {\n  font-size: 14px;\n  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,\n    Bitstream Vera Sans Mono, Courier New, monospace, serif;\n}\n\n.static-tweet code.inline {\n  color: var(--inline-code-color);\n  font-size: 1rem;\n  white-space: pre-wrap;\n}\n\n.static-tweet pre {\n  color: var(--code-color);\n  background: var(--code-bg-color);\n  padding: 1.25rem;\n  margin: var(--container-margin);\n  white-space: pre;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.static-tweet .image-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(50%, 1fr));\n  margin: var(--container-margin);\n}\n.static-tweet .image-count-3 > :global(:first-child) {\n  grid-row-end: span 2;\n}\n.static-tweet .gif-container,\n.static-tweet .video-container {\n  margin: var(--container-margin);\n}\n.static-tweet .gif-container > :global(video),\n.static-tweet .video-container > :global(video) {\n  width: 100%;\n  max-height: 500px;\n}\n\n.static-tweet-permalink span[id] {\n  display: block;\n  position: absolute;\n  visibility: hidden;\n  margin-top: -webkit-calc(-1 * var(--heading-margin-top));\n  margin-top: calc(-1 * var(--heading-margin-top));\n  padding-top: var(--heading-margin-top);\n}\n\n.static-tweet-permalink a {\n  color: inherit;\n  text-decoration: none;\n}\n@media (any-hover: hover) {\n  .static-tweet-permalink a:hover {\n    color: inherit;\n    border-bottom: 1px solid;\n  }\n  .static-tweet-permalink a:hover ~ .permalink {\n    visibility: visible;\n  }\n}\n.static-tweet-permalink .permalink {\n  visibility: hidden;\n  display: none;\n  font-weight: 500;\n}\n@media screen and (min-width: 992px) {\n  .static-tweet-permalink a {\n    margin-right: 0.5rem;\n  }\n  .static-tweet-permalink .permalink {\n    display: inline-block;\n  }\n}\n\n.static-tweet-h1,\n.static-tweet-h2,\n.static-tweet-h3,\n.static-tweet-h4,\n.static-tweet-h5,\n.static-tweet-h6 {\n  font-weight: 600;\n  margin: var(--heading-margin-top) 0 var(--heading-margin-bottom) 0;\n}\n\n.static-tweet-h1 {\n  font-size: 2rem;\n}\n\n.static-tweet-h2 {\n  font-size: 1.75rem;\n}\n\n.static-tweet-h3 {\n  font-size: 1.5rem;\n}\n\n.static-tweet-h4 {\n  font-size: 1.25rem;\n}\n\n.static-tweet-h5 {\n  font-size: 1rem;\n}\n\n.static-tweet-h6 {\n  font-size: 0.875rem;\n}\n\n.static-tweet ul {\n  margin: var(--text-margin);\n  list-style-type: none;\n  padding-left: 1rem;\n}\n\n.static-tweet ul li:before {\n  content: '-';\n  color: var(--accents-3);\n  position: absolute;\n  margin-left: -1rem;\n}\n\n.static-tweet ol {\n  margin: var(--text-margin);\n  padding-left: 1rem;\n}\n\n.static-tweet li {\n  padding-left: 0;\n  margin: var(--li-margin);\n}\n\n.static-tweet-summary {\n  position: relative;\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n\n.static-tweet-details {\n  height: 100%;\n  overflow: hidden;\n}\n\n.static-tweet-summary {\n  position: relative;\n  height: 100%;\n  list-style: none;\n}\n\n.static-tweet-summary::marker {\n  display: none;\n}\n\n.static-tweet-table-container {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-justify-content: center;\n     -moz-box-pack: center;\n          justify-content: center;\n  width: 100%;\n  margin: var(--container-margin);\n}\n\n.static-tweet-table-container table {\n  display: block;\n  overflow: auto;\n  border-collapse: collapse;\n}\n\n.static-tweet-table-container th {\n  font-weight: 600;\n  padding: 0.5rem 0.875rem;\n  border: 1px solid var(--accents-2);\n}\n\n.static-tweet-table-container td {\n  padding: 0.5rem 0.875rem;\n  border: 1px solid var(--accents-2);\n}\n\n.static-tweet-p {\n  margin: var(--text-margin);\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\n.static-tweet blockquote {\n  margin: 0;\n  -webkit-margin-before: 0;\n          margin-block-start: 0;\n  -webkit-margin-after: 0;\n          margin-block-end: 0;\n  -webkit-margin-start: 0;\n     -moz-margin-start: 0;\n          margin-inline-start: 0;\n  -webkit-margin-end: 0;\n     -moz-margin-end: 0;\n          margin-inline-end: 0;\n}\n\n.static-tweet-blockquote {\n  background: var(--accents-1);\n  color: var(--accents-5);\n  border: 1px solid var(--accents-2);\n  margin: var(--container-margin);\n  padding: 0 1.25rem;\n}\n\n.static-tweet-hr {\n  border: 0;\n  border-top: 1px solid var(--accents-2);\n  margin: var(--text-margin);\n}\n\n.static-tweet-twitter-link,\n.static-tweet-twitter-link s {\n  text-decoration: none;\n}\n\n@media (any-hover: hover) {\n  .static-tweet-twitter-link:hover {\n    text-decoration: underline;\n  }\n}\n\n.static-tweet-emoji {\n  height: 1.2em !important;\n  width: 1.2em !important;\n  margin: 0 2px;\n  vertical-align: -3px;\n}\n\n.static-tweet-poll {\n  margin: var(--poll-margin);\n}\n.static-tweet-options {\n  display: grid;\n  grid-template-columns: -webkit-max-content 14rem -webkit-max-content;\n  grid-template-columns: max-content 14rem max-content;\n  -webkit-align-items: center;\n     -moz-box-align: center;\n          align-items: center;\n  grid-gap: 1rem;\n  overflow: auto;\n}\n.static-tweet-label {\n  overflow: auto;\n  text-align: right;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n.static-tweet-chart {\n  height: 100%;\n  background: var(--poll-bar-color);\n}\n.static-tweet-poll hr {\n  border: 0;\n  border-top: 1px solid var(--accents-2);\n  margin: 1rem 0 0.5rem 0;\n}\n.static-tweet-footer {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  font-size: 0.875rem;\n  color: var(--accents-4);\n}\n.static-tweet-votes-count {\n  -webkit-flex-grow: 1;\n     -moz-box-flex: 1;\n          flex-grow: 1;\n}\n@media screen and (max-width: 450px) {\n  .static-tweet-options {\n    grid-template-columns: -webkit-max-content 7rem -webkit-max-content;\n    grid-template-columns: max-content 7rem max-content;\n  }\n}\n\n.static-tweet-info a {\n  text-decoration: none;\n}\n.static-tweet-info {\n  font-size: 0.875rem;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n}\n.static-tweet-like {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  color: var(--tweet-color-gray);\n  margin-right: 0.75rem;\n}\n.static-tweet-like:visited {\n  color: var(--tweet-link-color);\n}\n@media (any-hover: hover) {\n  .static-tweet-like:hover {\n    color: var(--tweet-color-red);\n  }\n  .static-tweet-like:hover .static-tweet-icon-heart {\n    background-image: url(data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20class%3D%22icon%22%20fill%3D%22%23E0245E%22%20d%3D%22M12%2021.638h-.014C9.403%2021.59%201.95%2014.856%201.95%208.478c0-3.064%202.525-5.754%205.403-5.754%202.29%200%203.83%201.58%204.646%202.73.813-1.148%202.353-2.73%204.644-2.73%202.88%200%205.404%202.69%205.404%205.755%200%206.375-7.454%2013.11-10.037%2013.156H12zM7.354%204.225c-2.08%200-3.903%201.988-3.903%204.255%200%205.74%207.035%2011.596%208.55%2011.658%201.52-.062%208.55-5.917%208.55-11.658%200-2.267-1.822-4.255-3.902-4.255-2.528%200-3.94%202.936-3.952%202.965-.23.562-1.156.562-1.387%200-.015-.03-1.426-2.965-3.955-2.965z%22%2F%3E%3C%2Fsvg%3E);\n  }\n}\n.static-tweet-icon-heart {\n  width: 1.25em;\n  background-image: url(data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20class%3D%22icon%22%20fill%3D%22%23697882%22%20d%3D%22M12%2021.638h-.014C9.403%2021.59%201.95%2014.856%201.95%208.478c0-3.064%202.525-5.754%205.403-5.754%202.29%200%203.83%201.58%204.646%202.73.813-1.148%202.353-2.73%204.644-2.73%202.88%200%205.404%202.69%205.404%205.755%200%206.375-7.454%2013.11-10.037%2013.156H12zM7.354%204.225c-2.08%200-3.903%201.988-3.903%204.255%200%205.74%207.035%2011.596%208.55%2011.658%201.52-.062%208.55-5.917%208.55-11.658%200-2.267-1.822-4.255-3.902-4.255-2.528%200-3.94%202.936-3.952%202.965-.23.562-1.156.562-1.387%200-.015-.03-1.426-2.965-3.955-2.965z%22%2F%3E%3C%2Fsvg%3E);\n}\n.static-tweet-likes {\n  margin-left: 0.25rem;\n}\n.static-tweet-time {\n  display: block;\n  -webkit-flex: 1 1;\n     -moz-box-flex: 1;\n          flex: 1 1;\n  color: var(--tweet-color-gray);\n}\n@media (any-hover: hover) {\n  .static-tweet-time:hover,\n  .static-tweet-time:focus {\n    color: var(--tweet-link-color-hover);\n  }\n  .static-tweet-time:focus {\n    text-decoration: underline;\n  }\n}\n\n.static-tweet-body {\n  color: var(--tweet-font-color);\n  font: var(--tweet-font);\n  overflow: hidden;\n  background: var(--tweet-bg-color);\n  border: var(--tweet-border);\n  border-radius: 5px;\n}\n\n@media (any-hover: hover) {\n  .static-tweet-body:hover {\n    border: var(--tweet-border-hover);\n  }\n}\n\n.static-tweet-body-blockquote {\n  position: relative;\n  padding: 1.25rem 1.25rem 0.625rem 1.25rem;\n}\n\n.static-tweet-icon {\n  display: inline-block;\n  height: 1.25em;\n  vertical-align: text-bottom;\n  background-size: contain;\n  background-repeat: no-repeat;\n}\n\n.static-tweet-header {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n}\n.static-tweet-header-avatar {\n  height: 2.25rem;\n  width: 2.25rem;\n  margin-right: 0.625rem;\n}\n.static-tweet-header-author {\n  display: -webkit-flex;\n  display: -moz-box;\n  display: flex;\n  -webkit-flex-direction: column;\n     -moz-box-orient: vertical;\n     -moz-box-direction: normal;\n          flex-direction: column;\n  text-decoration: none;\n  color: inherit;\n}\n@media (any-hover: hover) {\n  .static-tweet-header-author:hover {\n    color: var(--tweet-link-color-hover);\n  }\n}\n.static-tweet-header-name,\n.static-tweet-header-username {\n  line-height: 1.2;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  color: black;\n}\n.static-tweet-header-name {\n  font-weight: 700;\n}\n.static-tweet-header-username {\n  color: var(--tweet-color-gray);\n  font-size: 0.875rem;\n}\n.static-tweet-header-brand {\n  margin-left: auto;\n}\n.static-tweet-header-icon-twitter {\n  display: inline-block;\n  height: 1.25em;\n  vertical-align: text-bottom;\n  background-size: contain;\n  background-repeat: no-repeat;\n  width: 1.25em;\n  background-image: url(data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2072%2072%22%3E%3Cpath%20fill%3D%22none%22%20d%3D%22M0%200h72v72H0z%22%2F%3E%3Cpath%20class%3D%22icon%22%20fill%3D%22%231da1f2%22%20d%3D%22M68.812%2015.14c-2.348%201.04-4.87%201.744-7.52%202.06%202.704-1.62%204.78-4.186%205.757-7.243-2.53%201.5-5.33%202.592-8.314%203.176C56.35%2010.59%2052.948%209%2049.182%209c-7.23%200-13.092%205.86-13.092%2013.093%200%201.026.118%202.02.338%202.98C25.543%2024.527%2015.9%2019.318%209.44%2011.396c-1.125%201.936-1.77%204.184-1.77%206.58%200%204.543%202.312%208.552%205.824%2010.9-2.146-.07-4.165-.658-5.93-1.64-.002.056-.002.11-.002.163%200%206.345%204.513%2011.638%2010.504%2012.84-1.1.298-2.256.457-3.45.457-.845%200-1.666-.078-2.464-.23%201.667%205.2%206.5%208.985%2012.23%209.09-4.482%203.51-10.13%205.605-16.26%205.605-1.055%200-2.096-.06-3.122-.184%205.794%203.717%2012.676%205.882%2020.067%205.882%2024.083%200%2037.25-19.95%2037.25-37.25%200-.565-.013-1.133-.038-1.693%202.558-1.847%204.778-4.15%206.532-6.774z%22%2F%3E%3C%2Fsvg%3E);\n}\n.static-tweet-header-rounded {\n  border-radius: 50%;\n}\n\n.static-tweet-skeleton {\n  display: block;\n  width: 100%;\n  border-radius: 5px;\n\n  background-image: -webkit-gradient(\n    linear,\n    right top, left top,\n    from(var(--accents-1)),\n    color-stop(var(--accents-2)),\n    color-stop(var(--accents-2)),\n    to(var(--accents-1))\n  );\n\n  background-image: -webkit-linear-gradient(\n    right,\n    var(--accents-1),\n    var(--accents-2),\n    var(--accents-2),\n    var(--accents-1)\n  );\n\n  background-image: linear-gradient(\n    270deg,\n    var(--accents-1),\n    var(--accents-2),\n    var(--accents-2),\n    var(--accents-1)\n  );\n  background-size: 400% 100%;\n  -webkit-animation: static-tweet-skeleton-loading 8s ease-in-out infinite;\n          animation: static-tweet-skeleton-loading 8s ease-in-out infinite;\n}\n\n@-webkit-keyframes static-tweet-skeleton-loading {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n\n@keyframes static-tweet-skeleton-loading {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n\n.static-tweet-skeleton-container {\n  background: var(--tweet-bg-color);\n  border: var(--tweet-border);\n  border-radius: 5px;\n}\n.static-tweet-skeleton-content {\n  padding: 1.25rem 1.25rem 0.625rem 1.25rem;\n}\n.static-tweet-skeleton-footer {\n  height: 2.5rem;\n  padding: 0.625rem 1.25rem;\n  border-top: var(--tweet-border);\n}\n", "",{"version":3,"sources":["webpack://node_modules/react-static-tweets/styles.css"],"names":[],"mappings":"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","sourcesContent":[".static-tweet {\n  --colors-blue: #0c00ff;\n  --colors-purple: #be00ff;\n\n  --accents-1: #fafafa;\n  --accents-2: #eaeaea;\n  --accents-3: #999999;\n  --accents-4: #888888;\n  --accents-5: #666666;\n\n  --bg-color: #fff;\n  --link-color: var(--colors-blue);\n  --poll-bar-color: var(--colors-blue);\n  --inline-code-color: var(--colors-purple);\n  --code-color: #9efeff;\n  --code-bg-color: #1e1e3f;\n\n  --text-margin: 1.25rem 0;\n  --container-margin: 0.5rem 0;\n  --poll-margin: 1.5rem 1rem;\n  --heading-margin-top: 3.5rem;\n  --heading-margin-bottom: 2rem;\n  --li-margin: 0 0 0.5rem 0;\n\n  /* Embedded tweet */\n  --tweet-font: normal normal 16px/1.4 Helvetica, Roboto, 'Segoe UI', Calibri,\n    sans-serif;\n  --tweet-font-color: #1c2022;\n  --tweet-bg-color: #fff;\n  --tweet-border: 1px solid #e1e8ed;\n  --tweet-border-hover: 1px solid #ccd6dd;\n  --tweet-link-color: #2b7bb9;\n  --tweet-link-color-hover: #3b94d9;\n  --tweet-color-gray: #697882;\n  --tweet-color-red: #e02460;\n}\n\n.static-tweet {\n  width: 100%;\n  max-width: 550px;\n  min-width: 220px;\n}\n\n.static-tweet-caption {\n  font-size: 14px;\n  color: #999;\n  text-align: center;\n  margin: 0;\n  margin-top: 10px;\n  padding: 0;\n}\n\n.static-tweet-anchor {\n  color: var(--tweet-link-color);\n  text-decoration: none;\n}\n\n@media (any-hover: hover) {\n  .static-tweet-anchor:hover {\n    text-decoration: underline;\n  }\n}\n\n.static-tweet code {\n  font-size: 14px;\n  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,\n    Bitstream Vera Sans Mono, Courier New, monospace, serif;\n}\n\n.static-tweet code.inline {\n  color: var(--inline-code-color);\n  font-size: 1rem;\n  white-space: pre-wrap;\n}\n\n.static-tweet pre {\n  color: var(--code-color);\n  background: var(--code-bg-color);\n  padding: 1.25rem;\n  margin: var(--container-margin);\n  white-space: pre;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.static-tweet .image-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(50%, 1fr));\n  margin: var(--container-margin);\n}\n.static-tweet .image-count-3 > :global(:first-child) {\n  grid-row-end: span 2;\n}\n.static-tweet .gif-container,\n.static-tweet .video-container {\n  margin: var(--container-margin);\n}\n.static-tweet .gif-container > :global(video),\n.static-tweet .video-container > :global(video) {\n  width: 100%;\n  max-height: 500px;\n}\n\n.static-tweet-permalink span[id] {\n  display: block;\n  position: absolute;\n  visibility: hidden;\n  margin-top: calc(-1 * var(--heading-margin-top));\n  padding-top: var(--heading-margin-top);\n}\n\n.static-tweet-permalink a {\n  color: inherit;\n  text-decoration: none;\n}\n@media (any-hover: hover) {\n  .static-tweet-permalink a:hover {\n    color: inherit;\n    border-bottom: 1px solid;\n  }\n  .static-tweet-permalink a:hover ~ .permalink {\n    visibility: visible;\n  }\n}\n.static-tweet-permalink .permalink {\n  visibility: hidden;\n  display: none;\n  font-weight: 500;\n}\n@media screen and (min-width: 992px) {\n  .static-tweet-permalink a {\n    margin-right: 0.5rem;\n  }\n  .static-tweet-permalink .permalink {\n    display: inline-block;\n  }\n}\n\n.static-tweet-h1,\n.static-tweet-h2,\n.static-tweet-h3,\n.static-tweet-h4,\n.static-tweet-h5,\n.static-tweet-h6 {\n  font-weight: 600;\n  margin: var(--heading-margin-top) 0 var(--heading-margin-bottom) 0;\n}\n\n.static-tweet-h1 {\n  font-size: 2rem;\n}\n\n.static-tweet-h2 {\n  font-size: 1.75rem;\n}\n\n.static-tweet-h3 {\n  font-size: 1.5rem;\n}\n\n.static-tweet-h4 {\n  font-size: 1.25rem;\n}\n\n.static-tweet-h5 {\n  font-size: 1rem;\n}\n\n.static-tweet-h6 {\n  font-size: 0.875rem;\n}\n\n.static-tweet ul {\n  margin: var(--text-margin);\n  list-style-type: none;\n  padding-left: 1rem;\n}\n\n.static-tweet ul li:before {\n  content: '-';\n  color: var(--accents-3);\n  position: absolute;\n  margin-left: -1rem;\n}\n\n.static-tweet ol {\n  margin: var(--text-margin);\n  padding-left: 1rem;\n}\n\n.static-tweet li {\n  padding-left: 0;\n  margin: var(--li-margin);\n}\n\n.static-tweet-summary {\n  position: relative;\n  box-sizing: border-box;\n}\n\n.static-tweet-details {\n  height: 100%;\n  overflow: hidden;\n}\n\n.static-tweet-summary {\n  position: relative;\n  height: 100%;\n  list-style: none;\n}\n\n.static-tweet-summary::marker {\n  display: none;\n}\n\n.static-tweet-table-container {\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  margin: var(--container-margin);\n}\n\n.static-tweet-table-container table {\n  display: block;\n  overflow: auto;\n  border-collapse: collapse;\n}\n\n.static-tweet-table-container th {\n  font-weight: 600;\n  padding: 0.5rem 0.875rem;\n  border: 1px solid var(--accents-2);\n}\n\n.static-tweet-table-container td {\n  padding: 0.5rem 0.875rem;\n  border: 1px solid var(--accents-2);\n}\n\n.static-tweet-p {\n  margin: var(--text-margin);\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n\n.static-tweet blockquote {\n  margin: 0;\n  margin-block-start: 0;\n  margin-block-end: 0;\n  margin-inline-start: 0;\n  margin-inline-end: 0;\n}\n\n.static-tweet-blockquote {\n  background: var(--accents-1);\n  color: var(--accents-5);\n  border: 1px solid var(--accents-2);\n  margin: var(--container-margin);\n  padding: 0 1.25rem;\n}\n\n.static-tweet-hr {\n  border: 0;\n  border-top: 1px solid var(--accents-2);\n  margin: var(--text-margin);\n}\n\n.static-tweet-twitter-link,\n.static-tweet-twitter-link s {\n  text-decoration: none;\n}\n\n@media (any-hover: hover) {\n  .static-tweet-twitter-link:hover {\n    text-decoration: underline;\n  }\n}\n\n.static-tweet-emoji {\n  height: 1.2em !important;\n  width: 1.2em !important;\n  margin: 0 2px;\n  vertical-align: -3px;\n}\n\n.static-tweet-poll {\n  margin: var(--poll-margin);\n}\n.static-tweet-options {\n  display: grid;\n  grid-template-columns: max-content 14rem max-content;\n  align-items: center;\n  grid-gap: 1rem;\n  overflow: auto;\n}\n.static-tweet-label {\n  overflow: auto;\n  text-align: right;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n.static-tweet-chart {\n  height: 100%;\n  background: var(--poll-bar-color);\n}\n.static-tweet-poll hr {\n  border: 0;\n  border-top: 1px solid var(--accents-2);\n  margin: 1rem 0 0.5rem 0;\n}\n.static-tweet-footer {\n  display: flex;\n  font-size: 0.875rem;\n  color: var(--accents-4);\n}\n.static-tweet-votes-count {\n  flex-grow: 1;\n}\n@media screen and (max-width: 450px) {\n  .static-tweet-options {\n    grid-template-columns: max-content 7rem max-content;\n  }\n}\n\n.static-tweet-info a {\n  text-decoration: none;\n}\n.static-tweet-info {\n  font-size: 0.875rem;\n  display: flex;\n}\n.static-tweet-like {\n  display: flex;\n  color: var(--tweet-color-gray);\n  margin-right: 0.75rem;\n}\n.static-tweet-like:visited {\n  color: var(--tweet-link-color);\n}\n@media (any-hover: hover) {\n  .static-tweet-like:hover {\n    color: var(--tweet-color-red);\n  }\n  .static-tweet-like:hover .static-tweet-icon-heart {\n    background-image: url(data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20class%3D%22icon%22%20fill%3D%22%23E0245E%22%20d%3D%22M12%2021.638h-.014C9.403%2021.59%201.95%2014.856%201.95%208.478c0-3.064%202.525-5.754%205.403-5.754%202.29%200%203.83%201.58%204.646%202.73.813-1.148%202.353-2.73%204.644-2.73%202.88%200%205.404%202.69%205.404%205.755%200%206.375-7.454%2013.11-10.037%2013.156H12zM7.354%204.225c-2.08%200-3.903%201.988-3.903%204.255%200%205.74%207.035%2011.596%208.55%2011.658%201.52-.062%208.55-5.917%208.55-11.658%200-2.267-1.822-4.255-3.902-4.255-2.528%200-3.94%202.936-3.952%202.965-.23.562-1.156.562-1.387%200-.015-.03-1.426-2.965-3.955-2.965z%22%2F%3E%3C%2Fsvg%3E);\n  }\n}\n.static-tweet-icon-heart {\n  width: 1.25em;\n  background-image: url(data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%3E%3Cpath%20class%3D%22icon%22%20fill%3D%22%23697882%22%20d%3D%22M12%2021.638h-.014C9.403%2021.59%201.95%2014.856%201.95%208.478c0-3.064%202.525-5.754%205.403-5.754%202.29%200%203.83%201.58%204.646%202.73.813-1.148%202.353-2.73%204.644-2.73%202.88%200%205.404%202.69%205.404%205.755%200%206.375-7.454%2013.11-10.037%2013.156H12zM7.354%204.225c-2.08%200-3.903%201.988-3.903%204.255%200%205.74%207.035%2011.596%208.55%2011.658%201.52-.062%208.55-5.917%208.55-11.658%200-2.267-1.822-4.255-3.902-4.255-2.528%200-3.94%202.936-3.952%202.965-.23.562-1.156.562-1.387%200-.015-.03-1.426-2.965-3.955-2.965z%22%2F%3E%3C%2Fsvg%3E);\n}\n.static-tweet-likes {\n  margin-left: 0.25rem;\n}\n.static-tweet-time {\n  display: block;\n  flex: 1;\n  color: var(--tweet-color-gray);\n}\n@media (any-hover: hover) {\n  .static-tweet-time:hover,\n  .static-tweet-time:focus {\n    color: var(--tweet-link-color-hover);\n  }\n  .static-tweet-time:focus {\n    text-decoration: underline;\n  }\n}\n\n.static-tweet-body {\n  color: var(--tweet-font-color);\n  font: var(--tweet-font);\n  overflow: hidden;\n  background: var(--tweet-bg-color);\n  border: var(--tweet-border);\n  border-radius: 5px;\n}\n\n@media (any-hover: hover) {\n  .static-tweet-body:hover {\n    border: var(--tweet-border-hover);\n  }\n}\n\n.static-tweet-body-blockquote {\n  position: relative;\n  padding: 1.25rem 1.25rem 0.625rem 1.25rem;\n}\n\n.static-tweet-icon {\n  display: inline-block;\n  height: 1.25em;\n  vertical-align: text-bottom;\n  background-size: contain;\n  background-repeat: no-repeat;\n}\n\n.static-tweet-header {\n  display: flex;\n}\n.static-tweet-header-avatar {\n  height: 2.25rem;\n  width: 2.25rem;\n  margin-right: 0.625rem;\n}\n.static-tweet-header-author {\n  display: flex;\n  flex-direction: column;\n  text-decoration: none;\n  color: inherit;\n}\n@media (any-hover: hover) {\n  .static-tweet-header-author:hover {\n    color: var(--tweet-link-color-hover);\n  }\n}\n.static-tweet-header-name,\n.static-tweet-header-username {\n  line-height: 1.2;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  color: black;\n}\n.static-tweet-header-name {\n  font-weight: 700;\n}\n.static-tweet-header-username {\n  color: var(--tweet-color-gray);\n  font-size: 0.875rem;\n}\n.static-tweet-header-brand {\n  margin-left: auto;\n}\n.static-tweet-header-icon-twitter {\n  display: inline-block;\n  height: 1.25em;\n  vertical-align: text-bottom;\n  background-size: contain;\n  background-repeat: no-repeat;\n  width: 1.25em;\n  background-image: url(data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2072%2072%22%3E%3Cpath%20fill%3D%22none%22%20d%3D%22M0%200h72v72H0z%22%2F%3E%3Cpath%20class%3D%22icon%22%20fill%3D%22%231da1f2%22%20d%3D%22M68.812%2015.14c-2.348%201.04-4.87%201.744-7.52%202.06%202.704-1.62%204.78-4.186%205.757-7.243-2.53%201.5-5.33%202.592-8.314%203.176C56.35%2010.59%2052.948%209%2049.182%209c-7.23%200-13.092%205.86-13.092%2013.093%200%201.026.118%202.02.338%202.98C25.543%2024.527%2015.9%2019.318%209.44%2011.396c-1.125%201.936-1.77%204.184-1.77%206.58%200%204.543%202.312%208.552%205.824%2010.9-2.146-.07-4.165-.658-5.93-1.64-.002.056-.002.11-.002.163%200%206.345%204.513%2011.638%2010.504%2012.84-1.1.298-2.256.457-3.45.457-.845%200-1.666-.078-2.464-.23%201.667%205.2%206.5%208.985%2012.23%209.09-4.482%203.51-10.13%205.605-16.26%205.605-1.055%200-2.096-.06-3.122-.184%205.794%203.717%2012.676%205.882%2020.067%205.882%2024.083%200%2037.25-19.95%2037.25-37.25%200-.565-.013-1.133-.038-1.693%202.558-1.847%204.778-4.15%206.532-6.774z%22%2F%3E%3C%2Fsvg%3E);\n}\n.static-tweet-header-rounded {\n  border-radius: 50%;\n}\n\n.static-tweet-skeleton {\n  display: block;\n  width: 100%;\n  border-radius: 5px;\n\n  background-image: linear-gradient(\n    270deg,\n    var(--accents-1),\n    var(--accents-2),\n    var(--accents-2),\n    var(--accents-1)\n  );\n  background-size: 400% 100%;\n  animation: static-tweet-skeleton-loading 8s ease-in-out infinite;\n}\n\n@keyframes static-tweet-skeleton-loading {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n\n.static-tweet-skeleton-container {\n  background: var(--tweet-bg-color);\n  border: var(--tweet-border);\n  border-radius: 5px;\n}\n.static-tweet-skeleton-content {\n  padding: 1.25rem 1.25rem 0.625rem 1.25rem;\n}\n.static-tweet-skeleton-footer {\n  height: 2.5rem;\n  padding: 0.625rem 1.25rem;\n  border-top: var(--tweet-border);\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/global.css":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/global.css ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "* {\r\n    -webkit-box-sizing: border-box;\r\n       -moz-box-sizing: border-box;\r\n            box-sizing: border-box;\r\n}\r\n\r\na {\r\n    color: inherit;\r\n    text-decoration: none;\r\n}\r\n\r\nbody,\r\nhtml {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\r\n}\r\n\r\nbody {\r\n    overflow-x: hidden;\r\n}\r\n\r\n.utterances {\r\n    max-width: 100% !important;\r\n}\r\n\r\n.static-tweet blockquote {\r\n    margin: 0;\r\n    -webkit-margin-before: 0;\r\n            margin-block-start: 0;\r\n    -webkit-margin-after: 0;\r\n            margin-block-end: 0;\r\n    -webkit-margin-start: 0;\r\n       -moz-margin-start: 0;\r\n            margin-inline-start: 0;\r\n    -webkit-margin-end: 0;\r\n       -moz-margin-end: 0;\r\n            margin-inline-end: 0;\r\n}\r\n\r\n.static-tweet-emoji {\r\n    height: 1.2em !important;\r\n    width: 1.2em !important;\r\n}", "",{"version":3,"sources":["webpack://styles/global.css"],"names":[],"mappings":"AAAA;IACI,8BAAsB;OAAtB,2BAAsB;YAAtB,sBAAsB;AAC1B;;AAEA;IACI,cAAc;IACd,qBAAqB;AACzB;;AAEA;;IAEI,UAAU;IACV,SAAS;IACT,8IAA8I;AAClJ;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,SAAS;IACT,wBAAqB;YAArB,qBAAqB;IACrB,uBAAmB;YAAnB,mBAAmB;IACnB,uBAAsB;OAAtB,oBAAsB;YAAtB,sBAAsB;IACtB,qBAAoB;OAApB,kBAAoB;YAApB,oBAAoB;AACxB;;AAEA;IACI,wBAAwB;IACxB,uBAAuB;AAC3B","sourcesContent":["* {\r\n    box-sizing: border-box;\r\n}\r\n\r\na {\r\n    color: inherit;\r\n    text-decoration: none;\r\n}\r\n\r\nbody,\r\nhtml {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\r\n}\r\n\r\nbody {\r\n    overflow-x: hidden;\r\n}\r\n\r\n.utterances {\r\n    max-width: 100% !important;\r\n}\r\n\r\n.static-tweet blockquote {\r\n    margin: 0;\r\n    margin-block-start: 0;\r\n    margin-block-end: 0;\r\n    margin-inline-start: 0;\r\n    margin-inline-end: 0;\r\n}\r\n\r\n.static-tweet-emoji {\r\n    height: 1.2em !important;\r\n    width: 1.2em !important;\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/notion.css":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/notion.css ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".notion {\r\n    --notion-max-width: 720px;\r\n    --notion-header-height: 54px;\r\n}\r\n\r\n.notion-page {\r\n    padding-bottom: -webkit-calc(max(5vh, 32px)) !important;\r\n    padding-bottom: calc(max(5vh, 32px)) !important;\r\n    line-height: 1.65;\r\n}\r\n\r\n.index-page {\r\n    --notion-max-width: 1000px;\r\n}\r\n\r\n.notion-text {\r\n    padding: 0.5em 2px;\r\n}\r\n\r\n.notion-asset-caption {\r\n    text-align: center;\r\n}\r\n\r\n.notion-asset-wrapper {\r\n    margin-top: 1em;\r\n    margin-bottom: 1em;\r\n}\r\n\r\n.notion-header .nav-header {\r\n    max-width: 1100px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.notion-gallery-grid {\r\n    grid-template-columns: repeat(auto-fill, minmax(360px, 1fr));\r\n    grid-gap: 6vmin;\r\n    grid-gap: 6vmin;\r\n    gap: 6vmin;\r\n}\r\n\r\n.notion-gallery-grid .notion-page-icon {\r\n    display: none;\r\n}\r\n\r\n.notion-gallery-grid .notion-page-title-text {\r\n    font-size: 2em;\r\n    white-space: unset;\r\n}\r\n\r\n.notion-gallery-grid .notion-collection-card-property {\r\n    white-space: unset;\r\n    text-overflow: unset;\r\n}\r\n\r\n.notion-gallery-grid .notion-property-text {\r\n    font-size: 14px;\r\n}\r\n\r\n.notion-collection-card {\r\n    border-radius: 16px;\r\n    -webkit-box-shadow: none;\r\n            box-shadow: none;\r\n}\r\n\r\n.notion-collection-card-cover img {\r\n    border-radius: 16px;\r\n}\r\n\r\n.notion-collection-card {\r\n    overflow: visible;\r\n}\r\n\r\n.notion-collection-card-cover {\r\n    border-radius: 16px;\r\n    overflow: visible;\r\n    -webkit-box-shadow: 2px 2px 8px 4px rgba(15, 15, 15, 0.1);\r\n            box-shadow: 2px 2px 8px 4px rgba(15, 15, 15, 0.1);\r\n}\r\n\r\n.notion-collection-card-cover {\r\n    border-bottom: 0 none;\r\n    -webkit-transition: -webkit-filter 150ms linear;\r\n    transition: -webkit-filter 150ms linear;\r\n    transition: filter 150ms linear;\r\n    transition: filter 150ms linear, -webkit-filter 150ms linear;\r\n    -webkit-filter: none;\r\n            filter: none;\r\n}\r\n\r\n.notion-collection-card:hover .notion-collection-card-cover {\r\n    -webkit-filter: brightness(120%);\r\n            filter: brightness(120%);\r\n}\r\n\r\n\r\n/* only target safari */\r\n\r\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\r\n    _::-webkit-full-page-media,\r\n    _:future,\r\n     :root,\r\n    .notion-collection-card-cover {\r\n        -webkit-transition: none 0ms linear;\r\n        transition: none 0ms linear;\r\n    }\r\n}\r\n\r\n.notion-quote {\r\n    padding: 0.2em 0.75em;\r\n    font-size: 1.1em;\r\n}\r\n\r\n.notion-h1,\r\n.notion-h2,\r\n.notion-h3 {\r\n    margin-bottom: 0.25em;\r\n}\r\n\r\n.notion-callout {\r\n    margin: 0.75em 0;\r\n}\r\n\r\n.notion-hr {\r\n    margin: 2em 0;\r\n}\r\n\r\n@media only screen and (max-width: 920px) {\r\n    .index-page.notion-page {\r\n        padding-left: 2vw;\r\n        padding-right: 2vw;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 720px) {\r\n    .notion-page {\r\n        padding-left: 2vw;\r\n        padding-right: 2vw;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 600px) {\r\n    .notion-search-button {\r\n        display: none !important;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 400px) {\r\n    .notion-gallery-grid {\r\n        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n        grid-gap: 10vmin;\r\n        grid-gap: 10vmin;\r\n        gap: 10vmin;\r\n    }\r\n}\r\n\r\n.notion .notion-page-icon-cover {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n}\r\n\r\n.notion-title {\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n.notion-collection-column-title {\r\n    display: none !important;\r\n}\r\n\r\n.notion-collection-row-property .notion-property {\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: flex;\r\n    -webkit-justify-content: center;\r\n       -moz-box-pack: center;\r\n            justify-content: center;\r\n}\r\n\r\n.notion-collection-row-value {\r\n    padding: 0;\r\n}\r\n\r\n.notion-page-cover {\r\n    max-width: 1200px;\r\n    border-radius: 24px;\r\n    -webkit-box-shadow: 2px 2px 8px 4px rgba(15, 15, 15, 0.1);\r\n            box-shadow: 2px 2px 8px 4px rgba(15, 15, 15, 0.1);\r\n}\r\n\r\n@media only screen and (max-width: 1200px) {\r\n    .notion-page-cover {\r\n        border-radius: 0;\r\n    }\r\n}\r\n\r\n.notion-block-ab9a258d6cf444f3bb40dc2600feae91 .notion-page-link {\r\n    -webkit-justify-content: center;\r\n       -moz-box-pack: center;\r\n            justify-content: center;\r\n    padding: 2em;\r\n}\r\n\r\n.notion-code {\r\n    background: rgba(249, 250, 251, 1);\r\n    border: 1px solid rgba(229, 231, 235, 1);\r\n    border-radius: 0.375rem;\r\n}\r\n\r\n.notion-link {\r\n    position: relative;\r\n    -webkit-transition: unset;\r\n    transition: unset;\r\n    opacity: 1;\r\n}\r\n\r\n.notion-link:hover {\r\n    border-width: 3px;\r\n    -webkit-border-image: -webkit-linear-gradient(359.32deg, #b439df 0.26%, #e5337e 102.37%);\r\n            border-image: linear-gradient(90.68deg, #b439df 0.26%, #e5337e 102.37%);\r\n    border-image-slice: 1;\r\n}\r\n\r\n.notion-red_background,\r\n.notion-pink_background,\r\n.notion-blue_background,\r\n.notion-purple_background,\r\n.notion-teal_background,\r\n.notion-yellow_background,\r\n.notion-orange_background,\r\n.notion-brown_background,\r\n.notion-gray_background {\r\n    padding: 0 0.5rem;\r\n    margin: 0 -0.5rem 0 -0.25rem;\r\n    border-radius: 0.5rem;\r\n    border-bottom-left-radius: 0.125rem;\r\n    -webkit-box-decoration-break: clone;\r\n            box-decoration-break: clone;\r\n    background-color: none;\r\n    /* light yellow */\r\n    background-image: -webkit-linear-gradient( 331deg, var(--bg-color), #fff697 10.5%, #fdf59d 85.29%, var(--bg-color));\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #fff697 10.5%, #fdf59d 85.29%, var(--bg-color));\r\n}\r\n\r\n.notion-purple_background,\r\n.notion-pink_background {\r\n    /* light pink */\r\n    background-image: -webkit-linear-gradient( 331deg, var(--bg-color), #f5b8d1 10.5%, #f9bcd3 85.29%, var(--bg-color));\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #f5b8d1 10.5%, #f9bcd3 85.29%, var(--bg-color));\r\n}\r\n\r\n.notion-blue_background,\r\n.notion-gray_background {\r\n    /* light blue */\r\n    background-image: -webkit-linear-gradient( 331deg, var(--bg-color), #adedfc 10.5%, #adebfd 85.29%, var(--bg-color));\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #adedfc 10.5%, #adebfd 85.29%, var(--bg-color));\r\n}\r\n\r\n.notion-red_background,\r\n.notion-orange_background {\r\n    /* light red */\r\n    background-image: -webkit-linear-gradient( 331deg, var(--bg-color), #f5c4ff 10.5%, #e7a8fc 85.29%, var(--bg-color));\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #f5c4ff 10.5%, #e7a8fc 85.29%, var(--bg-color));\r\n}\r\n\r\n.notion-teal_background {\r\n    /* light green */\r\n    background-image: -webkit-linear-gradient( 331deg, var(--bg-color), #d4eabc 10.5%, #d2eabc 85.29%, var(--bg-color));\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #d4eabc 10.5%, #d2eabc 85.29%, var(--bg-color));\r\n}\r\n\r\n.notion-brown_background {\r\n    /* dark blue */\r\n    background-image: -webkit-linear-gradient( 331deg, var(--bg-color), #96b8ec 10.5%, #a6c3f0 85.29%, var(--bg-color));\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #96b8ec 10.5%, #a6c3f0 85.29%, var(--bg-color));\r\n}\r\n\r\n.dark-mode .notion-red_background,\r\n.dark-mode .notion-pink_background,\r\n.dark-mode .notion-blue_background,\r\n.dark-mode .notion-purple_background,\r\n.dark-mode .notion-teal_background,\r\n.dark-mode .notion-yellow_background,\r\n.dark-mode .notion-orange_background,\r\n.dark-mode .notion-brown_background,\r\n.dark-mode .notion-gray_background {\r\n    padding: 0;\r\n    margin: 0;\r\n    border-radius: 0;\r\n    background: none !important;\r\n}\r\n\r\n.notion-block-f382a57807bc40779860eb079d0144f2 .lazy-image-wrapper {\r\n    border-radius: 16px;\r\n}\r\n\r\n\r\n/* if you don't want rounded page images, remove this */\r\n\r\n.notion-page-icon-wrapper img.notion-page-icon {\r\n    border-radius: 50%;\r\n    -webkit-box-shadow: 0 8px 40px 0 rgb(0 0 0 / 21%);\r\n            box-shadow: 0 8px 40px 0 rgb(0 0 0 / 21%);\r\n}\r\n\r\n.notion-header {\r\n    background: hsla(0, 0%, 100%, 0.8);\r\n    -webkit-backdrop-filter: saturate(180%) blur(16px);\r\n            backdrop-filter: saturate(180%) blur(16px);\r\n}\r\n\r\n.dark-mode .notion-header {\r\n    background: transparent;\r\n    -webkit-box-shadow: inset 0 -1px 0 0 rgba(0, 0, 0, 0.1);\r\n            box-shadow: inset 0 -1px 0 0 rgba(0, 0, 0, 0.1);\r\n    -webkit-backdrop-filter: saturate(180%) blur(8px);\r\n            backdrop-filter: saturate(180%) blur(8px);\r\n}\r\n\r\n.notion-bookmark:hover {\r\n    -webkit-border-image: -webkit-linear-gradient(359.32deg, #b439df 0.26%, #e5337e 102.37%);\r\n            border-image: linear-gradient(90.68deg, #b439df 0.26%, #e5337e 102.37%);\r\n    border-image-slice: 1;\r\n}", "",{"version":3,"sources":["webpack://styles/notion.css"],"names":[],"mappings":"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","sourcesContent":[".notion {\r\n    --notion-max-width: 720px;\r\n    --notion-header-height: 54px;\r\n}\r\n\r\n.notion-page {\r\n    padding-bottom: calc(max(5vh, 32px)) !important;\r\n    line-height: 1.65;\r\n}\r\n\r\n.index-page {\r\n    --notion-max-width: 1000px;\r\n}\r\n\r\n.notion-text {\r\n    padding: 0.5em 2px;\r\n}\r\n\r\n.notion-asset-caption {\r\n    text-align: center;\r\n}\r\n\r\n.notion-asset-wrapper {\r\n    margin-top: 1em;\r\n    margin-bottom: 1em;\r\n}\r\n\r\n.notion-header .nav-header {\r\n    max-width: 1100px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.notion-gallery-grid {\r\n    grid-template-columns: repeat(auto-fill, minmax(360px, 1fr));\r\n    grid-gap: 6vmin;\r\n    gap: 6vmin;\r\n}\r\n\r\n.notion-gallery-grid .notion-page-icon {\r\n    display: none;\r\n}\r\n\r\n.notion-gallery-grid .notion-page-title-text {\r\n    font-size: 2em;\r\n    white-space: unset;\r\n}\r\n\r\n.notion-gallery-grid .notion-collection-card-property {\r\n    white-space: unset;\r\n    text-overflow: unset;\r\n}\r\n\r\n.notion-gallery-grid .notion-property-text {\r\n    font-size: 14px;\r\n}\r\n\r\n.notion-collection-card {\r\n    border-radius: 16px;\r\n    box-shadow: none;\r\n}\r\n\r\n.notion-collection-card-cover img {\r\n    border-radius: 16px;\r\n}\r\n\r\n.notion-collection-card {\r\n    overflow: visible;\r\n}\r\n\r\n.notion-collection-card-cover {\r\n    border-radius: 16px;\r\n    overflow: visible;\r\n    box-shadow: 2px 2px 8px 4px rgba(15, 15, 15, 0.1);\r\n}\r\n\r\n.notion-collection-card-cover {\r\n    border-bottom: 0 none;\r\n    transition: filter 150ms linear;\r\n    filter: none;\r\n}\r\n\r\n.notion-collection-card:hover .notion-collection-card-cover {\r\n    filter: brightness(120%);\r\n}\r\n\r\n\r\n/* only target safari */\r\n\r\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\r\n    _::-webkit-full-page-media,\r\n    _:future,\r\n     :root,\r\n    .notion-collection-card-cover {\r\n        transition: none 0ms linear;\r\n    }\r\n}\r\n\r\n.notion-quote {\r\n    padding: 0.2em 0.75em;\r\n    font-size: 1.1em;\r\n}\r\n\r\n.notion-h1,\r\n.notion-h2,\r\n.notion-h3 {\r\n    margin-bottom: 0.25em;\r\n}\r\n\r\n.notion-callout {\r\n    margin: 0.75em 0;\r\n}\r\n\r\n.notion-hr {\r\n    margin: 2em 0;\r\n}\r\n\r\n@media only screen and (max-width: 920px) {\r\n    .index-page.notion-page {\r\n        padding-left: 2vw;\r\n        padding-right: 2vw;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 720px) {\r\n    .notion-page {\r\n        padding-left: 2vw;\r\n        padding-right: 2vw;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 600px) {\r\n    .notion-search-button {\r\n        display: none !important;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 400px) {\r\n    .notion-gallery-grid {\r\n        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n        grid-gap: 10vmin;\r\n        gap: 10vmin;\r\n    }\r\n}\r\n\r\n.notion .notion-page-icon-cover {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n}\r\n\r\n.notion-title {\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n.notion-collection-column-title {\r\n    display: none !important;\r\n}\r\n\r\n.notion-collection-row-property .notion-property {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.notion-collection-row-value {\r\n    padding: 0;\r\n}\r\n\r\n.notion-page-cover {\r\n    max-width: 1200px;\r\n    border-radius: 24px;\r\n    box-shadow: 2px 2px 8px 4px rgba(15, 15, 15, 0.1);\r\n}\r\n\r\n@media only screen and (max-width: 1200px) {\r\n    .notion-page-cover {\r\n        border-radius: 0;\r\n    }\r\n}\r\n\r\n.notion-block-ab9a258d6cf444f3bb40dc2600feae91 .notion-page-link {\r\n    justify-content: center;\r\n    padding: 2em;\r\n}\r\n\r\n.notion-code {\r\n    background: rgba(249, 250, 251, 1);\r\n    border: 1px solid rgba(229, 231, 235, 1);\r\n    border-radius: 0.375rem;\r\n}\r\n\r\n.notion-link {\r\n    position: relative;\r\n    transition: unset;\r\n    opacity: 1;\r\n}\r\n\r\n.notion-link:hover {\r\n    border-width: 3px;\r\n    border-image: linear-gradient(90.68deg, #b439df 0.26%, #e5337e 102.37%);\r\n    border-image-slice: 1;\r\n}\r\n\r\n.notion-red_background,\r\n.notion-pink_background,\r\n.notion-blue_background,\r\n.notion-purple_background,\r\n.notion-teal_background,\r\n.notion-yellow_background,\r\n.notion-orange_background,\r\n.notion-brown_background,\r\n.notion-gray_background {\r\n    padding: 0 0.5rem;\r\n    margin: 0 -0.5rem 0 -0.25rem;\r\n    border-radius: 0.5rem;\r\n    border-bottom-left-radius: 0.125rem;\r\n    box-decoration-break: clone;\r\n    background-color: none;\r\n    /* light yellow */\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #fff697 10.5%, #fdf59d 85.29%, var(--bg-color));\r\n}\r\n\r\n.notion-purple_background,\r\n.notion-pink_background {\r\n    /* light pink */\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #f5b8d1 10.5%, #f9bcd3 85.29%, var(--bg-color));\r\n}\r\n\r\n.notion-blue_background,\r\n.notion-gray_background {\r\n    /* light blue */\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #adedfc 10.5%, #adebfd 85.29%, var(--bg-color));\r\n}\r\n\r\n.notion-red_background,\r\n.notion-orange_background {\r\n    /* light red */\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #f5c4ff 10.5%, #e7a8fc 85.29%, var(--bg-color));\r\n}\r\n\r\n.notion-teal_background {\r\n    /* light green */\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #d4eabc 10.5%, #d2eabc 85.29%, var(--bg-color));\r\n}\r\n\r\n.notion-brown_background {\r\n    /* dark blue */\r\n    background-image: linear-gradient( 119deg, var(--bg-color), #96b8ec 10.5%, #a6c3f0 85.29%, var(--bg-color));\r\n}\r\n\r\n.dark-mode .notion-red_background,\r\n.dark-mode .notion-pink_background,\r\n.dark-mode .notion-blue_background,\r\n.dark-mode .notion-purple_background,\r\n.dark-mode .notion-teal_background,\r\n.dark-mode .notion-yellow_background,\r\n.dark-mode .notion-orange_background,\r\n.dark-mode .notion-brown_background,\r\n.dark-mode .notion-gray_background {\r\n    padding: 0;\r\n    margin: 0;\r\n    border-radius: 0;\r\n    background: none !important;\r\n}\r\n\r\n.notion-block-f382a57807bc40779860eb079d0144f2 .lazy-image-wrapper {\r\n    border-radius: 16px;\r\n}\r\n\r\n\r\n/* if you don't want rounded page images, remove this */\r\n\r\n.notion-page-icon-wrapper img.notion-page-icon {\r\n    border-radius: 50%;\r\n    box-shadow: 0 8px 40px 0 rgb(0 0 0 / 21%);\r\n}\r\n\r\n.notion-header {\r\n    background: hsla(0, 0%, 100%, 0.8);\r\n    backdrop-filter: saturate(180%) blur(16px);\r\n}\r\n\r\n.dark-mode .notion-header {\r\n    background: transparent;\r\n    box-shadow: inset 0 -1px 0 0 rgba(0, 0, 0, 0.1);\r\n    backdrop-filter: saturate(180%) blur(8px);\r\n}\r\n\r\n.notion-bookmark:hover {\r\n    border-image: linear-gradient(90.68deg, #b439df 0.26%, #e5337e 102.37%);\r\n    border-image-slice: 1;\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/prism-theme.css":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[3].oneOf[6].use[2]!./styles/prism-theme.css ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/* prism theme adjustments */\r\n\r\n.notion-code {\r\n  background-color: rgba(249, 250, 251, 1);\r\n  border: 1px solid rgba(229, 231, 235, 1);\r\n  border-radius: 0.375rem;\r\n  padding: 1.5em !important;\r\n}\r\n\r\n.dark-mode .notion-code {\r\n  background-color: rgba(17, 24, 39, 1);\r\n  border-color: rgba(55, 65, 81, 1);\r\n}\r\n.notion code {\r\n  color: rgba(31, 41, 55, 1);\r\n  border: 0 none !important;\r\n  -webkit-box-shadow: none !important;\r\n          box-shadow: none !important;\r\n  background: none !important;\r\n  padding: 0 !important;\r\n}\r\n.dark-mode .notion code {\r\n  color: rgba(229, 231, 235, 1);\r\n}\r\n.token.cdata,\r\n.token.doctype,\r\n.token.prolog {\r\n  color: rgba(55, 65, 81, 1);\r\n}\r\n.token.comment {\r\n  color: #5b9b4c;\r\n}\r\n.dark-mode .token.cdata,\r\n.dark-mode .token.doctype,\r\n.dark-mode .token.prolog {\r\n  color: rgba(209, 213, 219, 1);\r\n}\r\n.token.punctuation {\r\n  color: rgba(55, 65, 81, 1);\r\n}\r\n.dark-mode .token.punctuation {\r\n  color: rgba(209, 213, 219, 1);\r\n}\r\n.token.boolean,\r\n.token.constant,\r\n.token.deleted,\r\n.token.number,\r\n.token.property,\r\n.token.symbol,\r\n.token.tag {\r\n  color: rgba(16, 185, 129, 1);\r\n}\r\n.token.attr-name,\r\n.token.builtin,\r\n.token.char,\r\n.token.inserted,\r\n.token.selector,\r\n.token.string {\r\n  color: rgba(139, 92, 246, 1);\r\n}\r\n.language-css .token.string,\r\n.style .token.string,\r\n.token.entity,\r\n.token.operator,\r\n.token.url {\r\n  color: rgba(245, 158, 11, 1);\r\n}\r\n.token.atrule,\r\n.token.attr-value,\r\n.token.keyword {\r\n  color: rgba(59, 130, 246, 1);\r\n}\r\n.token.class-name,\r\n.token.function {\r\n  color: rgba(236, 72, 153, 1);\r\n}\r\n.token.important,\r\n.token.regex,\r\n.token.variable {\r\n  color: rgba(245, 158, 11, 1);\r\n}\r\ncode[class*='language-'],\r\npre[class*='language-'] {\r\n  color: rgba(31, 41, 55, 1);\r\n}\r\n.dark-mode code[class*='language-'],\r\n.dark-mode pre[class*='language-'] {\r\n  color: rgba(249, 250, 251, 1);\r\n}\r\npre::-webkit-scrollbar {\r\n  display: none;\r\n}\r\npre {\r\n  -ms-overflow-style: none;\r\n  scrollbar-width: none;\r\n}\r\n.token.operator,\r\n.token.entity,\r\n.token.url,\r\n.token.variable {\r\n  background: none;\r\n}\r\n\r\npre[class*='language-'] > code {\r\n  border-left: 0 none !important;\r\n  -webkit-box-shadow: none !important;\r\n          box-shadow: none !important;\r\n  background: none !important;\r\n}\r\n", "",{"version":3,"sources":["webpack://styles/prism-theme.css"],"names":[],"mappings":"AAAA,4BAA4B;;AAE5B;EACE,wCAAwC;EACxC,wCAAwC;EACxC,uBAAuB;EACvB,yBAAyB;AAC3B;;AAEA;EACE,qCAAqC;EACrC,iCAAiC;AACnC;AACA;EACE,0BAA0B;EAC1B,yBAAyB;EACzB,mCAA2B;UAA3B,2BAA2B;EAC3B,2BAA2B;EAC3B,qBAAqB;AACvB;AACA;EACE,6BAA6B;AAC/B;AACA;;;EAGE,0BAA0B;AAC5B;AACA;EACE,cAAc;AAChB;AACA;;;EAGE,6BAA6B;AAC/B;AACA;EACE,0BAA0B;AAC5B;AACA;EACE,6BAA6B;AAC/B;AACA;;;;;;;EAOE,4BAA4B;AAC9B;AACA;;;;;;EAME,4BAA4B;AAC9B;AACA;;;;;EAKE,4BAA4B;AAC9B;AACA;;;EAGE,4BAA4B;AAC9B;AACA;;EAEE,4BAA4B;AAC9B;AACA;;;EAGE,4BAA4B;AAC9B;AACA;;EAEE,0BAA0B;AAC5B;AACA;;EAEE,6BAA6B;AAC/B;AACA;EACE,aAAa;AACf;AACA;EACE,wBAAwB;EACxB,qBAAqB;AACvB;AACA;;;;EAIE,gBAAgB;AAClB;;AAEA;EACE,8BAA8B;EAC9B,mCAA2B;UAA3B,2BAA2B;EAC3B,2BAA2B;AAC7B","sourcesContent":["/* prism theme adjustments */\r\n\r\n.notion-code {\r\n  background-color: rgba(249, 250, 251, 1);\r\n  border: 1px solid rgba(229, 231, 235, 1);\r\n  border-radius: 0.375rem;\r\n  padding: 1.5em !important;\r\n}\r\n\r\n.dark-mode .notion-code {\r\n  background-color: rgba(17, 24, 39, 1);\r\n  border-color: rgba(55, 65, 81, 1);\r\n}\r\n.notion code {\r\n  color: rgba(31, 41, 55, 1);\r\n  border: 0 none !important;\r\n  box-shadow: none !important;\r\n  background: none !important;\r\n  padding: 0 !important;\r\n}\r\n.dark-mode .notion code {\r\n  color: rgba(229, 231, 235, 1);\r\n}\r\n.token.cdata,\r\n.token.doctype,\r\n.token.prolog {\r\n  color: rgba(55, 65, 81, 1);\r\n}\r\n.token.comment {\r\n  color: #5b9b4c;\r\n}\r\n.dark-mode .token.cdata,\r\n.dark-mode .token.doctype,\r\n.dark-mode .token.prolog {\r\n  color: rgba(209, 213, 219, 1);\r\n}\r\n.token.punctuation {\r\n  color: rgba(55, 65, 81, 1);\r\n}\r\n.dark-mode .token.punctuation {\r\n  color: rgba(209, 213, 219, 1);\r\n}\r\n.token.boolean,\r\n.token.constant,\r\n.token.deleted,\r\n.token.number,\r\n.token.property,\r\n.token.symbol,\r\n.token.tag {\r\n  color: rgba(16, 185, 129, 1);\r\n}\r\n.token.attr-name,\r\n.token.builtin,\r\n.token.char,\r\n.token.inserted,\r\n.token.selector,\r\n.token.string {\r\n  color: rgba(139, 92, 246, 1);\r\n}\r\n.language-css .token.string,\r\n.style .token.string,\r\n.token.entity,\r\n.token.operator,\r\n.token.url {\r\n  color: rgba(245, 158, 11, 1);\r\n}\r\n.token.atrule,\r\n.token.attr-value,\r\n.token.keyword {\r\n  color: rgba(59, 130, 246, 1);\r\n}\r\n.token.class-name,\r\n.token.function {\r\n  color: rgba(236, 72, 153, 1);\r\n}\r\n.token.important,\r\n.token.regex,\r\n.token.variable {\r\n  color: rgba(245, 158, 11, 1);\r\n}\r\ncode[class*='language-'],\r\npre[class*='language-'] {\r\n  color: rgba(31, 41, 55, 1);\r\n}\r\n.dark-mode code[class*='language-'],\r\n.dark-mode pre[class*='language-'] {\r\n  color: rgba(249, 250, 251, 1);\r\n}\r\npre::-webkit-scrollbar {\r\n  display: none;\r\n}\r\npre {\r\n  -ms-overflow-style: none;\r\n  scrollbar-width: none;\r\n}\r\n.token.operator,\r\n.token.entity,\r\n.token.url,\r\n.token.variable {\r\n  background: none;\r\n}\r\n\r\npre[class*='language-'] > code {\r\n  border-left: 0 none !important;\r\n  box-shadow: none !important;\r\n  background: none !important;\r\n}\r\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/notion-utils/build/esm/get-all-pages-in-space.js":
/*!***********************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/get-all-pages-in-space.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAllPagesInSpace": function() { return /* binding */ getAllPagesInSpace; }
/* harmony export */ });
/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-queue */ "./node_modules/p-queue/dist/index.js");
/* harmony import */ var _parse_page_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse-page-id */ "./node_modules/notion-utils/build/esm/parse-page-id.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


/**
 * Performs a traversal over a given Notion workspace starting from a seed page.
 *
 * Returns a map containing all of the pages that are reachable from the seed
 * page in the space.
 *
 * If `rootSpaceId` is not defined, the space ID of the root page will be used
 * to scope traversal.
 *
 *
 * @param rootPageId - Page ID to start from.
 * @param rootSpaceId - Space ID to scope traversal.
 * @param getPage - Function used to fetch a single page.
 * @param opts - Optional config
 */
function getAllPagesInSpace(rootPageId, rootSpaceId, getPage, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.concurrency, concurrency = _c === void 0 ? 4 : _c, _d = _b.traverseCollections, traverseCollections = _d === void 0 ? true : _d, _e = _b.targetPageId, targetPageId = _e === void 0 ? null : _e;
    return __awaiter(this, void 0, void 0, function () {
        function processPage(pageId) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (targetPageId && pendingPageIds.has(targetPageId)) {
                        return [2 /*return*/];
                    }
                    pageId = (0,_parse_page_id__WEBPACK_IMPORTED_MODULE_1__.parsePageId)(pageId);
                    if (pageId && !pages[pageId] && !pendingPageIds.has(pageId)) {
                        pendingPageIds.add(pageId);
                        queue.add(function () { return __awaiter(_this, void 0, void 0, function () {
                            var page_1, spaceId, _i, _a, collectionViews, _b, _c, collectionData, blockIds, _d, blockIds_1, collectionItemId, err_1;
                            var _e, _f;
                            return __generator(this, function (_g) {
                                switch (_g.label) {
                                    case 0:
                                        _g.trys.push([0, 2, , 3]);
                                        if (targetPageId &&
                                            pendingPageIds.has(targetPageId) &&
                                            pageId !== targetPageId) {
                                            return [2 /*return*/];
                                        }
                                        return [4 /*yield*/, getPage(pageId)];
                                    case 1:
                                        page_1 = _g.sent();
                                        if (!page_1) {
                                            return [2 /*return*/];
                                        }
                                        spaceId = (_f = (_e = page_1.block[pageId]) === null || _e === void 0 ? void 0 : _e.value) === null || _f === void 0 ? void 0 : _f.space_id;
                                        if (!rootSpaceId) {
                                            rootSpaceId = spaceId;
                                        }
                                        else if (rootSpaceId !== spaceId) {
                                            return [2 /*return*/];
                                        }
                                        Object.keys(page_1.block)
                                            .filter(function (key) {
                                            var _a;
                                            var block = (_a = page_1.block[key]) === null || _a === void 0 ? void 0 : _a.value;
                                            if (!block)
                                                return false;
                                            var isPage = block.type === 'page' || block.type === 'collection_view_page';
                                            // the space id check is important to limit traversal because pages
                                            // can reference pages in other spaces
                                            return isPage && block.space_id === rootSpaceId;
                                        })
                                            .forEach(function (subPageId) { return processPage(subPageId); });
                                        // traverse collection item pages as they may contain subpages as well
                                        if (traverseCollections) {
                                            for (_i = 0, _a = Object.values(page_1.collection_query); _i < _a.length; _i++) {
                                                collectionViews = _a[_i];
                                                for (_b = 0, _c = Object.values(collectionViews); _b < _c.length; _b++) {
                                                    collectionData = _c[_b];
                                                    blockIds = collectionData.blockIds;
                                                    if (blockIds) {
                                                        for (_d = 0, blockIds_1 = blockIds; _d < blockIds_1.length; _d++) {
                                                            collectionItemId = blockIds_1[_d];
                                                            processPage(collectionItemId);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        pages[pageId] = page_1;
                                        return [3 /*break*/, 3];
                                    case 2:
                                        err_1 = _g.sent();
                                        console.warn('page load error', { pageId: pageId, spaceId: rootSpaceId }, err_1.statusCode, err_1.message);
                                        pages[pageId] = null;
                                        return [3 /*break*/, 3];
                                    case 3:
                                        pendingPageIds["delete"](pageId);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    }
                    return [2 /*return*/];
                });
            });
        }
        var pages, pendingPageIds, queue;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    pages = {};
                    pendingPageIds = new Set();
                    queue = new p_queue__WEBPACK_IMPORTED_MODULE_0__.default({ concurrency: concurrency });
                    return [4 /*yield*/, processPage(rootPageId)];
                case 1:
                    _f.sent();
                    return [4 /*yield*/, queue.onIdle()];
                case 2:
                    _f.sent();
                    return [2 /*return*/, pages];
            }
        });
    });
}
//# sourceMappingURL=get-all-pages-in-space.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/get-block-icon.js":
/*!***************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/get-block-icon.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getBlockIcon": function() { return /* binding */ getBlockIcon; }
/* harmony export */ });
function getBlockIcon(block, recordMap) {
    var _a, _b, _c;
    if ((_a = block.format) === null || _a === void 0 ? void 0 : _a.page_icon) {
        return (_b = block.format) === null || _b === void 0 ? void 0 : _b.page_icon;
    }
    if (block.type === 'collection_view_page' ||
        block.type === 'collection_view') {
        var collection = (_c = recordMap.collection[block.collection_id]) === null || _c === void 0 ? void 0 : _c.value;
        if (collection) {
            return collection.icon;
        }
    }
    return null;
}
//# sourceMappingURL=get-block-icon.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/get-block-parent-page.js":
/*!**********************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/get-block-parent-page.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getBlockParentPage": function() { return /* binding */ getBlockParentPage; }
/* harmony export */ });
/**
 * Returns the parent page block containing a given page.
 *
 * Note that many times this will not be the direct parent block since
 * some non-page content blocks can contain sub-blocks.
 */
var getBlockParentPage = function (block, recordMap) {
    var _a, _b, _c;
    var currentRecord = block;
    while (currentRecord != null) {
        var parentId = currentRecord.parent_id;
        var parentTable = currentRecord.parent_table;
        if (parentTable === 'collection') {
            currentRecord = (_a = recordMap.collection[parentId]) === null || _a === void 0 ? void 0 : _a.value;
        }
        else {
            currentRecord = (_b = recordMap.block[parentId]) === null || _b === void 0 ? void 0 : _b.value;
            if (((_c = currentRecord) === null || _c === void 0 ? void 0 : _c.type) === 'page') {
                return currentRecord;
            }
        }
    }
    return null;
};
//# sourceMappingURL=get-block-parent-page.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/get-block-title.js":
/*!****************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/get-block-title.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getBlockTitle": function() { return /* binding */ getBlockTitle; }
/* harmony export */ });
/* harmony import */ var _get_text_content__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-text-content */ "./node_modules/notion-utils/build/esm/get-text-content.js");

function getBlockTitle(block, recordMap) {
    var _a, _b;
    if ((_a = block.properties) === null || _a === void 0 ? void 0 : _a.title) {
        return (0,_get_text_content__WEBPACK_IMPORTED_MODULE_0__.getTextContent)(block.properties.title);
    }
    if (block.type === 'collection_view_page' ||
        block.type === 'collection_view') {
        var collection = (_b = recordMap.collection[block.collection_id]) === null || _b === void 0 ? void 0 : _b.value;
        if (collection) {
            return (0,_get_text_content__WEBPACK_IMPORTED_MODULE_0__.getTextContent)(collection.name);
        }
    }
    return '';
}
//# sourceMappingURL=get-block-title.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/get-canonical-page-id.js":
/*!**********************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/get-canonical-page-id.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCanonicalPageId": function() { return /* binding */ getCanonicalPageId; },
/* harmony export */   "normalizeTitle": function() { return /* binding */ normalizeTitle; }
/* harmony export */ });
/* harmony import */ var _uuid_to_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uuid-to-id */ "./node_modules/notion-utils/build/esm/uuid-to-id.js");
/* harmony import */ var _get_block_title__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-block-title */ "./node_modules/notion-utils/build/esm/get-block-title.js");


/**
 * Gets the canonical, display-friendly version of a page's ID for use in URLs.
 */
var getCanonicalPageId = function (pageId, recordMap, _a) {
    var _b;
    var _c = _a === void 0 ? {} : _a, _d = _c.uuid, uuid = _d === void 0 ? true : _d;
    if (!pageId || !recordMap)
        return null;
    var id = (0,_uuid_to_id__WEBPACK_IMPORTED_MODULE_0__.uuidToId)(pageId);
    var block = (_b = recordMap.block[pageId]) === null || _b === void 0 ? void 0 : _b.value;
    if (block) {
        var title = normalizeTitle((0,_get_block_title__WEBPACK_IMPORTED_MODULE_1__.getBlockTitle)(block, recordMap));
        if (title) {
            if (uuid) {
                return title + "-" + id;
            }
            else {
                return title;
            }
        }
    }
    return id;
};
var normalizeTitle = function (title) {
    return (title || '')
        .replace(/ /g, '-')
        .replace(/[^a-zA-Z0-9-]/g, '')
        .replace(/--/g, '-')
        .replace(/-$/, '')
        .replace(/^-/, '')
        .trim()
        .toLowerCase();
};
//# sourceMappingURL=get-canonical-page-id.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/get-date-value.js":
/*!***************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/get-date-value.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getDateValue": function() { return /* binding */ getDateValue; }
/* harmony export */ });
/**
 * Attempts to find a valid date from a given property.
 */
var getDateValue = function (prop) {
    if (prop && Array.isArray(prop)) {
        if (prop[0] === 'd') {
            return prop[1];
        }
        else {
            for (var _i = 0, prop_1 = prop; _i < prop_1.length; _i++) {
                var v = prop_1[_i];
                var value = getDateValue(v);
                if (value) {
                    return value;
                }
            }
        }
    }
    return null;
};
//# sourceMappingURL=get-date-value.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/get-page-content-block-ids.js":
/*!***************************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/get-page-content-block-ids.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPageContentBlockIds": function() { return /* binding */ getPageContentBlockIds; }
/* harmony export */ });
/**
 * Gets the IDs of all blocks contained on a page starting from a root block ID.
 */
var getPageContentBlockIds = function (recordMap, blockId) {
    var _a, _b, _c;
    var rootBlockId = blockId || Object.keys(recordMap.block)[0];
    var contentBlockIds = new Set();
    function addContentBlocks(blockId) {
        var _a;
        if (contentBlockIds.has(blockId))
            return;
        contentBlockIds.add(blockId);
        var block = (_a = recordMap.block[blockId]) === null || _a === void 0 ? void 0 : _a.value;
        if (!block)
            return;
        var content = block.content, type = block.type;
        if (!content)
            return;
        if (type === 'page' && blockId !== rootBlockId) {
            // ignore subpages
            return;
        }
        for (var _i = 0, content_1 = content; _i < content_1.length; _i++) {
            var blockId_1 = content_1[_i];
            addContentBlocks(blockId_1);
        }
    }
    addContentBlocks(rootBlockId);
    for (var _i = 0, _d = Object.keys(recordMap.block); _i < _d.length; _i++) {
        var blockId_2 = _d[_i];
        var block = (_a = recordMap.block[blockId_2]) === null || _a === void 0 ? void 0 : _a.value;
        if (!block)
            continue;
        var properties = block.properties;
        if (properties) {
            // TODO: this needs some love, especially for resolving relation properties
            // see this collection_view_page for an example: 8a586d253f984b85b48254da84465d23
            for (var _e = 0, _f = Object.keys(properties); _e < _f.length; _e++) {
                var key = _f[_e];
                var p = properties[key];
                p.map(function (d) {
                    var _a, _b;
                    var value = (_b = (_a = d === null || d === void 0 ? void 0 : d[0]) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b[0];
                    if ((value === null || value === void 0 ? void 0 : value[0]) === 'p' && value[1]) {
                        contentBlockIds.add(value[1]);
                    }
                });
                // [["‣", [["p", "841918aa-f2a3-4d4c-b5ad-64b0f57c47b8"]]]]
                var value = (_c = (_b = p === null || p === void 0 ? void 0 : p[0]) === null || _b === void 0 ? void 0 : _b[1]) === null || _c === void 0 ? void 0 : _c[0];
                if ((value === null || value === void 0 ? void 0 : value[0]) === 'p' && value[1]) {
                    contentBlockIds.add(value[1]);
                }
            }
        }
    }
    return Array.from(contentBlockIds);
};
//# sourceMappingURL=get-page-content-block-ids.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/get-page-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/get-page-property.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPageProperty": function() { return /* binding */ getPageProperty; }
/* harmony export */ });
/* harmony import */ var _get_text_content__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-text-content */ "./node_modules/notion-utils/build/esm/get-text-content.js");

/**
 * Gets the value of a collection property for a given page (collection item).
 *
 * TODO: handle non-text property types.
 */
function getPageProperty(propertyName, block, recordMap) {
    var _a;
    if (!block.properties) {
        // TODO: check parent page?
        return null;
    }
    var collection = (_a = recordMap.collection[block.parent_id]) === null || _a === void 0 ? void 0 : _a.value;
    if (collection) {
        var propertyId = Object.keys(collection.schema).find(function (key) { var _a; return ((_a = collection.schema[key]) === null || _a === void 0 ? void 0 : _a.name) === propertyName; });
        if (propertyId) {
            return (0,_get_text_content__WEBPACK_IMPORTED_MODULE_0__.getTextContent)(block.properties[propertyId]);
        }
    }
    return null;
}
//# sourceMappingURL=get-page-property.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/get-page-table-of-contents.js":
/*!***************************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/get-page-table-of-contents.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPageTableOfContents": function() { return /* binding */ getPageTableOfContents; }
/* harmony export */ });
/* harmony import */ var _get_text_content__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-text-content */ "./node_modules/notion-utils/build/esm/get-text-content.js");

var indentLevels = {
    header: 0,
    sub_header: 1,
    sub_sub_header: 2
};
/**
 * Gets the metadata for a table of contents block by parsing the page's
 * H1, H2, and H3 elements.
 */
var getPageTableOfContents = function (page, recordMap) {
    var _a;
    var toc = ((_a = page.content) !== null && _a !== void 0 ? _a : [])
        .map(function (blockId) {
        var _a, _b;
        var block = (_a = recordMap.block[blockId]) === null || _a === void 0 ? void 0 : _a.value;
        if (block) {
            var type = block.type;
            if (type === 'header' ||
                type === 'sub_header' ||
                type === 'sub_sub_header') {
                return {
                    id: blockId,
                    type: type,
                    text: (0,_get_text_content__WEBPACK_IMPORTED_MODULE_0__.getTextContent)((_b = block.properties) === null || _b === void 0 ? void 0 : _b.title),
                    indentLevel: indentLevels[type]
                };
            }
        }
        return null;
    })
        .filter(Boolean);
    var indentLevelStack = [
        {
            actual: -1,
            effective: -1
        }
    ];
    // Adjust indent levels to always change smoothly.
    // This is a little tricky, but the key is that when increasing indent levels,
    // they should never jump more than one at a time.
    for (var _i = 0, toc_1 = toc; _i < toc_1.length; _i++) {
        var tocItem = toc_1[_i];
        var indentLevel = tocItem.indentLevel;
        var actual = indentLevel;
        do {
            var prevIndent = indentLevelStack[indentLevelStack.length - 1];
            var prevActual = prevIndent.actual, prevEffective = prevIndent.effective;
            if (actual > prevActual) {
                tocItem.indentLevel = prevEffective + 1;
                indentLevelStack.push({
                    actual: actual,
                    effective: tocItem.indentLevel
                });
            }
            else if (actual === prevActual) {
                tocItem.indentLevel = prevEffective;
                break;
            }
            else {
                indentLevelStack.pop();
            }
        } while (true);
    }
    return toc;
};
//# sourceMappingURL=get-page-table-of-contents.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/get-page-title.js":
/*!***************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/get-page-title.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPageTitle": function() { return /* binding */ getPageTitle; }
/* harmony export */ });
/* harmony import */ var _get_block_title__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-block-title */ "./node_modules/notion-utils/build/esm/get-block-title.js");

function getPageTitle(recordMap) {
    var _a;
    var pageBlock = (_a = recordMap.block[Object.keys(recordMap.block)[0]]) === null || _a === void 0 ? void 0 : _a.value;
    if (pageBlock) {
        return (0,_get_block_title__WEBPACK_IMPORTED_MODULE_0__.getBlockTitle)(pageBlock, recordMap);
    }
    return null;
}
//# sourceMappingURL=get-page-title.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/get-text-content.js":
/*!*****************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/get-text-content.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getTextContent": function() { return /* binding */ getTextContent; }
/* harmony export */ });
/**
 * Gets the raw, unformatted text content of a block's content value.
 *
 * This is useful, for instance, for extracting a block's `title` without any
 * rich text formatting.
 */
var getTextContent = function (text) {
    var _a;
    if (!text) {
        return '';
    }
    else if (Array.isArray(text)) {
        return ((_a = text === null || text === void 0 ? void 0 : text.reduce(function (prev, current) {
            return prev + (current[0] !== '⁍' && current[0] !== '‣' ? current[0] : '');
        }, '')) !== null && _a !== void 0 ? _a : '');
    }
    else {
        return text;
    }
};
//# sourceMappingURL=get-text-content.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/id-to-uuid.js":
/*!***********************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/id-to-uuid.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "idToUuid": function() { return /* binding */ idToUuid; }
/* harmony export */ });
var idToUuid = function (id) {
    if (id === void 0) { id = ''; }
    return id.substr(0, 8) + "-" + id.substr(8, 4) + "-" + id.substr(12, 4) + "-" + id.substr(16, 4) + "-" + id.substr(20);
};
//# sourceMappingURL=id-to-uuid.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _get_text_content__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-text-content */ "./node_modules/notion-utils/build/esm/get-text-content.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_text_content__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_text_content__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _get_block_title__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./get-block-title */ "./node_modules/notion-utils/build/esm/get-block-title.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_block_title__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_block_title__WEBPACK_IMPORTED_MODULE_1__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _get_block_icon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./get-block-icon */ "./node_modules/notion-utils/build/esm/get-block-icon.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_block_icon__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_block_icon__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _get_page_title__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./get-page-title */ "./node_modules/notion-utils/build/esm/get-page-title.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_page_title__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_page_title__WEBPACK_IMPORTED_MODULE_3__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _get_page_property__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./get-page-property */ "./node_modules/notion-utils/build/esm/get-page-property.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_page_property__WEBPACK_IMPORTED_MODULE_4__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_page_property__WEBPACK_IMPORTED_MODULE_4__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _get_date_value__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./get-date-value */ "./node_modules/notion-utils/build/esm/get-date-value.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_date_value__WEBPACK_IMPORTED_MODULE_5__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_date_value__WEBPACK_IMPORTED_MODULE_5__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _get_block_parent_page__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./get-block-parent-page */ "./node_modules/notion-utils/build/esm/get-block-parent-page.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_block_parent_page__WEBPACK_IMPORTED_MODULE_6__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_block_parent_page__WEBPACK_IMPORTED_MODULE_6__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _get_page_table_of_contents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./get-page-table-of-contents */ "./node_modules/notion-utils/build/esm/get-page-table-of-contents.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_page_table_of_contents__WEBPACK_IMPORTED_MODULE_7__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_page_table_of_contents__WEBPACK_IMPORTED_MODULE_7__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _get_page_content_block_ids__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./get-page-content-block-ids */ "./node_modules/notion-utils/build/esm/get-page-content-block-ids.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_page_content_block_ids__WEBPACK_IMPORTED_MODULE_8__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_page_content_block_ids__WEBPACK_IMPORTED_MODULE_8__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _parse_page_id__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parse-page-id */ "./node_modules/notion-utils/build/esm/parse-page-id.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _parse_page_id__WEBPACK_IMPORTED_MODULE_9__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _parse_page_id__WEBPACK_IMPORTED_MODULE_9__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _id_to_uuid__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./id-to-uuid */ "./node_modules/notion-utils/build/esm/id-to-uuid.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _id_to_uuid__WEBPACK_IMPORTED_MODULE_10__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _id_to_uuid__WEBPACK_IMPORTED_MODULE_10__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _uuid_to_id__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./uuid-to-id */ "./node_modules/notion-utils/build/esm/uuid-to-id.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _uuid_to_id__WEBPACK_IMPORTED_MODULE_11__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _uuid_to_id__WEBPACK_IMPORTED_MODULE_11__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _get_all_pages_in_space__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./get-all-pages-in-space */ "./node_modules/notion-utils/build/esm/get-all-pages-in-space.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_all_pages_in_space__WEBPACK_IMPORTED_MODULE_12__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_all_pages_in_space__WEBPACK_IMPORTED_MODULE_12__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _get_canonical_page_id__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./get-canonical-page-id */ "./node_modules/notion-utils/build/esm/get-canonical-page-id.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_canonical_page_id__WEBPACK_IMPORTED_MODULE_13__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_canonical_page_id__WEBPACK_IMPORTED_MODULE_13__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);














//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/parse-page-id.js":
/*!**************************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/parse-page-id.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parsePageId": function() { return /* binding */ parsePageId; }
/* harmony export */ });
/* harmony import */ var _id_to_uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./id-to-uuid */ "./node_modules/notion-utils/build/esm/id-to-uuid.js");

var pageIdRe = /\b([a-f0-9]{32})\b/;
var pageId2Re = /\b([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})\b/;
/**
 * Robustly extracts the notion page ID from a notion URL or pathname suffix.
 *
 * Defaults to returning a UUID (with dashes).
 */
var parsePageId = function (id, _a) {
    if (id === void 0) { id = ''; }
    var _b = _a === void 0 ? {} : _a, _c = _b.uuid, uuid = _c === void 0 ? true : _c;
    if (!id) {
        return null;
    }
    id = id.split('?')[0];
    var match = id.match(pageIdRe);
    if (match) {
        return uuid ? (0,_id_to_uuid__WEBPACK_IMPORTED_MODULE_0__.idToUuid)(match[1]) : match[1];
    }
    var match2 = id.match(pageId2Re);
    if (match2) {
        return uuid ? match2[1] : match2[1].replace(/-/g, '');
    }
    return null;
};
//# sourceMappingURL=parse-page-id.js.map

/***/ }),

/***/ "./node_modules/notion-utils/build/esm/uuid-to-id.js":
/*!***********************************************************!*\
  !*** ./node_modules/notion-utils/build/esm/uuid-to-id.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "uuidToId": function() { return /* binding */ uuidToId; }
/* harmony export */ });
var uuidToId = function (uuid) { return uuid.replace(/-/g, ''); };
//# sourceMappingURL=uuid-to-id.js.map

/***/ }),

/***/ "./node_modules/p-finally/index.js":
/*!*****************************************!*\
  !*** ./node_modules/p-finally/index.js ***!
  \*****************************************/
/***/ (function(module) {

"use strict";

module.exports = (promise, onFinally) => {
	onFinally = onFinally || (() => {});

	return promise.then(
		val => new Promise(resolve => {
			resolve(onFinally());
		}).then(() => val),
		err => new Promise(resolve => {
			resolve(onFinally());
		}).then(() => {
			throw err;
		})
	);
};


/***/ }),

/***/ "./node_modules/p-queue/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/p-queue/dist/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const EventEmitter = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");
const p_timeout_1 = __webpack_require__(/*! p-timeout */ "./node_modules/p-timeout/index.js");
const priority_queue_1 = __webpack_require__(/*! ./priority-queue */ "./node_modules/p-queue/dist/priority-queue.js");
// eslint-disable-next-line @typescript-eslint/no-empty-function
const empty = () => { };
const timeoutError = new p_timeout_1.TimeoutError();
/**
Promise queue with concurrency control.
*/
class PQueue extends EventEmitter {
    constructor(options) {
        var _a, _b, _c, _d;
        super();
        this._intervalCount = 0;
        this._intervalEnd = 0;
        this._pendingCount = 0;
        this._resolveEmpty = empty;
        this._resolveIdle = empty;
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        options = Object.assign({ carryoverConcurrencyCount: false, intervalCap: Infinity, interval: 0, concurrency: Infinity, autoStart: true, queueClass: priority_queue_1.default }, options);
        if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {
            throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''}\` (${typeof options.intervalCap})`);
        }
        if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {
            throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''}\` (${typeof options.interval})`);
        }
        this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
        this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
        this._intervalCap = options.intervalCap;
        this._interval = options.interval;
        this._queue = new options.queueClass();
        this._queueClass = options.queueClass;
        this.concurrency = options.concurrency;
        this._timeout = options.timeout;
        this._throwOnTimeout = options.throwOnTimeout === true;
        this._isPaused = options.autoStart === false;
    }
    get _doesIntervalAllowAnother() {
        return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
    }
    get _doesConcurrentAllowAnother() {
        return this._pendingCount < this._concurrency;
    }
    _next() {
        this._pendingCount--;
        this._tryToStartAnother();
        this.emit('next');
    }
    _resolvePromises() {
        this._resolveEmpty();
        this._resolveEmpty = empty;
        if (this._pendingCount === 0) {
            this._resolveIdle();
            this._resolveIdle = empty;
            this.emit('idle');
        }
    }
    _onResumeInterval() {
        this._onInterval();
        this._initializeIntervalIfNeeded();
        this._timeoutId = undefined;
    }
    _isIntervalPaused() {
        const now = Date.now();
        if (this._intervalId === undefined) {
            const delay = this._intervalEnd - now;
            if (delay < 0) {
                // Act as the interval was done
                // We don't need to resume it here because it will be resumed on line 160
                this._intervalCount = (this._carryoverConcurrencyCount) ? this._pendingCount : 0;
            }
            else {
                // Act as the interval is pending
                if (this._timeoutId === undefined) {
                    this._timeoutId = setTimeout(() => {
                        this._onResumeInterval();
                    }, delay);
                }
                return true;
            }
        }
        return false;
    }
    _tryToStartAnother() {
        if (this._queue.size === 0) {
            // We can clear the interval ("pause")
            // Because we can redo it later ("resume")
            if (this._intervalId) {
                clearInterval(this._intervalId);
            }
            this._intervalId = undefined;
            this._resolvePromises();
            return false;
        }
        if (!this._isPaused) {
            const canInitializeInterval = !this._isIntervalPaused();
            if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
                const job = this._queue.dequeue();
                if (!job) {
                    return false;
                }
                this.emit('active');
                job();
                if (canInitializeInterval) {
                    this._initializeIntervalIfNeeded();
                }
                return true;
            }
        }
        return false;
    }
    _initializeIntervalIfNeeded() {
        if (this._isIntervalIgnored || this._intervalId !== undefined) {
            return;
        }
        this._intervalId = setInterval(() => {
            this._onInterval();
        }, this._interval);
        this._intervalEnd = Date.now() + this._interval;
    }
    _onInterval() {
        if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
            clearInterval(this._intervalId);
            this._intervalId = undefined;
        }
        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
        this._processQueue();
    }
    /**
    Executes all queued functions until it reaches the limit.
    */
    _processQueue() {
        // eslint-disable-next-line no-empty
        while (this._tryToStartAnother()) { }
    }
    get concurrency() {
        return this._concurrency;
    }
    set concurrency(newConcurrency) {
        if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {
            throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
        }
        this._concurrency = newConcurrency;
        this._processQueue();
    }
    /**
    Adds a sync or async task to the queue. Always returns a promise.
    */
    async add(fn, options = {}) {
        return new Promise((resolve, reject) => {
            const run = async () => {
                this._pendingCount++;
                this._intervalCount++;
                try {
                    const operation = (this._timeout === undefined && options.timeout === undefined) ? fn() : p_timeout_1.default(Promise.resolve(fn()), (options.timeout === undefined ? this._timeout : options.timeout), () => {
                        if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) {
                            reject(timeoutError);
                        }
                        return undefined;
                    });
                    resolve(await operation);
                }
                catch (error) {
                    reject(error);
                }
                this._next();
            };
            this._queue.enqueue(run, options);
            this._tryToStartAnother();
            this.emit('add');
        });
    }
    /**
    Same as `.add()`, but accepts an array of sync or async functions.

    @returns A promise that resolves when all functions are resolved.
    */
    async addAll(functions, options) {
        return Promise.all(functions.map(async (function_) => this.add(function_, options)));
    }
    /**
    Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)
    */
    start() {
        if (!this._isPaused) {
            return this;
        }
        this._isPaused = false;
        this._processQueue();
        return this;
    }
    /**
    Put queue execution on hold.
    */
    pause() {
        this._isPaused = true;
    }
    /**
    Clear the queue.
    */
    clear() {
        this._queue = new this._queueClass();
    }
    /**
    Can be called multiple times. Useful if you for example add additional items at a later time.

    @returns A promise that settles when the queue becomes empty.
    */
    async onEmpty() {
        // Instantly resolve if the queue is empty
        if (this._queue.size === 0) {
            return;
        }
        return new Promise(resolve => {
            const existingResolve = this._resolveEmpty;
            this._resolveEmpty = () => {
                existingResolve();
                resolve();
            };
        });
    }
    /**
    The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.

    @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.
    */
    async onIdle() {
        // Instantly resolve if none pending and if nothing else is queued
        if (this._pendingCount === 0 && this._queue.size === 0) {
            return;
        }
        return new Promise(resolve => {
            const existingResolve = this._resolveIdle;
            this._resolveIdle = () => {
                existingResolve();
                resolve();
            };
        });
    }
    /**
    Size of the queue.
    */
    get size() {
        return this._queue.size;
    }
    /**
    Size of the queue, filtered by the given options.

    For example, this can be used to find the number of items remaining in the queue with a specific priority level.
    */
    sizeBy(options) {
        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator
        return this._queue.filter(options).length;
    }
    /**
    Number of pending promises.
    */
    get pending() {
        return this._pendingCount;
    }
    /**
    Whether the queue is currently paused.
    */
    get isPaused() {
        return this._isPaused;
    }
    get timeout() {
        return this._timeout;
    }
    /**
    Set the timeout for future operations.
    */
    set timeout(milliseconds) {
        this._timeout = milliseconds;
    }
}
exports.default = PQueue;


/***/ }),

/***/ "./node_modules/p-queue/dist/lower-bound.js":
/*!**************************************************!*\
  !*** ./node_modules/p-queue/dist/lower-bound.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound
// Used to compute insertion index to keep queue sorted after insertion
function lowerBound(array, value, comparator) {
    let first = 0;
    let count = array.length;
    while (count > 0) {
        const step = (count / 2) | 0;
        let it = first + step;
        if (comparator(array[it], value) <= 0) {
            first = ++it;
            count -= step + 1;
        }
        else {
            count = step;
        }
    }
    return first;
}
exports.default = lowerBound;


/***/ }),

/***/ "./node_modules/p-queue/dist/priority-queue.js":
/*!*****************************************************!*\
  !*** ./node_modules/p-queue/dist/priority-queue.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const lower_bound_1 = __webpack_require__(/*! ./lower-bound */ "./node_modules/p-queue/dist/lower-bound.js");
class PriorityQueue {
    constructor() {
        this._queue = [];
    }
    enqueue(run, options) {
        options = Object.assign({ priority: 0 }, options);
        const element = {
            priority: options.priority,
            run
        };
        if (this.size && this._queue[this.size - 1].priority >= options.priority) {
            this._queue.push(element);
            return;
        }
        const index = lower_bound_1.default(this._queue, element, (a, b) => b.priority - a.priority);
        this._queue.splice(index, 0, element);
    }
    dequeue() {
        const item = this._queue.shift();
        return item === null || item === void 0 ? void 0 : item.run;
    }
    filter(options) {
        return this._queue.filter((element) => element.priority === options.priority).map((element) => element.run);
    }
    get size() {
        return this._queue.length;
    }
}
exports.default = PriorityQueue;


/***/ }),

/***/ "./node_modules/p-timeout/index.js":
/*!*****************************************!*\
  !*** ./node_modules/p-timeout/index.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


const pFinally = __webpack_require__(/*! p-finally */ "./node_modules/p-finally/index.js");

class TimeoutError extends Error {
	constructor(message) {
		super(message);
		this.name = 'TimeoutError';
	}
}

const pTimeout = (promise, milliseconds, fallback) => new Promise((resolve, reject) => {
	if (typeof milliseconds !== 'number' || milliseconds < 0) {
		throw new TypeError('Expected `milliseconds` to be a positive number');
	}

	if (milliseconds === Infinity) {
		resolve(promise);
		return;
	}

	const timer = setTimeout(() => {
		if (typeof fallback === 'function') {
			try {
				resolve(fallback());
			} catch (error) {
				reject(error);
			}

			return;
		}

		const message = typeof fallback === 'string' ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
		const timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);

		if (typeof promise.cancel === 'function') {
			promise.cancel();
		}

		reject(timeoutError);
	}, milliseconds);

	// TODO: Use native `finally` keyword when targeting Node.js 10
	pFinally(
		// eslint-disable-next-line promise/prefer-await-to-then
		promise.then(resolve, reject),
		() => {
			clearTimeout(timer);
		}
	);
});

module.exports = pTimeout;
// TODO: Remove this for the next major release
module.exports.default = pTimeout;

module.exports.TimeoutError = TimeoutError;


/***/ }),

/***/ "./node_modules/prismjs/components/prism-bash.js":
/*!*******************************************************!*\
  !*** ./node_modules/prismjs/components/prism-bash.js ***!
  \*******************************************************/
/***/ (function() {

(function (Prism) {
	// $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\n' '|'
	// + LC_ALL, RANDOM, REPLY, SECONDS.
	// + make sure PS1..4 are here as they are not always set,
	// - some useless things.
	var envVars = '\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b';

	var commandAfterHeredoc = {
		pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
		lookbehind: true,
		alias: 'punctuation', // this looks reasonably well in all themes
		inside: null // see below
	};

	var insideString = {
		'bash': commandAfterHeredoc,
		'environment': {
			pattern: RegExp('\\$' + envVars),
			alias: 'constant'
		},
		'variable': [
			// [0]: Arithmetic Environment
			{
				pattern: /\$?\(\([\s\S]+?\)\)/,
				greedy: true,
				inside: {
					// If there is a $ sign at the beginning highlight $(( and )) as variable
					'variable': [
						{
							pattern: /(^\$\(\([\s\S]+)\)\)/,
							lookbehind: true
						},
						/^\$\(\(/
					],
					'number': /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
					// Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
					'operator': /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
					// If there is no $ sign at the beginning highlight (( and )) as punctuation
					'punctuation': /\(\(?|\)\)?|,|;/
				}
			},
			// [1]: Command Substitution
			{
				pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
				greedy: true,
				inside: {
					'variable': /^\$\(|^`|\)$|`$/
				}
			},
			// [2]: Brace expansion
			{
				pattern: /\$\{[^}]+\}/,
				greedy: true,
				inside: {
					'operator': /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
					'punctuation': /[\[\]]/,
					'environment': {
						pattern: RegExp('(\\{)' + envVars),
						lookbehind: true,
						alias: 'constant'
					}
				}
			},
			/\$(?:\w+|[#?*!@$])/
		],
		// Escape sequences from echo and printf's manuals, and escaped quotes.
		'entity': /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/
	};

	Prism.languages.bash = {
		'shebang': {
			pattern: /^#!\s*\/.*/,
			alias: 'important'
		},
		'comment': {
			pattern: /(^|[^"{\\$])#.*/,
			lookbehind: true
		},
		'function-name': [
			// a) function foo {
			// b) foo() {
			// c) function foo() {
			// but not “foo {”
			{
				// a) and c)
				pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
				lookbehind: true,
				alias: 'function'
			},
			{
				// b)
				pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
				alias: 'function'
			}
		],
		// Highlight variable names as variables in for and select beginnings.
		'for-or-select': {
			pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
			alias: 'variable',
			lookbehind: true
		},
		// Highlight variable names as variables in the left-hand part
		// of assignments (“=” and “+=”).
		'assign-left': {
			pattern: /(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,
			inside: {
				'environment': {
					pattern: RegExp('(^|[\\s;|&]|[<>]\\()' + envVars),
					lookbehind: true,
					alias: 'constant'
				}
			},
			alias: 'variable',
			lookbehind: true
		},
		'string': [
			// Support for Here-documents https://en.wikipedia.org/wiki/Here_document
			{
				pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
				lookbehind: true,
				greedy: true,
				inside: insideString
			},
			// Here-document with quotes around the tag
			// → No expansion (so no “inside”).
			{
				pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
				lookbehind: true,
				greedy: true,
				inside: {
					'bash': commandAfterHeredoc
				}
			},
			// “Normal” string
			{
				// https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html
				pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
				lookbehind: true,
				greedy: true,
				inside: insideString
			},
			{
				// https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html
				pattern: /(^|[^$\\])'[^']*'/,
				lookbehind: true,
				greedy: true
			},
			{
				// https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
				pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
				greedy: true,
				inside: {
					'entity': insideString.entity
				}
			}
		],
		'environment': {
			pattern: RegExp('\\$?' + envVars),
			alias: 'constant'
		},
		'variable': insideString.variable,
		'function': {
			pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
			lookbehind: true
		},
		'keyword': {
			pattern: /(^|[\s;|&]|[<>]\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\s;|&])/,
			lookbehind: true
		},
		// https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
		'builtin': {
			pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\s;|&])/,
			lookbehind: true,
			// Alias added to make those easier to distinguish from strings.
			alias: 'class-name'
		},
		'boolean': {
			pattern: /(^|[\s;|&]|[<>]\()(?:true|false)(?=$|[)\s;|&])/,
			lookbehind: true
		},
		'file-descriptor': {
			pattern: /\B&\d\b/,
			alias: 'important'
		},
		'operator': {
			// Lots of redirections here, but not just that.
			pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
			inside: {
				'file-descriptor': {
					pattern: /^\d/,
					alias: 'important'
				}
			}
		},
		'punctuation': /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
		'number': {
			pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
			lookbehind: true
		}
	};

	commandAfterHeredoc.inside = Prism.languages.bash;

	/* Patterns in command substitution. */
	var toBeCopied = [
		'comment',
		'function-name',
		'for-or-select',
		'assign-left',
		'string',
		'environment',
		'function',
		'keyword',
		'builtin',
		'boolean',
		'file-descriptor',
		'operator',
		'punctuation',
		'number'
	];
	var inside = insideString.variable[1].inside;
	for (var i = 0; i < toBeCopied.length; i++) {
		inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];
	}

	Prism.languages.shell = Prism.languages.bash;
}(Prism));


/***/ }),

/***/ "./node_modules/prismjs/components/prism-javascript.js":
/*!*************************************************************!*\
  !*** ./node_modules/prismjs/components/prism-javascript.js ***!
  \*************************************************************/
/***/ (function() {

Prism.languages.javascript = Prism.languages.extend('clike', {
	'class-name': [
		Prism.languages.clike['class-name'],
		{
			pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:prototype|constructor))/,
			lookbehind: true
		}
	],
	'keyword': [
		{
			pattern: /((?:^|\})\s*)catch\b/,
			lookbehind: true
		},
		{
			pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
			lookbehind: true
		},
	],
	// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
	'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
	'number': /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,
	'operator': /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
});

Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;

Prism.languages.insertBefore('javascript', 'keyword', {
	'regex': {
		// eslint-disable-next-line regexp/no-dupe-characters-character-class
		pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
		lookbehind: true,
		greedy: true,
		inside: {
			'regex-source': {
				pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
				lookbehind: true,
				alias: 'language-regex',
				inside: Prism.languages.regex
			},
			'regex-delimiter': /^\/|\/$/,
			'regex-flags': /^[a-z]+$/,
		}
	},
	// This must be declared before keyword because we use "function" inside the look-forward
	'function-variable': {
		pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
		alias: 'function'
	},
	'parameter': [
		{
			pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
			lookbehind: true,
			inside: Prism.languages.javascript
		}
	],
	'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
});

Prism.languages.insertBefore('javascript', 'string', {
	'hashbang': {
		pattern: /^#!.*/,
		greedy: true,
		alias: 'comment'
	},
	'template-string': {
		pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
		greedy: true,
		inside: {
			'template-punctuation': {
				pattern: /^`|`$/,
				alias: 'string'
			},
			'interpolation': {
				pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
				lookbehind: true,
				inside: {
					'interpolation-punctuation': {
						pattern: /^\$\{|\}$/,
						alias: 'punctuation'
					},
					rest: Prism.languages.javascript
				}
			},
			'string': /[\s\S]+/
		}
	}
});

if (Prism.languages.markup) {
	Prism.languages.markup.tag.addInlined('script', 'javascript');

	// add attribute support for all DOM events.
	// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
	Prism.languages.markup.tag.addAttribute(
		/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,
		'javascript'
	);
}

Prism.languages.js = Prism.languages.javascript;


/***/ }),

/***/ "./node_modules/prismjs/components/prism-markup.js":
/*!*********************************************************!*\
  !*** ./node_modules/prismjs/components/prism-markup.js ***!
  \*********************************************************/
/***/ (function() {

Prism.languages.markup = {
	'comment': {
		pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
		greedy: true
	},
	'prolog': {
		pattern: /<\?[\s\S]+?\?>/,
		greedy: true
	},
	'doctype': {
		// https://www.w3.org/TR/xml/#NT-doctypedecl
		pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
		greedy: true,
		inside: {
			'internal-subset': {
				pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
				lookbehind: true,
				greedy: true,
				inside: null // see below
			},
			'string': {
				pattern: /"[^"]*"|'[^']*'/,
				greedy: true
			},
			'punctuation': /^<!|>$|[[\]]/,
			'doctype-tag': /^DOCTYPE/i,
			'name': /[^\s<>'"]+/
		}
	},
	'cdata': {
		pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
		greedy: true
	},
	'tag': {
		pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
		greedy: true,
		inside: {
			'tag': {
				pattern: /^<\/?[^\s>\/]+/,
				inside: {
					'punctuation': /^<\/?/,
					'namespace': /^[^\s>\/:]+:/
				}
			},
			'special-attr': [],
			'attr-value': {
				pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
				inside: {
					'punctuation': [
						{
							pattern: /^=/,
							alias: 'attr-equals'
						},
						/"|'/
					]
				}
			},
			'punctuation': /\/?>/,
			'attr-name': {
				pattern: /[^\s>\/]+/,
				inside: {
					'namespace': /^[^\s>\/:]+:/
				}
			}

		}
	},
	'entity': [
		{
			pattern: /&[\da-z]{1,8};/i,
			alias: 'named-entity'
		},
		/&#x?[\da-f]{1,8};/i
	]
};

Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =
	Prism.languages.markup['entity'];
Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function (env) {

	if (env.type === 'entity') {
		env.attributes['title'] = env.content.replace(/&amp;/, '&');
	}
});

Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
	/**
	 * Adds an inlined language to markup.
	 *
	 * An example of an inlined language is CSS with `<style>` tags.
	 *
	 * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
	 * case insensitive.
	 * @param {string} lang The language key.
	 * @example
	 * addInlined('style', 'css');
	 */
	value: function addInlined(tagName, lang) {
		var includedCdataInside = {};
		includedCdataInside['language-' + lang] = {
			pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
			lookbehind: true,
			inside: Prism.languages[lang]
		};
		includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;

		var inside = {
			'included-cdata': {
				pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
				inside: includedCdataInside
			}
		};
		inside['language-' + lang] = {
			pattern: /[\s\S]+/,
			inside: Prism.languages[lang]
		};

		var def = {};
		def[tagName] = {
			pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),
			lookbehind: true,
			greedy: true,
			inside: inside
		};

		Prism.languages.insertBefore('markup', 'cdata', def);
	}
});
Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
	/**
	 * Adds an pattern to highlight languages embedded in HTML attributes.
	 *
	 * An example of an inlined language is CSS with `style` attributes.
	 *
	 * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
	 * case insensitive.
	 * @param {string} lang The language key.
	 * @example
	 * addAttribute('style', 'css');
	 */
	value: function (attrName, lang) {
		Prism.languages.markup.tag.inside['special-attr'].push({
			pattern: RegExp(
				/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
				'i'
			),
			lookbehind: true,
			inside: {
				'attr-name': /^[^\s=]+/,
				'attr-value': {
					pattern: /=[\s\S]+/,
					inside: {
						'value': {
							pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
							lookbehind: true,
							alias: [lang, 'language-' + lang],
							inside: Prism.languages[lang]
						},
						'punctuation': [
							{
								pattern: /^=/,
								alias: 'attr-equals'
							},
							/"|'/
						]
					}
				}
			}
		});
	}
});

Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;

Prism.languages.xml = Prism.languages.extend('markup', {});
Prism.languages.ssml = Prism.languages.xml;
Prism.languages.atom = Prism.languages.xml;
Prism.languages.rss = Prism.languages.xml;


/***/ }),

/***/ "./node_modules/prismjs/components/prism-typescript.js":
/*!*************************************************************!*\
  !*** ./node_modules/prismjs/components/prism-typescript.js ***!
  \*************************************************************/
/***/ (function() {

(function (Prism) {

	Prism.languages.typescript = Prism.languages.extend('javascript', {
		'class-name': {
			pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
			lookbehind: true,
			greedy: true,
			inside: null // see below
		},
		'builtin': /\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/,
	});

	// The keywords TypeScript adds to JavaScript
	Prism.languages.typescript.keyword.push(
		/\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\b/,
		// keywords that have to be followed by an identifier
		/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,
		// This is for `import type *, {}`
		/\btype\b(?=\s*(?:[\{*]|$))/
	);

	// doesn't work with TS because TS is too complex
	delete Prism.languages.typescript['parameter'];

	// a version of typescript specifically for highlighting types
	var typeInside = Prism.languages.extend('typescript', {});
	delete typeInside['class-name'];

	Prism.languages.typescript['class-name'].inside = typeInside;

	Prism.languages.insertBefore('typescript', 'function', {
		'decorator': {
			pattern: /@[$\w\xA0-\uFFFF]+/,
			inside: {
				'at': {
					pattern: /^@/,
					alias: 'operator'
				},
				'function': /^[\s\S]+/
			}
		},
		'generic-function': {
			// e.g. foo<T extends "bar" | "baz">( ...
			pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
			greedy: true,
			inside: {
				'function': /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
				'generic': {
					pattern: /<[\s\S]+/, // everything after the first <
					alias: 'class-name',
					inside: typeInside
				}
			}
		}
	});

	Prism.languages.ts = Prism.languages.typescript;

}(Prism));


/***/ }),

/***/ "./node_modules/prismjs/prism.js":
/*!***************************************!*\
  !*** ./node_modules/prismjs/prism.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {


/* **********************************************
     Begin prism-core.js
********************************************** */

/// <reference lib="WebWorker"/>

var _self = (typeof window !== 'undefined')
	? window   // if in browser
	: (
		(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)
			? self // if in worker
			: {}   // if in node js
	);

/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 *
 * @license MIT <https://opensource.org/licenses/MIT>
 * @author Lea Verou <https://lea.verou.me>
 * @namespace
 * @public
 */
var Prism = (function (_self) {

	// Private helper vars
	var lang = /\blang(?:uage)?-([\w-]+)\b/i;
	var uniqueId = 0;

	// The grammar object for plaintext
	var plainTextGrammar = {};


	var _ = {
		/**
		 * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
		 * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
		 * additional languages or plugins yourself.
		 *
		 * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
		 *
		 * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
		 * empty Prism object into the global scope before loading the Prism script like this:
		 *
		 * ```js
		 * window.Prism = window.Prism || {};
		 * Prism.manual = true;
		 * // add a new <script> to load Prism's script
		 * ```
		 *
		 * @default false
		 * @type {boolean}
		 * @memberof Prism
		 * @public
		 */
		manual: _self.Prism && _self.Prism.manual,
		disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,

		/**
		 * A namespace for utility methods.
		 *
		 * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
		 * change or disappear at any time.
		 *
		 * @namespace
		 * @memberof Prism
		 */
		util: {
			encode: function encode(tokens) {
				if (tokens instanceof Token) {
					return new Token(tokens.type, encode(tokens.content), tokens.alias);
				} else if (Array.isArray(tokens)) {
					return tokens.map(encode);
				} else {
					return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
				}
			},

			/**
			 * Returns the name of the type of the given value.
			 *
			 * @param {any} o
			 * @returns {string}
			 * @example
			 * type(null)      === 'Null'
			 * type(undefined) === 'Undefined'
			 * type(123)       === 'Number'
			 * type('foo')     === 'String'
			 * type(true)      === 'Boolean'
			 * type([1, 2])    === 'Array'
			 * type({})        === 'Object'
			 * type(String)    === 'Function'
			 * type(/abc+/)    === 'RegExp'
			 */
			type: function (o) {
				return Object.prototype.toString.call(o).slice(8, -1);
			},

			/**
			 * Returns a unique number for the given object. Later calls will still return the same number.
			 *
			 * @param {Object} obj
			 * @returns {number}
			 */
			objId: function (obj) {
				if (!obj['__id']) {
					Object.defineProperty(obj, '__id', { value: ++uniqueId });
				}
				return obj['__id'];
			},

			/**
			 * Creates a deep clone of the given object.
			 *
			 * The main intended use of this function is to clone language definitions.
			 *
			 * @param {T} o
			 * @param {Record<number, any>} [visited]
			 * @returns {T}
			 * @template T
			 */
			clone: function deepClone(o, visited) {
				visited = visited || {};

				var clone; var id;
				switch (_.util.type(o)) {
					case 'Object':
						id = _.util.objId(o);
						if (visited[id]) {
							return visited[id];
						}
						clone = /** @type {Record<string, any>} */ ({});
						visited[id] = clone;

						for (var key in o) {
							if (o.hasOwnProperty(key)) {
								clone[key] = deepClone(o[key], visited);
							}
						}

						return /** @type {any} */ (clone);

					case 'Array':
						id = _.util.objId(o);
						if (visited[id]) {
							return visited[id];
						}
						clone = [];
						visited[id] = clone;

						(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {
							clone[i] = deepClone(v, visited);
						});

						return /** @type {any} */ (clone);

					default:
						return o;
				}
			},

			/**
			 * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
			 *
			 * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
			 *
			 * @param {Element} element
			 * @returns {string}
			 */
			getLanguage: function (element) {
				while (element && !lang.test(element.className)) {
					element = element.parentElement;
				}
				if (element) {
					return (element.className.match(lang) || [, 'none'])[1].toLowerCase();
				}
				return 'none';
			},

			/**
			 * Returns the script element that is currently executing.
			 *
			 * This does __not__ work for line script element.
			 *
			 * @returns {HTMLScriptElement | null}
			 */
			currentScript: function () {
				if (typeof document === 'undefined') {
					return null;
				}
				if ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {
					return /** @type {any} */ (document.currentScript);
				}

				// IE11 workaround
				// we'll get the src of the current script by parsing IE11's error stack trace
				// this will not work for inline scripts

				try {
					throw new Error();
				} catch (err) {
					// Get file src url from stack. Specifically works with the format of stack traces in IE.
					// A stack will look like this:
					//
					// Error
					//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)
					//    at Global code (http://localhost/components/prism-core.js:606:1)

					var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
					if (src) {
						var scripts = document.getElementsByTagName('script');
						for (var i in scripts) {
							if (scripts[i].src == src) {
								return scripts[i];
							}
						}
					}
					return null;
				}
			},

			/**
			 * Returns whether a given class is active for `element`.
			 *
			 * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
			 * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
			 * given class is just the given class with a `no-` prefix.
			 *
			 * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
			 * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
			 * ancestors have the given class or the negated version of it, then the default activation will be returned.
			 *
			 * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
			 * version of it, the class is considered active.
			 *
			 * @param {Element} element
			 * @param {string} className
			 * @param {boolean} [defaultActivation=false]
			 * @returns {boolean}
			 */
			isActive: function (element, className, defaultActivation) {
				var no = 'no-' + className;

				while (element) {
					var classList = element.classList;
					if (classList.contains(className)) {
						return true;
					}
					if (classList.contains(no)) {
						return false;
					}
					element = element.parentElement;
				}
				return !!defaultActivation;
			}
		},

		/**
		 * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
		 *
		 * @namespace
		 * @memberof Prism
		 * @public
		 */
		languages: {
			/**
			 * The grammar for plain, unformatted text.
			 */
			plain: plainTextGrammar,
			plaintext: plainTextGrammar,
			text: plainTextGrammar,
			txt: plainTextGrammar,

			/**
			 * Creates a deep copy of the language with the given id and appends the given tokens.
			 *
			 * If a token in `redef` also appears in the copied language, then the existing token in the copied language
			 * will be overwritten at its original position.
			 *
			 * ## Best practices
			 *
			 * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
			 * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
			 * understand the language definition because, normally, the order of tokens matters in Prism grammars.
			 *
			 * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
			 * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
			 *
			 * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
			 * @param {Grammar} redef The new tokens to append.
			 * @returns {Grammar} The new language created.
			 * @public
			 * @example
			 * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
			 *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
			 *     // at its original position
			 *     'comment': { ... },
			 *     // CSS doesn't have a 'color' token, so this token will be appended
			 *     'color': /\b(?:red|green|blue)\b/
			 * });
			 */
			extend: function (id, redef) {
				var lang = _.util.clone(_.languages[id]);

				for (var key in redef) {
					lang[key] = redef[key];
				}

				return lang;
			},

			/**
			 * Inserts tokens _before_ another token in a language definition or any other grammar.
			 *
			 * ## Usage
			 *
			 * This helper method makes it easy to modify existing languages. For example, the CSS language definition
			 * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
			 * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
			 * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
			 * this:
			 *
			 * ```js
			 * Prism.languages.markup.style = {
			 *     // token
			 * };
			 * ```
			 *
			 * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
			 * before existing tokens. For the CSS example above, you would use it like this:
			 *
			 * ```js
			 * Prism.languages.insertBefore('markup', 'cdata', {
			 *     'style': {
			 *         // token
			 *     }
			 * });
			 * ```
			 *
			 * ## Special cases
			 *
			 * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
			 * will be ignored.
			 *
			 * This behavior can be used to insert tokens after `before`:
			 *
			 * ```js
			 * Prism.languages.insertBefore('markup', 'comment', {
			 *     'comment': Prism.languages.markup.comment,
			 *     // tokens after 'comment'
			 * });
			 * ```
			 *
			 * ## Limitations
			 *
			 * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
			 * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
			 * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
			 * deleting properties which is necessary to insert at arbitrary positions.
			 *
			 * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
			 * Instead, it will create a new object and replace all references to the target object with the new one. This
			 * can be done without temporarily deleting properties, so the iteration order is well-defined.
			 *
			 * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
			 * you hold the target object in a variable, then the value of the variable will not change.
			 *
			 * ```js
			 * var oldMarkup = Prism.languages.markup;
			 * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
			 *
			 * assert(oldMarkup !== Prism.languages.markup);
			 * assert(newMarkup === Prism.languages.markup);
			 * ```
			 *
			 * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
			 * object to be modified.
			 * @param {string} before The key to insert before.
			 * @param {Grammar} insert An object containing the key-value pairs to be inserted.
			 * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
			 * object to be modified.
			 *
			 * Defaults to `Prism.languages`.
			 * @returns {Grammar} The new grammar object.
			 * @public
			 */
			insertBefore: function (inside, before, insert, root) {
				root = root || /** @type {any} */ (_.languages);
				var grammar = root[inside];
				/** @type {Grammar} */
				var ret = {};

				for (var token in grammar) {
					if (grammar.hasOwnProperty(token)) {

						if (token == before) {
							for (var newToken in insert) {
								if (insert.hasOwnProperty(newToken)) {
									ret[newToken] = insert[newToken];
								}
							}
						}

						// Do not insert token which also occur in insert. See #1525
						if (!insert.hasOwnProperty(token)) {
							ret[token] = grammar[token];
						}
					}
				}

				var old = root[inside];
				root[inside] = ret;

				// Update references in other language definitions
				_.languages.DFS(_.languages, function (key, value) {
					if (value === old && key != inside) {
						this[key] = ret;
					}
				});

				return ret;
			},

			// Traverse a language definition with Depth First Search
			DFS: function DFS(o, callback, type, visited) {
				visited = visited || {};

				var objId = _.util.objId;

				for (var i in o) {
					if (o.hasOwnProperty(i)) {
						callback.call(o, i, o[i], type || i);

						var property = o[i];
						var propertyType = _.util.type(property);

						if (propertyType === 'Object' && !visited[objId(property)]) {
							visited[objId(property)] = true;
							DFS(property, callback, null, visited);
						} else if (propertyType === 'Array' && !visited[objId(property)]) {
							visited[objId(property)] = true;
							DFS(property, callback, i, visited);
						}
					}
				}
			}
		},

		plugins: {},

		/**
		 * This is the most high-level function in Prism’s API.
		 * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
		 * each one of them.
		 *
		 * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
		 *
		 * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
		 * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
		 * @memberof Prism
		 * @public
		 */
		highlightAll: function (async, callback) {
			_.highlightAllUnder(document, async, callback);
		},

		/**
		 * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
		 * {@link Prism.highlightElement} on each one of them.
		 *
		 * The following hooks will be run:
		 * 1. `before-highlightall`
		 * 2. `before-all-elements-highlight`
		 * 3. All hooks of {@link Prism.highlightElement} for each element.
		 *
		 * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
		 * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
		 * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
		 * @memberof Prism
		 * @public
		 */
		highlightAllUnder: function (container, async, callback) {
			var env = {
				callback: callback,
				container: container,
				selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
			};

			_.hooks.run('before-highlightall', env);

			env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));

			_.hooks.run('before-all-elements-highlight', env);

			for (var i = 0, element; (element = env.elements[i++]);) {
				_.highlightElement(element, async === true, env.callback);
			}
		},

		/**
		 * Highlights the code inside a single element.
		 *
		 * The following hooks will be run:
		 * 1. `before-sanity-check`
		 * 2. `before-highlight`
		 * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
		 * 4. `before-insert`
		 * 5. `after-highlight`
		 * 6. `complete`
		 *
		 * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
		 * the element's language.
		 *
		 * @param {Element} element The element containing the code.
		 * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
		 * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
		 * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
		 * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
		 *
		 * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
		 * asynchronous highlighting to work. You can build your own bundle on the
		 * [Download page](https://prismjs.com/download.html).
		 * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
		 * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
		 * @memberof Prism
		 * @public
		 */
		highlightElement: function (element, async, callback) {
			// Find language
			var language = _.util.getLanguage(element);
			var grammar = _.languages[language];

			// Set language on the element, if not present
			element.className = element.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;

			// Set language on the parent, for styling
			var parent = element.parentElement;
			if (parent && parent.nodeName.toLowerCase() === 'pre') {
				parent.className = parent.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;
			}

			var code = element.textContent;

			var env = {
				element: element,
				language: language,
				grammar: grammar,
				code: code
			};

			function insertHighlightedCode(highlightedCode) {
				env.highlightedCode = highlightedCode;

				_.hooks.run('before-insert', env);

				env.element.innerHTML = env.highlightedCode;

				_.hooks.run('after-highlight', env);
				_.hooks.run('complete', env);
				callback && callback.call(env.element);
			}

			_.hooks.run('before-sanity-check', env);

			// plugins may change/add the parent/element
			parent = env.element.parentElement;
			if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {
				parent.setAttribute('tabindex', '0');
			}

			if (!env.code) {
				_.hooks.run('complete', env);
				callback && callback.call(env.element);
				return;
			}

			_.hooks.run('before-highlight', env);

			if (!env.grammar) {
				insertHighlightedCode(_.util.encode(env.code));
				return;
			}

			if (async && _self.Worker) {
				var worker = new Worker(_.filename);

				worker.onmessage = function (evt) {
					insertHighlightedCode(evt.data);
				};

				worker.postMessage(JSON.stringify({
					language: env.language,
					code: env.code,
					immediateClose: true
				}));
			} else {
				insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
			}
		},

		/**
		 * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
		 * and the language definitions to use, and returns a string with the HTML produced.
		 *
		 * The following hooks will be run:
		 * 1. `before-tokenize`
		 * 2. `after-tokenize`
		 * 3. `wrap`: On each {@link Token}.
		 *
		 * @param {string} text A string with the code to be highlighted.
		 * @param {Grammar} grammar An object containing the tokens to use.
		 *
		 * Usually a language definition like `Prism.languages.markup`.
		 * @param {string} language The name of the language definition passed to `grammar`.
		 * @returns {string} The highlighted HTML.
		 * @memberof Prism
		 * @public
		 * @example
		 * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
		 */
		highlight: function (text, grammar, language) {
			var env = {
				code: text,
				grammar: grammar,
				language: language
			};
			_.hooks.run('before-tokenize', env);
			env.tokens = _.tokenize(env.code, env.grammar);
			_.hooks.run('after-tokenize', env);
			return Token.stringify(_.util.encode(env.tokens), env.language);
		},

		/**
		 * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
		 * and the language definitions to use, and returns an array with the tokenized code.
		 *
		 * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
		 *
		 * This method could be useful in other contexts as well, as a very crude parser.
		 *
		 * @param {string} text A string with the code to be highlighted.
		 * @param {Grammar} grammar An object containing the tokens to use.
		 *
		 * Usually a language definition like `Prism.languages.markup`.
		 * @returns {TokenStream} An array of strings and tokens, a token stream.
		 * @memberof Prism
		 * @public
		 * @example
		 * let code = `var foo = 0;`;
		 * let tokens = Prism.tokenize(code, Prism.languages.javascript);
		 * tokens.forEach(token => {
		 *     if (token instanceof Prism.Token && token.type === 'number') {
		 *         console.log(`Found numeric literal: ${token.content}`);
		 *     }
		 * });
		 */
		tokenize: function (text, grammar) {
			var rest = grammar.rest;
			if (rest) {
				for (var token in rest) {
					grammar[token] = rest[token];
				}

				delete grammar.rest;
			}

			var tokenList = new LinkedList();
			addAfter(tokenList, tokenList.head, text);

			matchGrammar(text, tokenList, grammar, tokenList.head, 0);

			return toArray(tokenList);
		},

		/**
		 * @namespace
		 * @memberof Prism
		 * @public
		 */
		hooks: {
			all: {},

			/**
			 * Adds the given callback to the list of callbacks for the given hook.
			 *
			 * The callback will be invoked when the hook it is registered for is run.
			 * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
			 *
			 * One callback function can be registered to multiple hooks and the same hook multiple times.
			 *
			 * @param {string} name The name of the hook.
			 * @param {HookCallback} callback The callback function which is given environment variables.
			 * @public
			 */
			add: function (name, callback) {
				var hooks = _.hooks.all;

				hooks[name] = hooks[name] || [];

				hooks[name].push(callback);
			},

			/**
			 * Runs a hook invoking all registered callbacks with the given environment variables.
			 *
			 * Callbacks will be invoked synchronously and in the order in which they were registered.
			 *
			 * @param {string} name The name of the hook.
			 * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
			 * @public
			 */
			run: function (name, env) {
				var callbacks = _.hooks.all[name];

				if (!callbacks || !callbacks.length) {
					return;
				}

				for (var i = 0, callback; (callback = callbacks[i++]);) {
					callback(env);
				}
			}
		},

		Token: Token
	};
	_self.Prism = _;


	// Typescript note:
	// The following can be used to import the Token type in JSDoc:
	//
	//   @typedef {InstanceType<import("./prism-core")["Token"]>} Token

	/**
	 * Creates a new token.
	 *
	 * @param {string} type See {@link Token#type type}
	 * @param {string | TokenStream} content See {@link Token#content content}
	 * @param {string|string[]} [alias] The alias(es) of the token.
	 * @param {string} [matchedStr=""] A copy of the full string this token was created from.
	 * @class
	 * @global
	 * @public
	 */
	function Token(type, content, alias, matchedStr) {
		/**
		 * The type of the token.
		 *
		 * This is usually the key of a pattern in a {@link Grammar}.
		 *
		 * @type {string}
		 * @see GrammarToken
		 * @public
		 */
		this.type = type;
		/**
		 * The strings or tokens contained by this token.
		 *
		 * This will be a token stream if the pattern matched also defined an `inside` grammar.
		 *
		 * @type {string | TokenStream}
		 * @public
		 */
		this.content = content;
		/**
		 * The alias(es) of the token.
		 *
		 * @type {string|string[]}
		 * @see GrammarToken
		 * @public
		 */
		this.alias = alias;
		// Copy of the full string this token was created from
		this.length = (matchedStr || '').length | 0;
	}

	/**
	 * A token stream is an array of strings and {@link Token Token} objects.
	 *
	 * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process
	 * them.
	 *
	 * 1. No adjacent strings.
	 * 2. No empty strings.
	 *
	 *    The only exception here is the token stream that only contains the empty string and nothing else.
	 *
	 * @typedef {Array<string | Token>} TokenStream
	 * @global
	 * @public
	 */

	/**
	 * Converts the given token or token stream to an HTML representation.
	 *
	 * The following hooks will be run:
	 * 1. `wrap`: On each {@link Token}.
	 *
	 * @param {string | Token | TokenStream} o The token or token stream to be converted.
	 * @param {string} language The name of current language.
	 * @returns {string} The HTML representation of the token or token stream.
	 * @memberof Token
	 * @static
	 */
	Token.stringify = function stringify(o, language) {
		if (typeof o == 'string') {
			return o;
		}
		if (Array.isArray(o)) {
			var s = '';
			o.forEach(function (e) {
				s += stringify(e, language);
			});
			return s;
		}

		var env = {
			type: o.type,
			content: stringify(o.content, language),
			tag: 'span',
			classes: ['token', o.type],
			attributes: {},
			language: language
		};

		var aliases = o.alias;
		if (aliases) {
			if (Array.isArray(aliases)) {
				Array.prototype.push.apply(env.classes, aliases);
			} else {
				env.classes.push(aliases);
			}
		}

		_.hooks.run('wrap', env);

		var attributes = '';
		for (var name in env.attributes) {
			attributes += ' ' + name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
		}

		return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + attributes + '>' + env.content + '</' + env.tag + '>';
	};

	/**
	 * @param {RegExp} pattern
	 * @param {number} pos
	 * @param {string} text
	 * @param {boolean} lookbehind
	 * @returns {RegExpExecArray | null}
	 */
	function matchPattern(pattern, pos, text, lookbehind) {
		pattern.lastIndex = pos;
		var match = pattern.exec(text);
		if (match && lookbehind && match[1]) {
			// change the match to remove the text matched by the Prism lookbehind group
			var lookbehindLength = match[1].length;
			match.index += lookbehindLength;
			match[0] = match[0].slice(lookbehindLength);
		}
		return match;
	}

	/**
	 * @param {string} text
	 * @param {LinkedList<string | Token>} tokenList
	 * @param {any} grammar
	 * @param {LinkedListNode<string | Token>} startNode
	 * @param {number} startPos
	 * @param {RematchOptions} [rematch]
	 * @returns {void}
	 * @private
	 *
	 * @typedef RematchOptions
	 * @property {string} cause
	 * @property {number} reach
	 */
	function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
		for (var token in grammar) {
			if (!grammar.hasOwnProperty(token) || !grammar[token]) {
				continue;
			}

			var patterns = grammar[token];
			patterns = Array.isArray(patterns) ? patterns : [patterns];

			for (var j = 0; j < patterns.length; ++j) {
				if (rematch && rematch.cause == token + ',' + j) {
					return;
				}

				var patternObj = patterns[j];
				var inside = patternObj.inside;
				var lookbehind = !!patternObj.lookbehind;
				var greedy = !!patternObj.greedy;
				var alias = patternObj.alias;

				if (greedy && !patternObj.pattern.global) {
					// Without the global flag, lastIndex won't work
					var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
					patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');
				}

				/** @type {RegExp} */
				var pattern = patternObj.pattern || patternObj;

				for ( // iterate the token list and keep track of the current token/string position
					var currentNode = startNode.next, pos = startPos;
					currentNode !== tokenList.tail;
					pos += currentNode.value.length, currentNode = currentNode.next
				) {

					if (rematch && pos >= rematch.reach) {
						break;
					}

					var str = currentNode.value;

					if (tokenList.length > text.length) {
						// Something went terribly wrong, ABORT, ABORT!
						return;
					}

					if (str instanceof Token) {
						continue;
					}

					var removeCount = 1; // this is the to parameter of removeBetween
					var match;

					if (greedy) {
						match = matchPattern(pattern, pos, text, lookbehind);
						if (!match) {
							break;
						}

						var from = match.index;
						var to = match.index + match[0].length;
						var p = pos;

						// find the node that contains the match
						p += currentNode.value.length;
						while (from >= p) {
							currentNode = currentNode.next;
							p += currentNode.value.length;
						}
						// adjust pos (and p)
						p -= currentNode.value.length;
						pos = p;

						// the current node is a Token, then the match starts inside another Token, which is invalid
						if (currentNode.value instanceof Token) {
							continue;
						}

						// find the last node which is affected by this match
						for (
							var k = currentNode;
							k !== tokenList.tail && (p < to || typeof k.value === 'string');
							k = k.next
						) {
							removeCount++;
							p += k.value.length;
						}
						removeCount--;

						// replace with the new match
						str = text.slice(pos, p);
						match.index -= pos;
					} else {
						match = matchPattern(pattern, 0, str, lookbehind);
						if (!match) {
							continue;
						}
					}

					// eslint-disable-next-line no-redeclare
					var from = match.index;
					var matchStr = match[0];
					var before = str.slice(0, from);
					var after = str.slice(from + matchStr.length);

					var reach = pos + str.length;
					if (rematch && reach > rematch.reach) {
						rematch.reach = reach;
					}

					var removeFrom = currentNode.prev;

					if (before) {
						removeFrom = addAfter(tokenList, removeFrom, before);
						pos += before.length;
					}

					removeRange(tokenList, removeFrom, removeCount);

					var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);
					currentNode = addAfter(tokenList, removeFrom, wrapped);

					if (after) {
						addAfter(tokenList, currentNode, after);
					}

					if (removeCount > 1) {
						// at least one Token object was removed, so we have to do some rematching
						// this can only happen if the current pattern is greedy

						/** @type {RematchOptions} */
						var nestedRematch = {
							cause: token + ',' + j,
							reach: reach
						};
						matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);

						// the reach might have been extended because of the rematching
						if (rematch && nestedRematch.reach > rematch.reach) {
							rematch.reach = nestedRematch.reach;
						}
					}
				}
			}
		}
	}

	/**
	 * @typedef LinkedListNode
	 * @property {T} value
	 * @property {LinkedListNode<T> | null} prev The previous node.
	 * @property {LinkedListNode<T> | null} next The next node.
	 * @template T
	 * @private
	 */

	/**
	 * @template T
	 * @private
	 */
	function LinkedList() {
		/** @type {LinkedListNode<T>} */
		var head = { value: null, prev: null, next: null };
		/** @type {LinkedListNode<T>} */
		var tail = { value: null, prev: head, next: null };
		head.next = tail;

		/** @type {LinkedListNode<T>} */
		this.head = head;
		/** @type {LinkedListNode<T>} */
		this.tail = tail;
		this.length = 0;
	}

	/**
	 * Adds a new node with the given value to the list.
	 *
	 * @param {LinkedList<T>} list
	 * @param {LinkedListNode<T>} node
	 * @param {T} value
	 * @returns {LinkedListNode<T>} The added node.
	 * @template T
	 */
	function addAfter(list, node, value) {
		// assumes that node != list.tail && values.length >= 0
		var next = node.next;

		var newNode = { value: value, prev: node, next: next };
		node.next = newNode;
		next.prev = newNode;
		list.length++;

		return newNode;
	}
	/**
	 * Removes `count` nodes after the given node. The given node will not be removed.
	 *
	 * @param {LinkedList<T>} list
	 * @param {LinkedListNode<T>} node
	 * @param {number} count
	 * @template T
	 */
	function removeRange(list, node, count) {
		var next = node.next;
		for (var i = 0; i < count && next !== list.tail; i++) {
			next = next.next;
		}
		node.next = next;
		next.prev = node;
		list.length -= i;
	}
	/**
	 * @param {LinkedList<T>} list
	 * @returns {T[]}
	 * @template T
	 */
	function toArray(list) {
		var array = [];
		var node = list.head.next;
		while (node !== list.tail) {
			array.push(node.value);
			node = node.next;
		}
		return array;
	}


	if (!_self.document) {
		if (!_self.addEventListener) {
			// in Node.js
			return _;
		}

		if (!_.disableWorkerMessageHandler) {
			// In worker
			_self.addEventListener('message', function (evt) {
				var message = JSON.parse(evt.data);
				var lang = message.language;
				var code = message.code;
				var immediateClose = message.immediateClose;

				_self.postMessage(_.highlight(code, _.languages[lang], lang));
				if (immediateClose) {
					_self.close();
				}
			}, false);
		}

		return _;
	}

	// Get current script and highlight
	var script = _.util.currentScript();

	if (script) {
		_.filename = script.src;

		if (script.hasAttribute('data-manual')) {
			_.manual = true;
		}
	}

	function highlightAutomaticallyCallback() {
		if (!_.manual) {
			_.highlightAll();
		}
	}

	if (!_.manual) {
		// If the document state is "loading", then we'll use DOMContentLoaded.
		// If the document state is "interactive" and the prism.js script is deferred, then we'll also use the
		// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they
		// might take longer one animation frame to execute which can create a race condition where only some plugins have
		// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.
		// See https://github.com/PrismJS/prism/issues/2102
		var readyState = document.readyState;
		if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {
			document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);
		} else {
			if (window.requestAnimationFrame) {
				window.requestAnimationFrame(highlightAutomaticallyCallback);
			} else {
				window.setTimeout(highlightAutomaticallyCallback, 16);
			}
		}
	}

	return _;

}(_self));

if ( true && module.exports) {
	module.exports = Prism;
}

// hack for components to work correctly in node.js
if (typeof __webpack_require__.g !== 'undefined') {
	__webpack_require__.g.Prism = Prism;
}

// some additional documentation/types

/**
 * The expansion of a simple `RegExp` literal to support additional properties.
 *
 * @typedef GrammarToken
 * @property {RegExp} pattern The regular expression of the token.
 * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)
 * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.
 * @property {boolean} [greedy=false] Whether the token is greedy.
 * @property {string|string[]} [alias] An optional alias or list of aliases.
 * @property {Grammar} [inside] The nested grammar of this token.
 *
 * The `inside` grammar will be used to tokenize the text value of each token of this kind.
 *
 * This can be used to make nested and even recursive language definitions.
 *
 * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into
 * each another.
 * @global
 * @public
 */

/**
 * @typedef Grammar
 * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}
 * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.
 * @global
 * @public
 */

/**
 * A function which will invoked after an element was successfully highlighted.
 *
 * @callback HighlightCallback
 * @param {Element} element The element successfully highlighted.
 * @returns {void}
 * @global
 * @public
 */

/**
 * @callback HookCallback
 * @param {Object<string, any>} env The environment variables of the hook.
 * @returns {void}
 * @global
 * @public
 */


/* **********************************************
     Begin prism-markup.js
********************************************** */

Prism.languages.markup = {
	'comment': {
		pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
		greedy: true
	},
	'prolog': {
		pattern: /<\?[\s\S]+?\?>/,
		greedy: true
	},
	'doctype': {
		// https://www.w3.org/TR/xml/#NT-doctypedecl
		pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
		greedy: true,
		inside: {
			'internal-subset': {
				pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
				lookbehind: true,
				greedy: true,
				inside: null // see below
			},
			'string': {
				pattern: /"[^"]*"|'[^']*'/,
				greedy: true
			},
			'punctuation': /^<!|>$|[[\]]/,
			'doctype-tag': /^DOCTYPE/i,
			'name': /[^\s<>'"]+/
		}
	},
	'cdata': {
		pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
		greedy: true
	},
	'tag': {
		pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
		greedy: true,
		inside: {
			'tag': {
				pattern: /^<\/?[^\s>\/]+/,
				inside: {
					'punctuation': /^<\/?/,
					'namespace': /^[^\s>\/:]+:/
				}
			},
			'special-attr': [],
			'attr-value': {
				pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
				inside: {
					'punctuation': [
						{
							pattern: /^=/,
							alias: 'attr-equals'
						},
						/"|'/
					]
				}
			},
			'punctuation': /\/?>/,
			'attr-name': {
				pattern: /[^\s>\/]+/,
				inside: {
					'namespace': /^[^\s>\/:]+:/
				}
			}

		}
	},
	'entity': [
		{
			pattern: /&[\da-z]{1,8};/i,
			alias: 'named-entity'
		},
		/&#x?[\da-f]{1,8};/i
	]
};

Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =
	Prism.languages.markup['entity'];
Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function (env) {

	if (env.type === 'entity') {
		env.attributes['title'] = env.content.replace(/&amp;/, '&');
	}
});

Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
	/**
	 * Adds an inlined language to markup.
	 *
	 * An example of an inlined language is CSS with `<style>` tags.
	 *
	 * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
	 * case insensitive.
	 * @param {string} lang The language key.
	 * @example
	 * addInlined('style', 'css');
	 */
	value: function addInlined(tagName, lang) {
		var includedCdataInside = {};
		includedCdataInside['language-' + lang] = {
			pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
			lookbehind: true,
			inside: Prism.languages[lang]
		};
		includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;

		var inside = {
			'included-cdata': {
				pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
				inside: includedCdataInside
			}
		};
		inside['language-' + lang] = {
			pattern: /[\s\S]+/,
			inside: Prism.languages[lang]
		};

		var def = {};
		def[tagName] = {
			pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),
			lookbehind: true,
			greedy: true,
			inside: inside
		};

		Prism.languages.insertBefore('markup', 'cdata', def);
	}
});
Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
	/**
	 * Adds an pattern to highlight languages embedded in HTML attributes.
	 *
	 * An example of an inlined language is CSS with `style` attributes.
	 *
	 * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
	 * case insensitive.
	 * @param {string} lang The language key.
	 * @example
	 * addAttribute('style', 'css');
	 */
	value: function (attrName, lang) {
		Prism.languages.markup.tag.inside['special-attr'].push({
			pattern: RegExp(
				/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
				'i'
			),
			lookbehind: true,
			inside: {
				'attr-name': /^[^\s=]+/,
				'attr-value': {
					pattern: /=[\s\S]+/,
					inside: {
						'value': {
							pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
							lookbehind: true,
							alias: [lang, 'language-' + lang],
							inside: Prism.languages[lang]
						},
						'punctuation': [
							{
								pattern: /^=/,
								alias: 'attr-equals'
							},
							/"|'/
						]
					}
				}
			}
		});
	}
});

Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;

Prism.languages.xml = Prism.languages.extend('markup', {});
Prism.languages.ssml = Prism.languages.xml;
Prism.languages.atom = Prism.languages.xml;
Prism.languages.rss = Prism.languages.xml;


/* **********************************************
     Begin prism-css.js
********************************************** */

(function (Prism) {

	var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;

	Prism.languages.css = {
		'comment': /\/\*[\s\S]*?\*\//,
		'atrule': {
			pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
			inside: {
				'rule': /^@[\w-]+/,
				'selector-function-argument': {
					pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
					lookbehind: true,
					alias: 'selector'
				},
				'keyword': {
					pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
					lookbehind: true
				}
				// See rest below
			}
		},
		'url': {
			// https://drafts.csswg.org/css-values-3/#urls
			pattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),
			greedy: true,
			inside: {
				'function': /^url/i,
				'punctuation': /^\(|\)$/,
				'string': {
					pattern: RegExp('^' + string.source + '$'),
					alias: 'url'
				}
			}
		},
		'selector': {
			pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),
			lookbehind: true
		},
		'string': {
			pattern: string,
			greedy: true
		},
		'property': {
			pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
			lookbehind: true
		},
		'important': /!important\b/i,
		'function': {
			pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
			lookbehind: true
		},
		'punctuation': /[(){};:,]/
	};

	Prism.languages.css['atrule'].inside.rest = Prism.languages.css;

	var markup = Prism.languages.markup;
	if (markup) {
		markup.tag.addInlined('style', 'css');
		markup.tag.addAttribute('style', 'css');
	}

}(Prism));


/* **********************************************
     Begin prism-clike.js
********************************************** */

Prism.languages.clike = {
	'comment': [
		{
			pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
			lookbehind: true,
			greedy: true
		},
		{
			pattern: /(^|[^\\:])\/\/.*/,
			lookbehind: true,
			greedy: true
		}
	],
	'string': {
		pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
		greedy: true
	},
	'class-name': {
		pattern: /(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,
		lookbehind: true,
		inside: {
			'punctuation': /[.\\]/
		}
	},
	'keyword': /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
	'boolean': /\b(?:true|false)\b/,
	'function': /\b\w+(?=\()/,
	'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
	'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
	'punctuation': /[{}[\];(),.:]/
};


/* **********************************************
     Begin prism-javascript.js
********************************************** */

Prism.languages.javascript = Prism.languages.extend('clike', {
	'class-name': [
		Prism.languages.clike['class-name'],
		{
			pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:prototype|constructor))/,
			lookbehind: true
		}
	],
	'keyword': [
		{
			pattern: /((?:^|\})\s*)catch\b/,
			lookbehind: true
		},
		{
			pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
			lookbehind: true
		},
	],
	// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
	'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
	'number': /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,
	'operator': /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
});

Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;

Prism.languages.insertBefore('javascript', 'keyword', {
	'regex': {
		// eslint-disable-next-line regexp/no-dupe-characters-character-class
		pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
		lookbehind: true,
		greedy: true,
		inside: {
			'regex-source': {
				pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
				lookbehind: true,
				alias: 'language-regex',
				inside: Prism.languages.regex
			},
			'regex-delimiter': /^\/|\/$/,
			'regex-flags': /^[a-z]+$/,
		}
	},
	// This must be declared before keyword because we use "function" inside the look-forward
	'function-variable': {
		pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
		alias: 'function'
	},
	'parameter': [
		{
			pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
			lookbehind: true,
			inside: Prism.languages.javascript
		},
		{
			pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
			lookbehind: true,
			inside: Prism.languages.javascript
		}
	],
	'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
});

Prism.languages.insertBefore('javascript', 'string', {
	'hashbang': {
		pattern: /^#!.*/,
		greedy: true,
		alias: 'comment'
	},
	'template-string': {
		pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
		greedy: true,
		inside: {
			'template-punctuation': {
				pattern: /^`|`$/,
				alias: 'string'
			},
			'interpolation': {
				pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
				lookbehind: true,
				inside: {
					'interpolation-punctuation': {
						pattern: /^\$\{|\}$/,
						alias: 'punctuation'
					},
					rest: Prism.languages.javascript
				}
			},
			'string': /[\s\S]+/
		}
	}
});

if (Prism.languages.markup) {
	Prism.languages.markup.tag.addInlined('script', 'javascript');

	// add attribute support for all DOM events.
	// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
	Prism.languages.markup.tag.addAttribute(
		/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,
		'javascript'
	);
}

Prism.languages.js = Prism.languages.javascript;


/* **********************************************
     Begin prism-file-highlight.js
********************************************** */

(function () {

	if (typeof Prism === 'undefined' || typeof document === 'undefined') {
		return;
	}

	// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
	if (!Element.prototype.matches) {
		Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
	}

	var LOADING_MESSAGE = 'Loading…';
	var FAILURE_MESSAGE = function (status, message) {
		return '✖ Error ' + status + ' while fetching file: ' + message;
	};
	var FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';

	var EXTENSIONS = {
		'js': 'javascript',
		'py': 'python',
		'rb': 'ruby',
		'ps1': 'powershell',
		'psm1': 'powershell',
		'sh': 'bash',
		'bat': 'batch',
		'h': 'c',
		'tex': 'latex'
	};

	var STATUS_ATTR = 'data-src-status';
	var STATUS_LOADING = 'loading';
	var STATUS_LOADED = 'loaded';
	var STATUS_FAILED = 'failed';

	var SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '="' + STATUS_LOADED + '"])'
		+ ':not([' + STATUS_ATTR + '="' + STATUS_LOADING + '"])';

	var lang = /\blang(?:uage)?-([\w-]+)\b/i;

	/**
	 * Sets the Prism `language-xxxx` or `lang-xxxx` class to the given language.
	 *
	 * @param {HTMLElement} element
	 * @param {string} language
	 * @returns {void}
	 */
	function setLanguageClass(element, language) {
		var className = element.className;
		className = className.replace(lang, ' ') + ' language-' + language;
		element.className = className.replace(/\s+/g, ' ').trim();
	}


	Prism.hooks.add('before-highlightall', function (env) {
		env.selector += ', ' + SELECTOR;
	});

	Prism.hooks.add('before-sanity-check', function (env) {
		var pre = /** @type {HTMLPreElement} */ (env.element);
		if (pre.matches(SELECTOR)) {
			env.code = ''; // fast-path the whole thing and go to complete

			pre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading

			// add code element with loading message
			var code = pre.appendChild(document.createElement('CODE'));
			code.textContent = LOADING_MESSAGE;

			var src = pre.getAttribute('data-src');

			var language = env.language;
			if (language === 'none') {
				// the language might be 'none' because there is no language set;
				// in this case, we want to use the extension as the language
				var extension = (/\.(\w+)$/.exec(src) || [, 'none'])[1];
				language = EXTENSIONS[extension] || extension;
			}

			// set language classes
			setLanguageClass(code, language);
			setLanguageClass(pre, language);

			// preload the language
			var autoloader = Prism.plugins.autoloader;
			if (autoloader) {
				autoloader.loadLanguages(language);
			}

			// load file
			var xhr = new XMLHttpRequest();
			xhr.open('GET', src, true);
			xhr.onreadystatechange = function () {
				if (xhr.readyState == 4) {
					if (xhr.status < 400 && xhr.responseText) {
						// mark as loaded
						pre.setAttribute(STATUS_ATTR, STATUS_LOADED);

						// highlight code
						code.textContent = xhr.responseText;
						Prism.highlightElement(code);

					} else {
						// mark as failed
						pre.setAttribute(STATUS_ATTR, STATUS_FAILED);

						if (xhr.status >= 400) {
							code.textContent = FAILURE_MESSAGE(xhr.status, xhr.statusText);
						} else {
							code.textContent = FAILURE_EMPTY_MESSAGE;
						}
					}
				}
			};
			xhr.send(null);
		}
	});

	Prism.plugins.fileHighlight = {
		/**
		 * Executes the File Highlight plugin for all matching `pre` elements under the given container.
		 *
		 * Note: Elements which are already loaded or currently loading will not be touched by this method.
		 *
		 * @param {ParentNode} [container=document]
		 */
		highlight: function highlight(container) {
			var elements = (container || document).querySelectorAll(SELECTOR);

			for (var i = 0, element; (element = elements[i++]);) {
				Prism.highlightElement(element);
			}
		}
	};

	var logged = false;
	/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */
	Prism.fileHighlight = function () {
		if (!logged) {
			console.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');
			logged = true;
		}
		Prism.plugins.fileHighlight.highlight.apply(this, arguments);
	};

}());


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ (function(module) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/** @license React v17.0.2
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var _assign = __webpack_require__(/*! object-assign */ "./node_modules/next/dist/build/polyfills/object-assign.js");

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
exports.Fragment = 0xeacb;
var REACT_STRICT_MODE_TYPE = 0xeacc;
var REACT_PROFILER_TYPE = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
var REACT_SUSPENSE_TYPE = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  exports.Fragment = symbolFor('react.fragment');
  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
  REACT_PROFILER_TYPE = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableScopeAPI = false; // Experimental Create Event Handle API.

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
      return true;
    }
  }

  return false;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getContextName(type) {
  return type.displayName || 'Context';
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case exports.Fragment:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentName(init(payload));
          } catch (x) {
            return null;
          }
        }
    }
  }

  return null;
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: _assign({}, props, {
          value: prevLog
        }),
        info: _assign({}, props, {
          value: prevInfo
        }),
        warn: _assign({}, props, {
          value: prevWarn
        }),
        error: _assign({}, props, {
          value: prevError
        }),
        group: _assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: _assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: _assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if (!fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_BLOCK_TYPE:
        return describeFunctionComponentFrame(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown;
var specialPropRefWarningShown;
var didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function warnIfStringRefCannotBeAutoConverted(config, self) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}

function defineKeyPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingKey = function () {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingKey.isReactWarning = true;
    Object.defineProperty(props, 'key', {
      get: warnAboutAccessingKey,
      configurable: true
    });
  }
}

function defineRefPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingRef = function () {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingRef.isReactWarning = true;
    Object.defineProperty(props, 'ref', {
      get: warnAboutAccessingRef,
      configurable: true
    });
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */

function jsxDEV(type, config, maybeKey, source, self) {
  {
    var propName; // Reserved names are extracted

    var props = {};
    var key = null;
    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
    // but as an intermediary step, we will use jsxDEV for everything except
    // <div {...props} key="Hi" />, because we aren't currently able to tell if
    // key is explicitly declared to be undefined or not.

    if (maybeKey !== undefined) {
      key = '' + maybeKey;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    if (hasValidRef(config)) {
      ref = config.ref;
      warnIfStringRefCannotBeAutoConverted(config, self);
    } // Remaining properties are added to a new props object


    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    } // Resolve default props


    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;

      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
    }

    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }

    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
  }
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
}

function getDeclarationErrorAddendum() {
  {
    if (ReactCurrentOwner$1.current) {
      var name = getComponentName(ReactCurrentOwner$1.current.type);

      if (name) {
        return '\n\nCheck the render method of `' + name + '`.';
      }
    }

    return '';
  }
}

function getSourceInfoErrorAddendum(source) {
  {
    if (source !== undefined) {
      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
      var lineNumber = source.lineNumber;
      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
    }

    return '';
  }
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  {
    var info = getDeclarationErrorAddendum();

    if (!info) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

      if (parentName) {
        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
      }
    }

    return info;
  }
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }

    element._store.validated = true;
    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
    // property, it may be the creator of the child that's responsible for
    // assigning it a key.

    var childOwner = '';

    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
      // Give the component that originally created this child.
      childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
    }

    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  {
    if (typeof node !== 'object') {
      return;
    }

    if (Array.isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];

        if (isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (isValidElement(node)) {
      // This element was passed in a valid location.
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn(node);

      if (typeof iteratorFn === 'function') {
        // Entry iterators used to provide implicit keys,
        // but now we print a separate warning for them later.
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;

          while (!(step = iterator.next()).done) {
            if (isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentName(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentName(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}

function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
  {
    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.

    if (!validType) {
      var info = '';

      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
      }

      var sourceInfo = getSourceInfoErrorAddendum(source);

      if (sourceInfo) {
        info += sourceInfo;
      } else {
        info += getDeclarationErrorAddendum();
      }

      var typeString;

      if (type === null) {
        typeString = 'null';
      } else if (Array.isArray(type)) {
        typeString = 'array';
      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
        typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
        info = ' Did you accidentally export a JSX literal instead of a component?';
      } else {
        typeString = typeof type;
      }

      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }

    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.

    if (element == null) {
      return element;
    } // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)


    if (validType) {
      var children = props.children;

      if (children !== undefined) {
        if (isStaticChildren) {
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              validateChildKeys(children[i], type);
            }

            if (Object.freeze) {
              Object.freeze(children);
            }
          } else {
            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
          }
        } else {
          validateChildKeys(children, type);
        }
      }
    }

    if (type === exports.Fragment) {
      validateFragmentProps(element);
    } else {
      validatePropTypes(element);
    }

    return element;
  }
} // These two functions exist to still get child warnings in dev

var jsxDEV$1 =  jsxWithValidation ;

exports.jsxDEV = jsxDEV$1;
  })();
}


/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js");
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _defineProperty; }
/* harmony export */ });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app!"), __webpack_exec__("./node_modules/next/dist/client/router.js"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,