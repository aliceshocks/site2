{"ast":null,"code":"import { imageCDNHost } from './config';\nexport var mapNotionImageUrl = function mapNotionImageUrl(url, block) {\n  if (!url) {\n    return null;\n  }\n\n  if (url.startsWith('data:')) {\n    return url;\n  }\n\n  if (imageCDNHost && url.startsWith(imageCDNHost)) {\n    return url;\n  } // const origUrl = url\n\n\n  if (url.startsWith('/images')) {\n    url = \"https://www.notion.so\".concat(url);\n  } // more recent versions of notion don't proxy unsplash images\n\n\n  if (!url.startsWith('https://images.unsplash.com')) {\n    url = \"https://www.notion.so\".concat(url.startsWith('/image') ? url : \"/image/\".concat(encodeURIComponent(url)));\n    var notionImageUrlV2 = new URL(url);\n    var table = block.parent_table === 'space' ? 'block' : block.parent_table;\n\n    if (table === 'collection') {\n      table = 'block';\n    }\n\n    notionImageUrlV2.searchParams.set('table', table);\n    notionImageUrlV2.searchParams.set('id', block.id);\n    notionImageUrlV2.searchParams.set('cache', 'v2');\n    url = notionImageUrlV2.toString();\n  } // console.log({ url, origUrl })\n\n\n  return mapImageUrl(url);\n};\nexport var mapImageUrl = function mapImageUrl(imageUrl) {\n  if (imageUrl.startsWith('data:')) {\n    return imageUrl;\n  }\n\n  if (imageCDNHost) {\n    // Our proxy uses Cloudflare's global CDN to cache these image assets\n    return \"\".concat(imageCDNHost, \"/\").concat(encodeURIComponent(imageUrl));\n  } else {\n    return imageUrl;\n  }\n};","map":{"version":3,"sources":["B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/lib/map-image-url.ts"],"names":["imageCDNHost","mapNotionImageUrl","url","block","startsWith","encodeURIComponent","notionImageUrlV2","URL","table","parent_table","searchParams","set","id","toString","mapImageUrl","imageUrl"],"mappings":"AACA,SAASA,YAAT,QAA6B,UAA7B;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,GAAD,EAAcC,KAAd,EAA+B;AAC9D,MAAI,CAACD,GAAL,EAAU;AACR,WAAO,IAAP;AACD;;AAED,MAAIA,GAAG,CAACE,UAAJ,CAAe,OAAf,CAAJ,EAA6B;AAC3B,WAAOF,GAAP;AACD;;AAED,MAAIF,YAAY,IAAIE,GAAG,CAACE,UAAJ,CAAeJ,YAAf,CAApB,EAAkD;AAChD,WAAOE,GAAP;AACD,GAX6D,CAa9D;;;AAEA,MAAIA,GAAG,CAACE,UAAJ,CAAe,SAAf,CAAJ,EAA+B;AAC7BF,IAAAA,GAAG,kCAA2BA,GAA3B,CAAH;AACD,GAjB6D,CAmB9D;;;AACA,MAAI,CAACA,GAAG,CAACE,UAAJ,CAAe,6BAAf,CAAL,EAAoD;AAClDF,IAAAA,GAAG,kCACDA,GAAG,CAACE,UAAJ,CAAe,QAAf,IAA2BF,GAA3B,oBAA2CG,kBAAkB,CAACH,GAAD,CAA7D,CADC,CAAH;AAIA,QAAMI,gBAAgB,GAAG,IAAIC,GAAJ,CAAQL,GAAR,CAAzB;AACA,QAAIM,KAAK,GAAGL,KAAK,CAACM,YAAN,KAAuB,OAAvB,GAAiC,OAAjC,GAA2CN,KAAK,CAACM,YAA7D;;AACA,QAAID,KAAK,KAAK,YAAd,EAA4B;AAC1BA,MAAAA,KAAK,GAAG,OAAR;AACD;;AACDF,IAAAA,gBAAgB,CAACI,YAAjB,CAA8BC,GAA9B,CAAkC,OAAlC,EAA2CH,KAA3C;AACAF,IAAAA,gBAAgB,CAACI,YAAjB,CAA8BC,GAA9B,CAAkC,IAAlC,EAAwCR,KAAK,CAACS,EAA9C;AACAN,IAAAA,gBAAgB,CAACI,YAAjB,CAA8BC,GAA9B,CAAkC,OAAlC,EAA2C,IAA3C;AAEAT,IAAAA,GAAG,GAAGI,gBAAgB,CAACO,QAAjB,EAAN;AACD,GAnC6D,CAqC9D;;;AACA,SAAOC,WAAW,CAACZ,GAAD,CAAlB;AACD,CAvCM;AAyCP,OAAO,IAAMY,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAsB;AAC/C,MAAIA,QAAQ,CAACX,UAAT,CAAoB,OAApB,CAAJ,EAAkC;AAChC,WAAOW,QAAP;AACD;;AAED,MAAIf,YAAJ,EAAkB;AAChB;AACA,qBAAUA,YAAV,cAA0BK,kBAAkB,CAACU,QAAD,CAA5C;AACD,GAHD,MAGO;AACL,WAAOA,QAAP;AACD;AACF,CAXM","sourcesContent":["import { Block } from 'notion-types'\r\nimport { imageCDNHost } from './config'\r\n\r\nexport const mapNotionImageUrl = (url: string, block: Block) => {\r\n  if (!url) {\r\n    return null\r\n  }\r\n\r\n  if (url.startsWith('data:')) {\r\n    return url\r\n  }\r\n\r\n  if (imageCDNHost && url.startsWith(imageCDNHost)) {\r\n    return url\r\n  }\r\n\r\n  // const origUrl = url\r\n\r\n  if (url.startsWith('/images')) {\r\n    url = `https://www.notion.so${url}`\r\n  }\r\n\r\n  // more recent versions of notion don't proxy unsplash images\r\n  if (!url.startsWith('https://images.unsplash.com')) {\r\n    url = `https://www.notion.so${\r\n      url.startsWith('/image') ? url : `/image/${encodeURIComponent(url)}`\r\n    }`\r\n\r\n    const notionImageUrlV2 = new URL(url)\r\n    let table = block.parent_table === 'space' ? 'block' : block.parent_table\r\n    if (table === 'collection') {\r\n      table = 'block'\r\n    }\r\n    notionImageUrlV2.searchParams.set('table', table)\r\n    notionImageUrlV2.searchParams.set('id', block.id)\r\n    notionImageUrlV2.searchParams.set('cache', 'v2')\r\n\r\n    url = notionImageUrlV2.toString()\r\n  }\r\n\r\n  // console.log({ url, origUrl })\r\n  return mapImageUrl(url)\r\n}\r\n\r\nexport const mapImageUrl = (imageUrl: string) => {\r\n  if (imageUrl.startsWith('data:')) {\r\n    return imageUrl\r\n  }\r\n\r\n  if (imageCDNHost) {\r\n    // Our proxy uses Cloudflare's global CDN to cache these image assets\r\n    return `${imageCDNHost}/${encodeURIComponent(imageUrl)}`\r\n  } else {\r\n    return imageUrl\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}