{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport crypto from 'crypto';\nimport got from 'got';\nimport pMap from 'p-map';\nimport { api, isPreviewImageSupportEnabled } from './config';\nimport * as db from './db';\n\nfunction sha256(input) {\n  const buffer = Buffer.isBuffer(input) ? input : Buffer.from(input);\n  return crypto.createHash('sha256').update(buffer).digest('hex');\n}\n\nexport async function getPreviewImages(images) {\n  if (!isPreviewImageSupportEnabled) {\n    return {};\n  }\n\n  const imageDocRefs = images.map(url => {\n    const id = sha256(url);\n    return db.images.doc(id);\n  });\n\n  if (!imageDocRefs.length) {\n    return {};\n  }\n\n  const imageDocs = await db.db.getAll(...imageDocRefs);\n  const results = await pMap(imageDocs, async (model, index) => {\n    if (model.exists) {\n      return model.data();\n    } else {\n      const json = {\n        url: images[index],\n        id: model.id\n      };\n      console.log('createPreviewImage server-side', json); // TODO: should we fire and forget here to speed up builds?\n\n      return got.post(api.createPreviewImage, {\n        json\n      }).json();\n    }\n  });\n  return results.filter(Boolean).filter(image => !image.error).reduce((acc, result) => _objectSpread(_objectSpread({}, acc), {}, {\n    [result.url]: result\n  }), {});\n}","map":{"version":3,"sources":["B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/lib/get-preview-images.ts"],"names":["crypto","got","pMap","api","isPreviewImageSupportEnabled","db","sha256","input","buffer","Buffer","isBuffer","from","createHash","update","digest","getPreviewImages","images","imageDocRefs","map","url","id","doc","length","imageDocs","getAll","results","model","index","exists","data","json","console","log","post","createPreviewImage","filter","Boolean","image","error","reduce","acc","result"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,OAAjB;AAEA,SAASC,GAAT,EAAcC,4BAAd,QAAkD,UAAlD;AAEA,OAAO,KAAKC,EAAZ,MAAoB,MAApB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAwC;AACtC,QAAMC,MAAM,GAAGC,MAAM,CAACC,QAAP,CAAgBH,KAAhB,IAAyBA,KAAzB,GAAiCE,MAAM,CAACE,IAAP,CAAYJ,KAAZ,CAAhD;AACA,SAAOP,MAAM,CAACY,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCL,MAAnC,EAA2CM,MAA3C,CAAkD,KAAlD,CAAP;AACD;;AAED,OAAO,eAAeC,gBAAf,CACLC,MADK,EAE2B;AAChC,MAAI,CAACZ,4BAAL,EAAmC;AACjC,WAAO,EAAP;AACD;;AAED,QAAMa,YAAY,GAAGD,MAAM,CAACE,GAAP,CAAYC,GAAD,IAAS;AACvC,UAAMC,EAAE,GAAGd,MAAM,CAACa,GAAD,CAAjB;AACA,WAAOd,EAAE,CAACW,MAAH,CAAUK,GAAV,CAAcD,EAAd,CAAP;AACD,GAHoB,CAArB;;AAKA,MAAI,CAACH,YAAY,CAACK,MAAlB,EAA0B;AACxB,WAAO,EAAP;AACD;;AAED,QAAMC,SAAS,GAAG,MAAMlB,EAAE,CAACA,EAAH,CAAMmB,MAAN,CAAa,GAAGP,YAAhB,CAAxB;AACA,QAAMQ,OAAO,GAAG,MAAMvB,IAAI,CAACqB,SAAD,EAAY,OAAOG,KAAP,EAAcC,KAAd,KAAwB;AAC5D,QAAID,KAAK,CAACE,MAAV,EAAkB;AAChB,aAAOF,KAAK,CAACG,IAAN,EAAP;AACD,KAFD,MAEO;AACL,YAAMC,IAAI,GAAG;AACXX,QAAAA,GAAG,EAAEH,MAAM,CAACW,KAAD,CADA;AAEXP,QAAAA,EAAE,EAAEM,KAAK,CAACN;AAFC,OAAb;AAIAW,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,IAA9C,EALK,CAOL;;AACA,aAAO7B,GAAG,CACPgC,IADI,CACC9B,GAAG,CAAC+B,kBADL,EACyB;AAAEJ,QAAAA;AAAF,OADzB,EAEJA,IAFI,EAAP;AAGD;AACF,GAfyB,CAA1B;AAiBA,SAAOL,OAAO,CACXU,MADI,CACGC,OADH,EAEJD,MAFI,CAEIE,KAAD,IAAW,CAACA,KAAK,CAACC,KAFrB,EAGJC,MAHI,CAIH,CAACC,GAAD,EAAMC,MAAN,qCACKD,GADL;AAEE,KAACC,MAAM,CAACtB,GAAR,GAAcsB;AAFhB,IAJG,EAQH,EARG,CAAP;AAUD","sourcesContent":["import crypto from 'crypto'\r\nimport got from 'got'\r\nimport pMap from 'p-map'\r\n\r\nimport { api, isPreviewImageSupportEnabled } from './config'\r\nimport * as types from './types'\r\nimport * as db from './db'\r\n\r\nfunction sha256(input: Buffer | string) {\r\n  const buffer = Buffer.isBuffer(input) ? input : Buffer.from(input)\r\n  return crypto.createHash('sha256').update(buffer).digest('hex')\r\n}\r\n\r\nexport async function getPreviewImages(\r\n  images: string[]\r\n): Promise<types.PreviewImageMap> {\r\n  if (!isPreviewImageSupportEnabled) {\r\n    return {}\r\n  }\r\n\r\n  const imageDocRefs = images.map((url) => {\r\n    const id = sha256(url)\r\n    return db.images.doc(id)\r\n  })\r\n\r\n  if (!imageDocRefs.length) {\r\n    return {}\r\n  }\r\n\r\n  const imageDocs = await db.db.getAll(...imageDocRefs)\r\n  const results = await pMap(imageDocs, async (model, index) => {\r\n    if (model.exists) {\r\n      return model.data() as types.PreviewImage\r\n    } else {\r\n      const json = {\r\n        url: images[index],\r\n        id: model.id\r\n      }\r\n      console.log('createPreviewImage server-side', json)\r\n\r\n      // TODO: should we fire and forget here to speed up builds?\r\n      return got\r\n        .post(api.createPreviewImage, { json })\r\n        .json() as Promise<types.PreviewImage>\r\n    }\r\n  })\r\n\r\n  return results\r\n    .filter(Boolean)\r\n    .filter((image) => !image.error)\r\n    .reduce(\r\n      (acc, result) => ({\r\n        ...acc,\r\n        [result.url]: result\r\n      }),\r\n      {}\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}