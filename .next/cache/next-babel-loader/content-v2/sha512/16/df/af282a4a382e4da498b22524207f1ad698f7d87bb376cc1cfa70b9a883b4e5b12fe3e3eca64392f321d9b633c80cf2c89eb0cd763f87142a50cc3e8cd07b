{"ast":null,"code":"import _defineProperty from \"B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport rawSiteConfig from '../site.config';\n\nif (!rawSiteConfig) {\n  throw new Error(\"Config error: invalid site.config.js\");\n} // TODO: allow environment variables to override site.config.js\n\n\nvar siteConfigOverrides;\n\ntry {\n  if (process.env.NEXT_PUBLIC_SITE_CONFIG) {\n    siteConfigOverrides = JSON.parse(process.env.NEXT_PUBLIC_SITE_CONFIG);\n  }\n} catch (err) {\n  console.error('Invalid config \"NEXT_PUBLIC_SITE_CONFIG\" failed to parse');\n  throw err;\n}\n\nvar siteConfig = _objectSpread(_objectSpread({}, rawSiteConfig), siteConfigOverrides);\n\nexport function getSiteConfig(key, defaultValue) {\n  var value = siteConfig[key];\n\n  if (value !== undefined) {\n    return value;\n  }\n\n  if (defaultValue !== undefined) {\n    return defaultValue;\n  }\n\n  throw new Error(\"Config error: missing required site config value \\\"\".concat(key, \"\\\"\"));\n}\nexport function getEnv(key, defaultValue) {\n  var env = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : process.env;\n  var value = env[key];\n\n  if (value !== undefined) {\n    return value;\n  }\n\n  if (defaultValue !== undefined) {\n    return defaultValue;\n  }\n\n  throw new Error(\"Config error: missing required env variable \\\"\".concat(key, \"\\\"\"));\n}","map":{"version":3,"sources":["B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/lib/get-config-value.ts"],"names":["rawSiteConfig","Error","siteConfigOverrides","process","env","NEXT_PUBLIC_SITE_CONFIG","JSON","parse","err","console","error","siteConfig","getSiteConfig","key","defaultValue","value","undefined","getEnv"],"mappings":";;;;;;AAAA,OAAOA,aAAP,MAA0B,gBAA1B;;AAEA,IAAI,CAACA,aAAL,EAAoB;AAClB,QAAM,IAAIC,KAAJ,wCAAN;AACD,C,CAED;;;AACA,IAAIC,mBAAJ;;AAEA,IAAI;AACF,MAAIC,OAAO,CAACC,GAAR,CAAYC,uBAAhB,EAAyC;AACvCH,IAAAA,mBAAmB,GAAGI,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACC,GAAR,CAAYC,uBAAvB,CAAtB;AACD;AACF,CAJD,CAIE,OAAOG,GAAP,EAAY;AACZC,EAAAA,OAAO,CAACC,KAAR,CAAc,0DAAd;AACA,QAAMF,GAAN;AACD;;AAED,IAAMG,UAAU,mCACXX,aADW,GAEXE,mBAFW,CAAhB;;AAKA,OAAO,SAASU,aAAT,CAA0BC,GAA1B,EAAuCC,YAAvC,EAA4D;AACjE,MAAMC,KAAK,GAAGJ,UAAU,CAACE,GAAD,CAAxB;;AAEA,MAAIE,KAAK,KAAKC,SAAd,EAAyB;AACvB,WAAOD,KAAP;AACD;;AAED,MAAID,YAAY,KAAKE,SAArB,EAAgC;AAC9B,WAAOF,YAAP;AACD;;AAED,QAAM,IAAIb,KAAJ,8DAA+DY,GAA/D,QAAN;AACD;AAED,OAAO,SAASI,MAAT,CACLJ,GADK,EAELC,YAFK,EAIG;AAAA,MADRV,GACQ,uEADFD,OAAO,CAACC,GACN;AACR,MAAMW,KAAK,GAAGX,GAAG,CAACS,GAAD,CAAjB;;AAEA,MAAIE,KAAK,KAAKC,SAAd,EAAyB;AACvB,WAAOD,KAAP;AACD;;AAED,MAAID,YAAY,KAAKE,SAArB,EAAgC;AAC9B,WAAOF,YAAP;AACD;;AAED,QAAM,IAAIb,KAAJ,yDAA0DY,GAA1D,QAAN;AACD","sourcesContent":["import rawSiteConfig from '../site.config'\r\n\r\nif (!rawSiteConfig) {\r\n  throw new Error(`Config error: invalid site.config.js`)\r\n}\r\n\r\n// TODO: allow environment variables to override site.config.js\r\nlet siteConfigOverrides\r\n\r\ntry {\r\n  if (process.env.NEXT_PUBLIC_SITE_CONFIG) {\r\n    siteConfigOverrides = JSON.parse(process.env.NEXT_PUBLIC_SITE_CONFIG)\r\n  }\r\n} catch (err) {\r\n  console.error('Invalid config \"NEXT_PUBLIC_SITE_CONFIG\" failed to parse')\r\n  throw err\r\n}\r\n\r\nconst siteConfig = {\r\n  ...rawSiteConfig,\r\n  ...siteConfigOverrides\r\n}\r\n\r\nexport function getSiteConfig<T>(key: string, defaultValue?: T): T {\r\n  const value = siteConfig[key]\r\n\r\n  if (value !== undefined) {\r\n    return value\r\n  }\r\n\r\n  if (defaultValue !== undefined) {\r\n    return defaultValue\r\n  }\r\n\r\n  throw new Error(`Config error: missing required site config value \"${key}\"`)\r\n}\r\n\r\nexport function getEnv(\r\n  key: string,\r\n  defaultValue?: string,\r\n  env = process.env\r\n): string {\r\n  const value = env[key]\r\n\r\n  if (value !== undefined) {\r\n    return value\r\n  }\r\n\r\n  if (defaultValue !== undefined) {\r\n    return defaultValue\r\n  }\r\n\r\n  throw new Error(`Config error: missing required env variable \"${key}\"`)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}