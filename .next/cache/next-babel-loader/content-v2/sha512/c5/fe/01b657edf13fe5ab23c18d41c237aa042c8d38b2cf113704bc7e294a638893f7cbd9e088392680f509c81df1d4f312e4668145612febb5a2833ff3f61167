{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport pMemoize from 'p-memoize';\nimport { getAllPagesInSpace } from 'notion-utils';\nimport { includeNotionIdInUrls } from './config';\nimport { notion } from './notion';\nimport { getCanonicalPageId } from './get-canonical-page-id';\nconst uuid = !!includeNotionIdInUrls;\nexport const getAllPages = pMemoize(getAllPagesImpl, {\n  maxAge: 60000 * 5\n});\nexport async function getAllPagesImpl(rootNotionPageId, rootNotionSpaceId) {\n  const pageMap = await getAllPagesInSpace(rootNotionPageId, rootNotionSpaceId, notion.getPage.bind(notion));\n  const canonicalPageMap = Object.keys(pageMap).reduce((map, pageId) => {\n    const recordMap = pageMap[pageId];\n\n    if (!recordMap) {\n      throw new Error(`Error loading page \"${pageId}\"`);\n    }\n\n    const canonicalPageId = getCanonicalPageId(pageId, recordMap, {\n      uuid\n    });\n\n    if (map[canonicalPageId]) {\n      console.error('error duplicate canonical page id', canonicalPageId, pageId, map[canonicalPageId]);\n      return map;\n    } else {\n      return _objectSpread(_objectSpread({}, map), {}, {\n        [canonicalPageId]: pageId\n      });\n    }\n  }, {});\n  return {\n    pageMap,\n    canonicalPageMap\n  };\n}","map":{"version":3,"sources":["B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/lib/get-all-pages.ts"],"names":["pMemoize","getAllPagesInSpace","includeNotionIdInUrls","notion","getCanonicalPageId","uuid","getAllPages","getAllPagesImpl","maxAge","rootNotionPageId","rootNotionSpaceId","pageMap","getPage","bind","canonicalPageMap","Object","keys","reduce","map","pageId","recordMap","Error","canonicalPageId","console","error"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,SAASC,kBAAT,QAAmC,cAAnC;AAGA,SAASC,qBAAT,QAAsC,UAAtC;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AAEA,MAAMC,IAAI,GAAG,CAAC,CAACH,qBAAf;AAEA,OAAO,MAAMI,WAAW,GAAGN,QAAQ,CAACO,eAAD,EAAkB;AAAEC,EAAAA,MAAM,EAAE,QAAQ;AAAlB,CAAlB,CAA5B;AAEP,OAAO,eAAeD,eAAf,CACLE,gBADK,EAELC,iBAFK,EAG4B;AACjC,QAAMC,OAAO,GAAG,MAAMV,kBAAkB,CACtCQ,gBADsC,EAEtCC,iBAFsC,EAGtCP,MAAM,CAACS,OAAP,CAAeC,IAAf,CAAoBV,MAApB,CAHsC,CAAxC;AAMA,QAAMW,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYL,OAAZ,EAAqBM,MAArB,CACvB,CAACC,GAAD,EAAMC,MAAN,KAAyB;AACvB,UAAMC,SAAS,GAAGT,OAAO,CAACQ,MAAD,CAAzB;;AACA,QAAI,CAACC,SAAL,EAAgB;AACd,YAAM,IAAIC,KAAJ,CAAW,uBAAsBF,MAAO,GAAxC,CAAN;AACD;;AAED,UAAMG,eAAe,GAAGlB,kBAAkB,CAACe,MAAD,EAASC,SAAT,EAAoB;AAC5Df,MAAAA;AAD4D,KAApB,CAA1C;;AAIA,QAAIa,GAAG,CAACI,eAAD,CAAP,EAA0B;AACxBC,MAAAA,OAAO,CAACC,KAAR,CACE,mCADF,EAEEF,eAFF,EAGEH,MAHF,EAIED,GAAG,CAACI,eAAD,CAJL;AAOA,aAAOJ,GAAP;AACD,KATD,MASO;AACL,6CACKA,GADL;AAEE,SAACI,eAAD,GAAmBH;AAFrB;AAID;AACF,GA1BsB,EA2BvB,EA3BuB,CAAzB;AA8BA,SAAO;AACLR,IAAAA,OADK;AAELG,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import pMemoize from 'p-memoize'\r\nimport { getAllPagesInSpace } from 'notion-utils'\r\n\r\nimport * as types from './types'\r\nimport { includeNotionIdInUrls } from './config'\r\nimport { notion } from './notion'\r\nimport { getCanonicalPageId } from './get-canonical-page-id'\r\n\r\nconst uuid = !!includeNotionIdInUrls\r\n\r\nexport const getAllPages = pMemoize(getAllPagesImpl, { maxAge: 60000 * 5 })\r\n\r\nexport async function getAllPagesImpl(\r\n  rootNotionPageId: string,\r\n  rootNotionSpaceId: string\r\n): Promise<Partial<types.SiteMap>> {\r\n  const pageMap = await getAllPagesInSpace(\r\n    rootNotionPageId,\r\n    rootNotionSpaceId,\r\n    notion.getPage.bind(notion)\r\n  )\r\n\r\n  const canonicalPageMap = Object.keys(pageMap).reduce(\r\n    (map, pageId: string) => {\r\n      const recordMap = pageMap[pageId]\r\n      if (!recordMap) {\r\n        throw new Error(`Error loading page \"${pageId}\"`)\r\n      }\r\n\r\n      const canonicalPageId = getCanonicalPageId(pageId, recordMap, {\r\n        uuid\r\n      })\r\n\r\n      if (map[canonicalPageId]) {\r\n        console.error(\r\n          'error duplicate canonical page id',\r\n          canonicalPageId,\r\n          pageId,\r\n          map[canonicalPageId]\r\n        )\r\n\r\n        return map\r\n      } else {\r\n        return {\r\n          ...map,\r\n          [canonicalPageId]: pageId\r\n        }\r\n      }\r\n    },\r\n    {}\r\n  )\r\n\r\n  return {\r\n    pageMap,\r\n    canonicalPageMap\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}