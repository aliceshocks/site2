{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n * Site-wide app configuration.\r\n *\r\n * This file pulls from the root \"site.config.js\" as well as environment variables\r\n * for optional depenencies.\r\n */\nimport { parsePageId } from 'notion-utils';\nimport { getSiteConfig, getEnv } from './get-config-value';\nexport const rootNotionPageId = parsePageId(getSiteConfig('rootNotionPageId'), {\n  uuid: false\n});\n\nif (!rootNotionPageId) {\n  throw new Error('Config error invalid \"rootNotionPageId\"');\n} // if you want to restrict pages to a single notion workspace (optional)\n\n\nexport const rootNotionSpaceId = parsePageId(getSiteConfig('rootNotionSpaceId', null), {\n  uuid: true\n});\nexport const pageUrlOverrides = cleanPageUrlMap(getSiteConfig('pageUrlOverrides', {}) || {}, 'pageUrlOverrides');\nexport const inversePageUrlOverrides = invertPageUrlOverrides(pageUrlOverrides);\nexport const pageUrlAdditions = cleanPageUrlMap(getSiteConfig('pageUrlAdditions', {}) || {}, 'pageUrlAdditions'); // general site config\n\nexport const name = getSiteConfig('name');\nexport const author = getSiteConfig('author');\nexport const domain = getSiteConfig('domain');\nexport const description = getSiteConfig('description', 'Notion Blog'); // social accounts\n\nexport const twitter = getSiteConfig('twitter', null);\nexport const github = getSiteConfig('github', null);\nexport const linkedin = getSiteConfig('linkedin', null);\nexport const socialImageTitle = getSiteConfig('socialImageTitle', null);\nexport const socialImageSubtitle = getSiteConfig('socialImageSubtitle', null); // default notion values for site-wide consistency (optional; may be overridden on a per-page basis)\n\nexport const defaultPageIcon = getSiteConfig('defaultPageIcon', null);\nexport const defaultPageCover = getSiteConfig('defaultPageCover', null);\nexport const defaultPageCoverPosition = getSiteConfig('defaultPageCoverPosition', 0.5); // Optional utteranc.es comments via GitHub issue comments\n\nexport const utterancesGitHubRepo = getSiteConfig('utterancesGitHubRepo', null); // Optional image CDN host to proxy all image requests through\n\nexport const imageCDNHost = getSiteConfig('imageCDNHost', null); // Optional whether or not to enable support for LQIP preview images\n// (requires a Google Firebase collection)\n\nexport const isPreviewImageSupportEnabled = getSiteConfig('isPreviewImageSupportEnabled', false);\nexport const isDev = true || !\"development\"; // where it all starts -- the site's root Notion page\n\nexport const includeNotionIdInUrls = getSiteConfig('includeNotionIdInUrls', !!isDev); // ----------------------------------------------------------------------------\n\nexport const isServer = true;\nexport const port = getEnv('PORT', '3000');\nexport const host = isDev ? `http://localhost:${port}` : `https://${domain}`;\nexport const apiBaseUrl = `${host}/api`;\nexport const api = {\n  createPreviewImage: `${apiBaseUrl}/create-preview-image`,\n  searchNotion: `${apiBaseUrl}/search-notion`,\n  renderSocialImage: pageId => `${apiBaseUrl}/render-social-image/${pageId}`\n}; // ----------------------------------------------------------------------------\n\nexport const fathomId = isDev ? null : process.env.NEXT_PUBLIC_FATHOM_ID;\nexport const fathomConfig = fathomId ? {\n  excludedDomains: ['localhost', 'localhost:3000']\n} : undefined;\nconst defaultEnvValueForPreviewImageSupport = isPreviewImageSupportEnabled && isServer ? undefined : null;\nexport const googleProjectId = getEnv('GCLOUD_PROJECT', defaultEnvValueForPreviewImageSupport);\nexport const googleApplicationCredentials = getGoogleApplicationCredentials();\nexport const firebaseCollectionImages = getEnv('FIREBASE_COLLECTION_IMAGES', defaultEnvValueForPreviewImageSupport); // this hack is necessary because vercel doesn't support secret files so we need to encode our google\n// credentials a base64-encoded string of the JSON-ified content\n\nfunction getGoogleApplicationCredentials() {\n  if (!isPreviewImageSupportEnabled || !isServer) {\n    return null;\n  }\n\n  try {\n    const googleApplicationCredentialsBase64 = getEnv('GOOGLE_APPLICATION_CREDENTIALS', defaultEnvValueForPreviewImageSupport);\n    return JSON.parse(Buffer.from(googleApplicationCredentialsBase64, 'base64').toString());\n  } catch (err) {\n    console.error('Firebase config error: invalid \"GOOGLE_APPLICATION_CREDENTIALS\" should be base64-encoded JSON\\n');\n    throw err;\n  }\n}\n\nfunction cleanPageUrlMap(pageUrlMap, label) {\n  return Object.keys(pageUrlMap).reduce((acc, uri) => {\n    const pageId = pageUrlMap[uri];\n    const uuid = parsePageId(pageId, {\n      uuid: false\n    });\n\n    if (!uuid) {\n      throw new Error(`Invalid ${label} page id \"${pageId}\"`);\n    }\n\n    if (!uri) {\n      throw new Error(`Missing ${label} value for page \"${pageId}\"`);\n    }\n\n    if (!uri.startsWith('/')) {\n      throw new Error(`Invalid ${label} value for page \"${pageId}\": value \"${uri}\" should be a relative URI that starts with \"/\"`);\n    }\n\n    const path = uri.slice(1);\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [path]: uuid\n    });\n  }, {});\n}\n\nfunction invertPageUrlOverrides(pageUrlOverrides) {\n  return Object.keys(pageUrlOverrides).reduce((acc, uri) => {\n    const pageId = pageUrlOverrides[uri];\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [pageId]: uri\n    });\n  }, {});\n}","map":{"version":3,"sources":["B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/lib/config.ts"],"names":["parsePageId","getSiteConfig","getEnv","rootNotionPageId","uuid","Error","rootNotionSpaceId","pageUrlOverrides","cleanPageUrlMap","inversePageUrlOverrides","invertPageUrlOverrides","pageUrlAdditions","name","author","domain","description","twitter","github","linkedin","socialImageTitle","socialImageSubtitle","defaultPageIcon","defaultPageCover","defaultPageCoverPosition","utterancesGitHubRepo","imageCDNHost","isPreviewImageSupportEnabled","isDev","includeNotionIdInUrls","isServer","port","host","apiBaseUrl","api","createPreviewImage","searchNotion","renderSocialImage","pageId","fathomId","process","env","NEXT_PUBLIC_FATHOM_ID","fathomConfig","excludedDomains","undefined","defaultEnvValueForPreviewImageSupport","googleProjectId","googleApplicationCredentials","getGoogleApplicationCredentials","firebaseCollectionImages","googleApplicationCredentialsBase64","JSON","parse","Buffer","from","toString","err","console","error","pageUrlMap","label","Object","keys","reduce","acc","uri","startsWith","path","slice"],"mappings":"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","sourcesContent":["/**\r\n * Site-wide app configuration.\r\n *\r\n * This file pulls from the root \"site.config.js\" as well as environment variables\r\n * for optional depenencies.\r\n */\r\n\r\nimport { parsePageId } from 'notion-utils'\r\nimport { getSiteConfig, getEnv } from './get-config-value'\r\nimport { PageUrlOverridesMap, PageUrlOverridesInverseMap } from './types'\r\n\r\nexport const rootNotionPageId: string = parsePageId(\r\n  getSiteConfig('rootNotionPageId'),\r\n  { uuid: false }\r\n)\r\n\r\nif (!rootNotionPageId) {\r\n  throw new Error('Config error invalid \"rootNotionPageId\"')\r\n}\r\n\r\n// if you want to restrict pages to a single notion workspace (optional)\r\nexport const rootNotionSpaceId: string | null = parsePageId(\r\n  getSiteConfig('rootNotionSpaceId', null),\r\n  { uuid: true }\r\n)\r\n\r\nexport const pageUrlOverrides = cleanPageUrlMap(\r\n  getSiteConfig('pageUrlOverrides', {}) || {},\r\n  'pageUrlOverrides'\r\n)\r\n\r\nexport const inversePageUrlOverrides = invertPageUrlOverrides(pageUrlOverrides)\r\n\r\nexport const pageUrlAdditions = cleanPageUrlMap(\r\n  getSiteConfig('pageUrlAdditions', {}) || {},\r\n  'pageUrlAdditions'\r\n)\r\n\r\n// general site config\r\nexport const name: string = getSiteConfig('name')\r\nexport const author: string = getSiteConfig('author')\r\nexport const domain: string = getSiteConfig('domain')\r\nexport const description: string = getSiteConfig('description', 'Notion Blog')\r\n\r\n// social accounts\r\nexport const twitter: string | null = getSiteConfig('twitter', null)\r\nexport const github: string | null = getSiteConfig('github', null)\r\nexport const linkedin: string | null = getSiteConfig('linkedin', null)\r\n\r\nexport const socialImageTitle: string | null = getSiteConfig(\r\n  'socialImageTitle',\r\n  null\r\n)\r\nexport const socialImageSubtitle: string | null = getSiteConfig(\r\n  'socialImageSubtitle',\r\n  null\r\n)\r\n\r\n// default notion values for site-wide consistency (optional; may be overridden on a per-page basis)\r\nexport const defaultPageIcon: string | null = getSiteConfig(\r\n  'defaultPageIcon',\r\n  null\r\n)\r\nexport const defaultPageCover: string | null = getSiteConfig(\r\n  'defaultPageCover',\r\n  null\r\n)\r\nexport const defaultPageCoverPosition: number = getSiteConfig(\r\n  'defaultPageCoverPosition',\r\n  0.5\r\n)\r\n\r\n// Optional utteranc.es comments via GitHub issue comments\r\nexport const utterancesGitHubRepo: string | null = getSiteConfig(\r\n  'utterancesGitHubRepo',\r\n  null\r\n)\r\n\r\n// Optional image CDN host to proxy all image requests through\r\nexport const imageCDNHost: string | null = getSiteConfig('imageCDNHost', null)\r\n\r\n// Optional whether or not to enable support for LQIP preview images\r\n// (requires a Google Firebase collection)\r\nexport const isPreviewImageSupportEnabled: boolean = getSiteConfig(\r\n  'isPreviewImageSupportEnabled',\r\n  false\r\n)\r\n\r\nexport const isDev =\r\n  process.env.NODE_ENV === 'development' || !process.env.NODE_ENV\r\n\r\n// where it all starts -- the site's root Notion page\r\nexport const includeNotionIdInUrls: boolean = getSiteConfig(\r\n  'includeNotionIdInUrls',\r\n  !!isDev\r\n)\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\nexport const isServer = typeof window === 'undefined'\r\n\r\nexport const port = getEnv('PORT', '3000')\r\nexport const host = isDev ? `http://localhost:${port}` : `https://${domain}`\r\n\r\nexport const apiBaseUrl = `${host}/api`\r\n\r\nexport const api = {\r\n  createPreviewImage: `${apiBaseUrl}/create-preview-image`,\r\n  searchNotion: `${apiBaseUrl}/search-notion`,\r\n  renderSocialImage: (pageId) => `${apiBaseUrl}/render-social-image/${pageId}`\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\nexport const fathomId = isDev ? null : process.env.NEXT_PUBLIC_FATHOM_ID\r\n\r\nexport const fathomConfig = fathomId\r\n  ? {\r\n      excludedDomains: ['localhost', 'localhost:3000']\r\n    }\r\n  : undefined\r\n\r\nconst defaultEnvValueForPreviewImageSupport =\r\n  isPreviewImageSupportEnabled && isServer ? undefined : null\r\n\r\nexport const googleProjectId = getEnv(\r\n  'GCLOUD_PROJECT',\r\n  defaultEnvValueForPreviewImageSupport\r\n)\r\n\r\nexport const googleApplicationCredentials = getGoogleApplicationCredentials()\r\n\r\nexport const firebaseCollectionImages = getEnv(\r\n  'FIREBASE_COLLECTION_IMAGES',\r\n  defaultEnvValueForPreviewImageSupport\r\n)\r\n\r\n// this hack is necessary because vercel doesn't support secret files so we need to encode our google\r\n// credentials a base64-encoded string of the JSON-ified content\r\nfunction getGoogleApplicationCredentials() {\r\n  if (!isPreviewImageSupportEnabled || !isServer) {\r\n    return null\r\n  }\r\n\r\n  try {\r\n    const googleApplicationCredentialsBase64 = getEnv(\r\n      'GOOGLE_APPLICATION_CREDENTIALS',\r\n      defaultEnvValueForPreviewImageSupport\r\n    )\r\n\r\n    return JSON.parse(\r\n      Buffer.from(googleApplicationCredentialsBase64, 'base64').toString()\r\n    )\r\n  } catch (err) {\r\n    console.error(\r\n      'Firebase config error: invalid \"GOOGLE_APPLICATION_CREDENTIALS\" should be base64-encoded JSON\\n'\r\n    )\r\n\r\n    throw err\r\n  }\r\n}\r\n\r\nfunction cleanPageUrlMap(\r\n  pageUrlMap: PageUrlOverridesMap,\r\n  label: string\r\n): PageUrlOverridesMap {\r\n  return Object.keys(pageUrlMap).reduce((acc, uri) => {\r\n    const pageId = pageUrlMap[uri]\r\n    const uuid = parsePageId(pageId, { uuid: false })\r\n\r\n    if (!uuid) {\r\n      throw new Error(`Invalid ${label} page id \"${pageId}\"`)\r\n    }\r\n\r\n    if (!uri) {\r\n      throw new Error(`Missing ${label} value for page \"${pageId}\"`)\r\n    }\r\n\r\n    if (!uri.startsWith('/')) {\r\n      throw new Error(\r\n        `Invalid ${label} value for page \"${pageId}\": value \"${uri}\" should be a relative URI that starts with \"/\"`\r\n      )\r\n    }\r\n\r\n    const path = uri.slice(1)\r\n\r\n    return {\r\n      ...acc,\r\n      [path]: uuid\r\n    }\r\n  }, {})\r\n}\r\n\r\nfunction invertPageUrlOverrides(\r\n  pageUrlOverrides: PageUrlOverridesMap\r\n): PageUrlOverridesInverseMap {\r\n  return Object.keys(pageUrlOverrides).reduce((acc, uri) => {\r\n    const pageId = pageUrlOverrides[uri]\r\n\r\n    return {\r\n      ...acc,\r\n      [pageId]: uri\r\n    }\r\n  }, {})\r\n}\r\n"]},"metadata":{},"sourceType":"module"}