{"ast":null,"code":"import { uuidToId, parsePageId } from 'notion-utils';\nimport { includeNotionIdInUrls } from './config';\nimport { getCanonicalPageId } from './get-canonical-page-id'; // include UUIDs in page URLs during local development but not in production\n// (they're nice for debugging and speed up local dev)\n\nvar uuid = !!includeNotionIdInUrls;\nexport var mapPageUrl = function mapPageUrl(site, recordMap, searchParams) {\n  return function () {\n    var pageId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    if (uuidToId(pageId) === site.rootNotionPageId) {\n      return createUrl('/', searchParams);\n    } else {\n      return createUrl(\"/\".concat(getCanonicalPageId(pageId, recordMap, {\n        uuid: uuid\n      })), searchParams);\n    }\n  };\n};\nexport var getCanonicalPageUrl = function getCanonicalPageUrl(site, recordMap) {\n  return function () {\n    var pageId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var pageUuid = parsePageId(pageId, {\n      uuid: true\n    });\n\n    if (uuidToId(pageId) === site.rootNotionPageId) {\n      return \"https://\".concat(site.domain);\n    } else {\n      return \"https://\".concat(site.domain, \"/\").concat(getCanonicalPageId(pageUuid, recordMap, {\n        uuid: uuid\n      }));\n    }\n  };\n};\n\nfunction createUrl(path, searchParams) {\n  return [path, searchParams.toString()].filter(Boolean).join('?');\n}","map":{"version":3,"sources":["B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/lib/map-page-url.ts"],"names":["uuidToId","parsePageId","includeNotionIdInUrls","getCanonicalPageId","uuid","mapPageUrl","site","recordMap","searchParams","pageId","rootNotionPageId","createUrl","getCanonicalPageUrl","pageUuid","domain","path","toString","filter","Boolean","join"],"mappings":"AACA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,cAAtC;AAGA,SAASC,qBAAT,QAAsC,UAAtC;AACA,SAASC,kBAAT,QAAmC,yBAAnC,C,CAEA;AACA;;AACA,IAAMC,IAAI,GAAG,CAAC,CAACF,qBAAf;AAEA,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CACxBC,IADwB,EAExBC,SAFwB,EAGxBC,YAHwB;AAAA,SAIrB,YAAiB;AAAA,QAAhBC,MAAgB,uEAAP,EAAO;;AACpB,QAAIT,QAAQ,CAACS,MAAD,CAAR,KAAqBH,IAAI,CAACI,gBAA9B,EAAgD;AAC9C,aAAOC,SAAS,CAAC,GAAD,EAAMH,YAAN,CAAhB;AACD,KAFD,MAEO;AACL,aAAOG,SAAS,YACVR,kBAAkB,CAACM,MAAD,EAASF,SAAT,EAAoB;AAAEH,QAAAA,IAAI,EAAJA;AAAF,OAApB,CADR,GAEdI,YAFc,CAAhB;AAID;AACF,GAbyB;AAAA,CAAnB;AAeP,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCN,IADiC,EAEjCC,SAFiC;AAAA,SAG9B,YAAiB;AAAA,QAAhBE,MAAgB,uEAAP,EAAO;AACpB,QAAMI,QAAQ,GAAGZ,WAAW,CAACQ,MAAD,EAAS;AAAEL,MAAAA,IAAI,EAAE;AAAR,KAAT,CAA5B;;AAEA,QAAIJ,QAAQ,CAACS,MAAD,CAAR,KAAqBH,IAAI,CAACI,gBAA9B,EAAgD;AAC9C,+BAAkBJ,IAAI,CAACQ,MAAvB;AACD,KAFD,MAEO;AACL,+BAAkBR,IAAI,CAACQ,MAAvB,cAAiCX,kBAAkB,CAACU,QAAD,EAAWN,SAAX,EAAsB;AACvEH,QAAAA,IAAI,EAAJA;AADuE,OAAtB,CAAnD;AAGD;AACF,GAbkC;AAAA,CAA5B;;AAeP,SAASO,SAAT,CAAmBI,IAAnB,EAAiCP,YAAjC,EAAgE;AAC9D,SAAO,CAACO,IAAD,EAAOP,YAAY,CAACQ,QAAb,EAAP,EAAgCC,MAAhC,CAAuCC,OAAvC,EAAgDC,IAAhD,CAAqD,GAArD,CAAP;AACD","sourcesContent":["import { ExtendedRecordMap } from 'notion-types'\r\nimport { uuidToId, parsePageId } from 'notion-utils'\r\n\r\nimport { Site } from './types'\r\nimport { includeNotionIdInUrls } from './config'\r\nimport { getCanonicalPageId } from './get-canonical-page-id'\r\n\r\n// include UUIDs in page URLs during local development but not in production\r\n// (they're nice for debugging and speed up local dev)\r\nconst uuid = !!includeNotionIdInUrls\r\n\r\nexport const mapPageUrl = (\r\n  site: Site,\r\n  recordMap: ExtendedRecordMap,\r\n  searchParams: URLSearchParams\r\n) => (pageId = '') => {\r\n  if (uuidToId(pageId) === site.rootNotionPageId) {\r\n    return createUrl('/', searchParams)\r\n  } else {\r\n    return createUrl(\r\n      `/${getCanonicalPageId(pageId, recordMap, { uuid })}`,\r\n      searchParams\r\n    )\r\n  }\r\n}\r\n\r\nexport const getCanonicalPageUrl = (\r\n  site: Site,\r\n  recordMap: ExtendedRecordMap\r\n) => (pageId = '') => {\r\n  const pageUuid = parsePageId(pageId, { uuid: true })\r\n\r\n  if (uuidToId(pageId) === site.rootNotionPageId) {\r\n    return `https://${site.domain}`\r\n  } else {\r\n    return `https://${site.domain}/${getCanonicalPageId(pageUuid, recordMap, {\r\n      uuid\r\n    })}`\r\n  }\r\n}\r\n\r\nfunction createUrl(path: string, searchParams: URLSearchParams) {\r\n  return [path, searchParams.toString()].filter(Boolean).join('?')\r\n}\r\n"]},"metadata":{},"sourceType":"module"}