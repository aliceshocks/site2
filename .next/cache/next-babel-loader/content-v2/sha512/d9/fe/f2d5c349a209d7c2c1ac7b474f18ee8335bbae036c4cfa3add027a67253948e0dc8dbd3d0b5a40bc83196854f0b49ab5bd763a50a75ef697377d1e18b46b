{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"B:\\\\jacko\\\\Documents\\\\JacksNewSiteCRM\\\\jackoregankenny.com\\\\NewOne\\\\nextjs-notion-starter-kit\\\\pages\\\\[pageId].tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { isDev, domain } from 'lib/config';\nimport { getSiteMaps } from 'lib/get-site-maps';\nimport { resolveNotionPage } from 'lib/resolve-notion-page';\nimport { NotionPage } from 'components';\nexport const getStaticProps = async context => {\n  const rawPageId = context.params.pageId;\n\n  try {\n    if (rawPageId === 'sitemap.xml' || rawPageId === 'robots.txt') {\n      return {\n        redirect: {\n          destination: `/api/${rawPageId}`\n        }\n      };\n    }\n\n    const props = await resolveNotionPage(domain, rawPageId);\n    return {\n      props,\n      revalidate: 10\n    };\n  } catch (err) {\n    console.error('page error', domain, rawPageId, err); // we don't want to publish the error version of this page, so\n    // let next.js know explicitly that incremental SSG failed\n\n    throw err;\n  }\n};\nexport async function getStaticPaths() {\n  if (isDev) {\n    return {\n      paths: [],\n      fallback: true\n    };\n  }\n\n  const siteMaps = await getSiteMaps();\n  const ret = {\n    paths: siteMaps.flatMap(siteMap => Object.keys(siteMap.canonicalPageMap).map(pageId => ({\n      params: {\n        pageId\n      }\n    }))),\n    // paths: [],\n    fallback: true\n  };\n  console.log(ret.paths);\n  return ret;\n}\nexport default function NotionDomainDynamicPage(props) {\n  return /*#__PURE__*/_jsxDEV(NotionPage, _objectSpread({}, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/pages/[pageId].tsx"],"names":["React","isDev","domain","getSiteMaps","resolveNotionPage","NotionPage","getStaticProps","context","rawPageId","params","pageId","redirect","destination","props","revalidate","err","console","error","getStaticPaths","paths","fallback","siteMaps","ret","flatMap","siteMap","Object","keys","canonicalPageMap","map","log","NotionDomainDynamicPage"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,YAA9B;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C,QAAMC,SAAS,GAAGD,OAAO,CAACE,MAAR,CAAeC,MAAjC;;AAEA,MAAI;AACF,QAAIF,SAAS,KAAK,aAAd,IAA+BA,SAAS,KAAK,YAAjD,EAA+D;AAC7D,aAAO;AACLG,QAAAA,QAAQ,EAAE;AACRC,UAAAA,WAAW,EAAG,QAAOJ,SAAU;AADvB;AADL,OAAP;AAKD;;AAED,UAAMK,KAAK,GAAG,MAAMT,iBAAiB,CAACF,MAAD,EAASM,SAAT,CAArC;AAEA,WAAO;AAAEK,MAAAA,KAAF;AAASC,MAAAA,UAAU,EAAE;AAArB,KAAP;AACD,GAZD,CAYE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,YAAd,EAA4Bf,MAA5B,EAAoCM,SAApC,EAA+CO,GAA/C,EADY,CAGZ;AACA;;AACA,UAAMA,GAAN;AACD;AACF,CAtBM;AAwBP,OAAO,eAAeG,cAAf,GAAgC;AACrC,MAAIjB,KAAJ,EAAW;AACT,WAAO;AACLkB,MAAAA,KAAK,EAAE,EADF;AAELC,MAAAA,QAAQ,EAAE;AAFL,KAAP;AAID;;AAED,QAAMC,QAAQ,GAAG,MAAMlB,WAAW,EAAlC;AAEA,QAAMmB,GAAG,GAAG;AACVH,IAAAA,KAAK,EAAEE,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IACtBC,MAAM,CAACC,IAAP,CAAYF,OAAO,CAACG,gBAApB,EAAsCC,GAAtC,CAA2ClB,MAAD,KAAa;AACrDD,MAAAA,MAAM,EAAE;AACNC,QAAAA;AADM;AAD6C,KAAb,CAA1C,CADK,CADG;AAQV;AACAU,IAAAA,QAAQ,EAAE;AATA,GAAZ;AAYAJ,EAAAA,OAAO,CAACa,GAAR,CAAYP,GAAG,CAACH,KAAhB;AACA,SAAOG,GAAP;AACD;AAED,eAAe,SAASQ,uBAAT,CAAiCjB,KAAjC,EAAwC;AACrD,sBAAO,QAAC,UAAD,oBAAgBA,KAAhB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD","sourcesContent":["import React from 'react'\r\nimport { isDev, domain } from 'lib/config'\r\nimport { getSiteMaps } from 'lib/get-site-maps'\r\nimport { resolveNotionPage } from 'lib/resolve-notion-page'\r\nimport { NotionPage } from 'components'\r\n\r\nexport const getStaticProps = async (context) => {\r\n  const rawPageId = context.params.pageId as string\r\n\r\n  try {\r\n    if (rawPageId === 'sitemap.xml' || rawPageId === 'robots.txt') {\r\n      return {\r\n        redirect: {\r\n          destination: `/api/${rawPageId}`\r\n        }\r\n      }\r\n    }\r\n\r\n    const props = await resolveNotionPage(domain, rawPageId)\r\n\r\n    return { props, revalidate: 10 }\r\n  } catch (err) {\r\n    console.error('page error', domain, rawPageId, err)\r\n\r\n    // we don't want to publish the error version of this page, so\r\n    // let next.js know explicitly that incremental SSG failed\r\n    throw err\r\n  }\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  if (isDev) {\r\n    return {\r\n      paths: [],\r\n      fallback: true\r\n    }\r\n  }\r\n\r\n  const siteMaps = await getSiteMaps()\r\n\r\n  const ret = {\r\n    paths: siteMaps.flatMap((siteMap) =>\r\n      Object.keys(siteMap.canonicalPageMap).map((pageId) => ({\r\n        params: {\r\n          pageId\r\n        }\r\n      }))\r\n    ),\r\n    // paths: [],\r\n    fallback: true\r\n  }\r\n\r\n  console.log(ret.paths)\r\n  return ret\r\n}\r\n\r\nexport default function NotionDomainDynamicPage(props) {\r\n  return <NotionPage {...props} />\r\n}\r\n"]},"metadata":{},"sourceType":"module"}