{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"B:\\\\jacko\\\\Documents\\\\JacksNewSiteCRM\\\\jackoregankenny.com\\\\NewOne\\\\nextjs-notion-starter-kit\\\\components\\\\NotionPage.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport dynamic from 'next/dynamic';\nimport cs from 'classnames';\nimport { useRouter } from 'next/router';\nimport { useSearchParam } from 'react-use';\nimport BodyClassName from 'react-body-classname';\nimport useDarkMode from 'use-dark-mode';\nimport { Tweet, Twitter } from 'react-static-tweets'; // core notion renderer\n\nimport { NotionRenderer, Code, Collection, CollectionRow } from 'react-notion-x'; // utils\n\nimport { getBlockTitle } from 'notion-utils';\nimport { mapPageUrl, getCanonicalPageUrl } from 'lib/map-page-url';\nimport { mapNotionImageUrl } from 'lib/map-image-url';\nimport { getPageDescription } from 'lib/get-page-description';\nimport { getPageTweet } from 'lib/get-page-tweet';\nimport { searchNotion } from 'lib/search-notion';\nimport * as config from 'lib/config'; // components\n\nimport { CustomFont } from './CustomFont';\nimport { CustomHtml } from './CustomHtml';\nimport { Loading } from './Loading';\nimport { Page404 } from './Page404';\nimport { PageHead } from './PageHead';\nimport { PageActions } from './PageActions';\nimport { Footer } from './Footer';\nimport { PageSocial } from './PageSocial';\nimport { ReactUtterances } from './ReactUtterances';\nimport styles from './styles.module.css'; // const Code = dynamic(() =>\n//   import('react-notion-x').then((notion) => notion.Code)\n// )\n//\n// const Collection = dynamic(() =>\n//   import('react-notion-x').then((notion) => notion.Collection)\n// )\n//\n// const CollectionRow = dynamic(\n//   () => import('react-notion-x').then((notion) => notion.CollectionRow),\n//   {\n//     ssr: false\n//   }\n// )\n\nconst Pdf = dynamic(() => import('react-notion-x').then(notion => notion.Pdf), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-notion-x')],\n    modules: ['react-notion-x']\n  }\n});\nconst Equation = dynamic(() => import('react-notion-x').then(notion => notion.Equation), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-notion-x')],\n    modules: ['react-notion-x']\n  }\n}); // we're now using a much lighter-weight tweet renderer react-static-tweets\n// instead of the official iframe-based embed widget from twitter\n// const Tweet = dynamic(() => import('react-tweet-embed'))\n\nconst Modal = dynamic(() => import('react-notion-x').then(notion => notion.Modal), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-notion-x')],\n    modules: ['react-notion-x']\n  }\n});\nexport const NotionPage = ({\n  site,\n  recordMap,\n  error,\n  pageId\n}) => {\n  var _recordMap$block, _recordMap$block$keys, _format, _getPageDescription;\n\n  const router = useRouter();\n  const lite = useSearchParam('lite');\n  const params = {};\n  if (lite) params.lite = lite; // lite mode is for oembed\n\n  const isLiteMode = lite === 'true';\n  const searchParams = new URLSearchParams(params);\n  const darkMode = useDarkMode(false, {\n    classNameDark: 'dark-mode'\n  });\n\n  if (router.isFallback) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }, this);\n  }\n\n  const keys = Object.keys((recordMap === null || recordMap === void 0 ? void 0 : recordMap.block) || {});\n  const block = recordMap === null || recordMap === void 0 ? void 0 : (_recordMap$block = recordMap.block) === null || _recordMap$block === void 0 ? void 0 : (_recordMap$block$keys = _recordMap$block[keys[0]]) === null || _recordMap$block$keys === void 0 ? void 0 : _recordMap$block$keys.value;\n\n  if (error || !site || !keys.length || !block) {\n    return /*#__PURE__*/_jsxDEV(Page404, {\n      site: site,\n      pageId: pageId,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 12\n    }, this);\n  }\n\n  const title = getBlockTitle(block, recordMap) || site.name;\n  console.log('notion page', {\n    isDev: config.isDev,\n    title,\n    pageId,\n    rootNotionPageId: site.rootNotionPageId,\n    recordMap\n  });\n\n  if (!config.isServer) {\n    // add important objects to the window global for easy debugging\n    const g = window;\n    g.pageId = pageId;\n    g.recordMap = recordMap;\n    g.block = block;\n  }\n\n  const siteMapPageUrl = mapPageUrl(site, recordMap, searchParams);\n  const canonicalPageUrl = !config.isDev && getCanonicalPageUrl(site, recordMap)(pageId); // const isRootPage =\n  //   parsePageId(block.id) === parsePageId(site.rootNotionPageId)\n\n  const isBlogPost = block.type === 'page' && block.parent_table === 'collection';\n  const showTableOfContents = !!isBlogPost;\n  const minTableOfContentsItems = 3;\n  const socialImage = mapNotionImageUrl(((_format = block.format) === null || _format === void 0 ? void 0 : _format.page_cover) || config.defaultPageCover, block) || config.api.renderSocialImage(pageId);\n  const socialDescription = (_getPageDescription = getPageDescription(block, recordMap)) !== null && _getPageDescription !== void 0 ? _getPageDescription : config.description;\n  let comments = null;\n  let pageAside = null; // only display comments and page actions on blog post pages\n\n  if (isBlogPost) {\n    if (config.utterancesGitHubRepo) {\n      comments = /*#__PURE__*/_jsxDEV(ReactUtterances, {\n        repo: config.utterancesGitHubRepo,\n        issueMap: \"issue-term\",\n        issueTerm: \"title\",\n        theme: darkMode.value ? 'photon-dark' : 'github-light'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this);\n    }\n\n    const tweet = getPageTweet(block, recordMap);\n\n    if (tweet) {\n      pageAside = /*#__PURE__*/_jsxDEV(PageActions, {\n        tweet: tweet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 19\n      }, this);\n    }\n  } else {\n    pageAside = /*#__PURE__*/_jsxDEV(PageSocial, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Twitter.Provider, {\n    value: {\n      tweetAstMap: recordMap.tweetAstMap || {},\n      swrOptions: {\n        fetcher: id => fetch(`/api/get-tweet-ast/${id}`).then(r => r.json())\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(PageHead, {\n      site: site\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n        property: \"og:title\",\n        content: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        property: \"og:site_name\",\n        content: site.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"twitter:title\",\n        content: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        property: \"twitter:domain\",\n        content: site.domain\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), config.twitter && /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"twitter:creator\",\n        content: `@${config.twitter}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), socialDescription && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n          name: \"description\",\n          content: socialDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"og:description\",\n          content: socialDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          name: \"twitter:description\",\n          content: socialDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), socialImage ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"meta\", {\n          name: \"twitter:card\",\n          content: \"summary_large_image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          name: \"twitter:image\",\n          content: socialImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"og:image\",\n          content: socialImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"twitter:card\",\n        content: \"summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), canonicalPageUrl && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"link\", {\n          rel: \"canonical\",\n          href: canonicalPageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"og:url\",\n          content: canonicalPageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          property: \"twitter:url\",\n          content: canonicalPageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"title\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomFont, {\n      site: site\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), isLiteMode && /*#__PURE__*/_jsxDEV(BodyClassName, {\n      className: \"notion-lite\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(NotionRenderer, {\n      bodyClassName: cs(styles.notion, pageId === site.rootNotionPageId && 'index-page'),\n      components: {\n        pageLink: (_ref) => {\n          let {\n            href,\n            as,\n            passHref,\n            prefetch,\n            replace,\n            scroll,\n            shallow,\n            locale\n          } = _ref,\n              props = _objectWithoutProperties(_ref, [\"href\", \"as\", \"passHref\", \"prefetch\", \"replace\", \"scroll\", \"shallow\", \"locale\"]);\n\n          return /*#__PURE__*/_jsxDEV(Link, {\n            href: href,\n            as: as,\n            passHref: passHref,\n            prefetch: prefetch,\n            replace: replace,\n            scroll: scroll,\n            shallow: shallow,\n            locale: locale,\n            children: /*#__PURE__*/_jsxDEV(\"a\", _objectSpread({}, props), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this);\n        },\n        code: Code,\n        collection: Collection,\n        collectionRow: CollectionRow,\n        tweet: Tweet,\n        modal: Modal,\n        pdf: Pdf,\n        equation: Equation\n      },\n      recordMap: recordMap,\n      rootPageId: site.rootNotionPageId,\n      fullPage: !isLiteMode,\n      darkMode: darkMode.value,\n      previewImages: site.previewImages !== false,\n      showCollectionViewDropdown: false,\n      showTableOfContents: showTableOfContents,\n      minTableOfContentsItems: minTableOfContentsItems,\n      defaultPageIcon: config.defaultPageIcon,\n      defaultPageCover: config.defaultPageCover,\n      defaultPageCoverPosition: config.defaultPageCoverPosition,\n      mapPageUrl: siteMapPageUrl,\n      mapImageUrl: mapNotionImageUrl,\n      searchNotion: searchNotion,\n      pageFooter: comments,\n      pageAside: pageAside,\n      footer: /*#__PURE__*/_jsxDEV(Footer, {\n        isDarkMode: darkMode.value,\n        toggleDarkMode: darkMode.toggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomHtml, {\n      site: site\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/components/NotionPage.tsx"],"names":["React","Head","Link","dynamic","cs","useRouter","useSearchParam","BodyClassName","useDarkMode","Tweet","Twitter","NotionRenderer","Code","Collection","CollectionRow","getBlockTitle","mapPageUrl","getCanonicalPageUrl","mapNotionImageUrl","getPageDescription","getPageTweet","searchNotion","config","CustomFont","CustomHtml","Loading","Page404","PageHead","PageActions","Footer","PageSocial","ReactUtterances","styles","Pdf","then","notion","Equation","Modal","ssr","NotionPage","site","recordMap","error","pageId","router","lite","params","isLiteMode","searchParams","URLSearchParams","darkMode","classNameDark","isFallback","keys","Object","block","value","length","title","name","console","log","isDev","rootNotionPageId","isServer","g","window","siteMapPageUrl","canonicalPageUrl","isBlogPost","type","parent_table","showTableOfContents","minTableOfContentsItems","socialImage","format","page_cover","defaultPageCover","api","renderSocialImage","socialDescription","description","comments","pageAside","utterancesGitHubRepo","tweet","tweetAstMap","swrOptions","fetcher","id","fetch","r","json","domain","twitter","pageLink","href","as","passHref","prefetch","replace","scroll","shallow","locale","props","code","collection","collectionRow","modal","pdf","equation","previewImages","defaultPageIcon","defaultPageCoverPosition","toggle"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAGA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,qBAA/B,C,CAEA;;AACA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,UAA/B,EAA2CC,aAA3C,QAAgE,gBAAhE,C,CAEA;;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,UAAT,EAAqBC,mBAArB,QAAgD,kBAAhD;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,YAAT,QAA6B,mBAA7B;AAEA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB,C,CAEA;;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAOC,MAAP,MAAmB,qBAAnB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,GAAG,GAAG9B,OAAO,CAAC,MAAM,OAAO,gBAAP,EAAyB+B,IAAzB,CAA+BC,MAAD,IAAYA,MAAM,CAACF,GAAjD,CAAP;AAAA;AAAA,wCAAc,gBAAd;AAAA,cAAc,gBAAd;AAAA;AAAA,EAAnB;AAEA,MAAMG,QAAQ,GAAGjC,OAAO,CAAC,MACvB,OAAO,gBAAP,EAAyB+B,IAAzB,CAA+BC,MAAD,IAAYA,MAAM,CAACC,QAAjD,CADsB;AAAA;AAAA,wCACf,gBADe;AAAA,cACf,gBADe;AAAA;AAAA,EAAxB,C,CAIA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAGlC,OAAO,CACnB,MAAM,OAAO,gBAAP,EAAyB+B,IAAzB,CAA+BC,MAAD,IAAYA,MAAM,CAACE,KAAjD,CADa,EAEnB;AAAEC,EAAAA,GAAG,EAAE,KAAP;AAAA;AAAA,wCADa,gBACb;AAAA,cADa,gBACb;AAAA;AAAA,CAFmB,CAArB;AAKA,OAAO,MAAMC,UAAqC,GAAG,CAAC;AACpDC,EAAAA,IADoD;AAEpDC,EAAAA,SAFoD;AAGpDC,EAAAA,KAHoD;AAIpDC,EAAAA;AAJoD,CAAD,KAK/C;AAAA;;AACJ,QAAMC,MAAM,GAAGvC,SAAS,EAAxB;AACA,QAAMwC,IAAI,GAAGvC,cAAc,CAAC,MAAD,CAA3B;AAEA,QAAMwC,MAAW,GAAG,EAApB;AACA,MAAID,IAAJ,EAAUC,MAAM,CAACD,IAAP,GAAcA,IAAd,CALN,CAOJ;;AACA,QAAME,UAAU,GAAGF,IAAI,KAAK,MAA5B;AACA,QAAMG,YAAY,GAAG,IAAIC,eAAJ,CAAoBH,MAApB,CAArB;AAEA,QAAMI,QAAQ,GAAG1C,WAAW,CAAC,KAAD,EAAQ;AAAE2C,IAAAA,aAAa,EAAE;AAAjB,GAAR,CAA5B;;AAEA,MAAIP,MAAM,CAACQ,UAAX,EAAuB;AACrB,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAY,CAAAZ,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEc,KAAX,KAAoB,EAAhC,CAAb;AACA,QAAMA,KAAK,GAAGd,SAAH,aAAGA,SAAH,2CAAGA,SAAS,CAAEc,KAAd,8EAAG,iBAAmBF,IAAI,CAAC,CAAD,CAAvB,CAAH,0DAAG,sBAA6BG,KAA3C;;AAEA,MAAId,KAAK,IAAI,CAACF,IAAV,IAAkB,CAACa,IAAI,CAACI,MAAxB,IAAkC,CAACF,KAAvC,EAA8C;AAC5C,wBAAO,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEf,IAAf;AAAqB,MAAA,MAAM,EAAEG,MAA7B;AAAqC,MAAA,KAAK,EAAED;AAA5C;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMgB,KAAK,GAAG3C,aAAa,CAACwC,KAAD,EAAQd,SAAR,CAAb,IAAmCD,IAAI,CAACmB,IAAtD;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B;AACzBC,IAAAA,KAAK,EAAExC,MAAM,CAACwC,KADW;AAEzBJ,IAAAA,KAFyB;AAGzBf,IAAAA,MAHyB;AAIzBoB,IAAAA,gBAAgB,EAAEvB,IAAI,CAACuB,gBAJE;AAKzBtB,IAAAA;AALyB,GAA3B;;AAQA,MAAI,CAACnB,MAAM,CAAC0C,QAAZ,EAAsB;AACpB;AACA,UAAMC,CAAC,GAAGC,MAAV;AACAD,IAAAA,CAAC,CAACtB,MAAF,GAAWA,MAAX;AACAsB,IAAAA,CAAC,CAACxB,SAAF,GAAcA,SAAd;AACAwB,IAAAA,CAAC,CAACV,KAAF,GAAUA,KAAV;AACD;;AAED,QAAMY,cAAc,GAAGnD,UAAU,CAACwB,IAAD,EAAOC,SAAP,EAAkBO,YAAlB,CAAjC;AAEA,QAAMoB,gBAAgB,GACpB,CAAC9C,MAAM,CAACwC,KAAR,IAAiB7C,mBAAmB,CAACuB,IAAD,EAAOC,SAAP,CAAnB,CAAqCE,MAArC,CADnB,CA5CI,CA+CJ;AACA;;AACA,QAAM0B,UAAU,GACdd,KAAK,CAACe,IAAN,KAAe,MAAf,IAAyBf,KAAK,CAACgB,YAAN,KAAuB,YADlD;AAEA,QAAMC,mBAAmB,GAAG,CAAC,CAACH,UAA9B;AACA,QAAMI,uBAAuB,GAAG,CAAhC;AAEA,QAAMC,WAAW,GACfxD,iBAAiB,CACf,YAACqC,KAAD,CAAqBoB,MAArB,oDAA6BC,UAA7B,KAA2CtD,MAAM,CAACuD,gBADnC,EAEftB,KAFe,CAAjB,IAGKjC,MAAM,CAACwD,GAAP,CAAWC,iBAAX,CAA6BpC,MAA7B,CAJP;AAMA,QAAMqC,iBAAiB,0BACrB7D,kBAAkB,CAACoC,KAAD,EAAQd,SAAR,CADG,qEACmBnB,MAAM,CAAC2D,WADjD;AAGA,MAAIC,QAAyB,GAAG,IAAhC;AACA,MAAIC,SAA2B,GAAG,IAAlC,CAhEI,CAkEJ;;AACA,MAAId,UAAJ,EAAgB;AACd,QAAI/C,MAAM,CAAC8D,oBAAX,EAAiC;AAC/BF,MAAAA,QAAQ,gBACN,QAAC,eAAD;AACE,QAAA,IAAI,EAAE5D,MAAM,CAAC8D,oBADf;AAEE,QAAA,QAAQ,EAAC,YAFX;AAGE,QAAA,SAAS,EAAC,OAHZ;AAIE,QAAA,KAAK,EAAElC,QAAQ,CAACM,KAAT,GAAiB,aAAjB,GAAiC;AAJ1C;AAAA;AAAA;AAAA;AAAA,cADF;AAQD;;AAED,UAAM6B,KAAK,GAAGjE,YAAY,CAACmC,KAAD,EAAQd,SAAR,CAA1B;;AACA,QAAI4C,KAAJ,EAAW;AACTF,MAAAA,SAAS,gBAAG,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEE;AAApB;AAAA;AAAA;AAAA;AAAA,cAAZ;AACD;AACF,GAhBD,MAgBO;AACLF,IAAAA,SAAS,gBAAG,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAAZ;AACD;;AAED,sBACE,QAAC,OAAD,CAAS,QAAT;AACE,IAAA,KAAK,EAAE;AACLG,MAAAA,WAAW,EAAG7C,SAAD,CAAmB6C,WAAnB,IAAkC,EAD1C;AAELC,MAAAA,UAAU,EAAE;AACVC,QAAAA,OAAO,EAAGC,EAAD,IACPC,KAAK,CAAE,sBAAqBD,EAAG,EAA1B,CAAL,CAAkCvD,IAAlC,CAAwCyD,CAAD,IAAOA,CAAC,CAACC,IAAF,EAA9C;AAFQ;AAFP,KADT;AAAA,4BASE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEpD;AAAhB;AAAA;AAAA;AAAA;AAAA,YATF,eAWE,QAAC,IAAD;AAAA,8BACE;AAAM,QAAA,QAAQ,EAAC,UAAf;AAA0B,QAAA,OAAO,EAAEkB;AAAnC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,QAAQ,EAAC,cAAf;AAA8B,QAAA,OAAO,EAAElB,IAAI,CAACmB;AAA5C;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE;AAAM,QAAA,IAAI,EAAC,eAAX;AAA2B,QAAA,OAAO,EAAED;AAApC;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAM,QAAA,QAAQ,EAAC,gBAAf;AAAgC,QAAA,OAAO,EAAElB,IAAI,CAACqD;AAA9C;AAAA;AAAA;AAAA;AAAA,cALF,EAOGvE,MAAM,CAACwE,OAAP,iBACC;AAAM,QAAA,IAAI,EAAC,iBAAX;AAA6B,QAAA,OAAO,EAAG,IAAGxE,MAAM,CAACwE,OAAQ;AAAzD;AAAA;AAAA;AAAA;AAAA,cARJ,EAWGd,iBAAiB,iBAChB;AAAA,gCACE;AAAM,UAAA,IAAI,EAAC,aAAX;AAAyB,UAAA,OAAO,EAAEA;AAAlC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,QAAQ,EAAC,gBAAf;AAAgC,UAAA,OAAO,EAAEA;AAAzC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAM,UAAA,IAAI,EAAC,qBAAX;AAAiC,UAAA,OAAO,EAAEA;AAA1C;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA,sBAZJ,EAmBGN,WAAW,gBACV;AAAA,gCACE;AAAM,UAAA,IAAI,EAAC,cAAX;AAA0B,UAAA,OAAO,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,IAAI,EAAC,eAAX;AAA2B,UAAA,OAAO,EAAEA;AAApC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAM,UAAA,QAAQ,EAAC,UAAf;AAA0B,UAAA,OAAO,EAAEA;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA,sBADU,gBAOV;AAAM,QAAA,IAAI,EAAC,cAAX;AAA0B,QAAA,OAAO,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,cA1BJ,EA6BGN,gBAAgB,iBACf;AAAA,gCACE;AAAM,UAAA,GAAG,EAAC,WAAV;AAAsB,UAAA,IAAI,EAAEA;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,QAAQ,EAAC,QAAf;AAAwB,UAAA,OAAO,EAAEA;AAAjC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAM,UAAA,QAAQ,EAAC,aAAf;AAA6B,UAAA,OAAO,EAAEA;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA,sBA9BJ,eAqCE;AAAA,kBAAQV;AAAR;AAAA;AAAA;AAAA;AAAA,cArCF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAmDE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAElB;AAAlB;AAAA;AAAA;AAAA;AAAA,YAnDF,EAqDGO,UAAU,iBAAI,QAAC,aAAD;AAAe,MAAA,SAAS,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,YArDjB,eAuDE,QAAC,cAAD;AACE,MAAA,aAAa,EAAE3C,EAAE,CACf4B,MAAM,CAACG,MADQ,EAEfQ,MAAM,KAAKH,IAAI,CAACuB,gBAAhB,IAAoC,YAFrB,CADnB;AAKE,MAAA,UAAU,EAAE;AACVgC,QAAAA,QAAQ,EAAE;AAAA,cAAC;AACTC,YAAAA,IADS;AAETC,YAAAA,EAFS;AAGTC,YAAAA,QAHS;AAITC,YAAAA,QAJS;AAKTC,YAAAA,OALS;AAMTC,YAAAA,MANS;AAOTC,YAAAA,OAPS;AAQTC,YAAAA;AARS,WAAD;AAAA,cASLC,KATK;;AAAA,8BAWR,QAAC,IAAD;AACE,YAAA,IAAI,EAAER,IADR;AAEE,YAAA,EAAE,EAAEC,EAFN;AAGE,YAAA,QAAQ,EAAEC,QAHZ;AAIE,YAAA,QAAQ,EAAEC,QAJZ;AAKE,YAAA,OAAO,EAAEC,OALX;AAME,YAAA,MAAM,EAAEC,MANV;AAOE,YAAA,OAAO,EAAEC,OAPX;AAQE,YAAA,MAAM,EAAEC,MARV;AAAA,mCAUE,+BAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAVF;AAAA;AAAA;AAAA;AAAA,kBAXQ;AAAA,SADA;AAyBVC,QAAAA,IAAI,EAAE7F,IAzBI;AA0BV8F,QAAAA,UAAU,EAAE7F,UA1BF;AA2BV8F,QAAAA,aAAa,EAAE7F,aA3BL;AA4BVuE,QAAAA,KAAK,EAAE5E,KA5BG;AA6BVmG,QAAAA,KAAK,EAAEvE,KA7BG;AA8BVwE,QAAAA,GAAG,EAAE5E,GA9BK;AA+BV6E,QAAAA,QAAQ,EAAE1E;AA/BA,OALd;AAsCE,MAAA,SAAS,EAAEK,SAtCb;AAuCE,MAAA,UAAU,EAAED,IAAI,CAACuB,gBAvCnB;AAwCE,MAAA,QAAQ,EAAE,CAAChB,UAxCb;AAyCE,MAAA,QAAQ,EAAEG,QAAQ,CAACM,KAzCrB;AA0CE,MAAA,aAAa,EAAEhB,IAAI,CAACuE,aAAL,KAAuB,KA1CxC;AA2CE,MAAA,0BAA0B,EAAE,KA3C9B;AA4CE,MAAA,mBAAmB,EAAEvC,mBA5CvB;AA6CE,MAAA,uBAAuB,EAAEC,uBA7C3B;AA8CE,MAAA,eAAe,EAAEnD,MAAM,CAAC0F,eA9C1B;AA+CE,MAAA,gBAAgB,EAAE1F,MAAM,CAACuD,gBA/C3B;AAgDE,MAAA,wBAAwB,EAAEvD,MAAM,CAAC2F,wBAhDnC;AAiDE,MAAA,UAAU,EAAE9C,cAjDd;AAkDE,MAAA,WAAW,EAAEjD,iBAlDf;AAmDE,MAAA,YAAY,EAAEG,YAnDhB;AAoDE,MAAA,UAAU,EAAE6D,QApDd;AAqDE,MAAA,SAAS,EAAEC,SArDb;AAsDE,MAAA,MAAM,eACJ,QAAC,MAAD;AACE,QAAA,UAAU,EAAEjC,QAAQ,CAACM,KADvB;AAEE,QAAA,cAAc,EAAEN,QAAQ,CAACgE;AAF3B;AAAA;AAAA;AAAA;AAAA;AAvDJ;AAAA;AAAA;AAAA;AAAA,YAvDF,eAuHE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAE1E;AAAlB;AAAA;AAAA;AAAA;AAAA,YAvHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2HD,CAvNM","sourcesContent":["import * as React from 'react'\r\nimport Head from 'next/head'\r\nimport Link from 'next/link'\r\nimport dynamic from 'next/dynamic'\r\nimport cs from 'classnames'\r\nimport { useRouter } from 'next/router'\r\nimport { useSearchParam } from 'react-use'\r\nimport BodyClassName from 'react-body-classname'\r\nimport useDarkMode from 'use-dark-mode'\r\nimport { PageBlock } from 'notion-types'\r\n\r\nimport { Tweet, Twitter } from 'react-static-tweets'\r\n\r\n// core notion renderer\r\nimport { NotionRenderer, Code, Collection, CollectionRow } from 'react-notion-x'\r\n\r\n// utils\r\nimport { getBlockTitle } from 'notion-utils'\r\nimport { mapPageUrl, getCanonicalPageUrl } from 'lib/map-page-url'\r\nimport { mapNotionImageUrl } from 'lib/map-image-url'\r\nimport { getPageDescription } from 'lib/get-page-description'\r\nimport { getPageTweet } from 'lib/get-page-tweet'\r\nimport { searchNotion } from 'lib/search-notion'\r\nimport * as types from 'lib/types'\r\nimport * as config from 'lib/config'\r\n\r\n// components\r\nimport { CustomFont } from './CustomFont'\r\nimport { CustomHtml } from './CustomHtml'\r\nimport { Loading } from './Loading'\r\nimport { Page404 } from './Page404'\r\nimport { PageHead } from './PageHead'\r\nimport { PageActions } from './PageActions'\r\nimport { Footer } from './Footer'\r\nimport { PageSocial } from './PageSocial'\r\nimport { GitHubShareButton } from './GitHubShareButton'\r\nimport { ReactUtterances } from './ReactUtterances'\r\n\r\nimport styles from './styles.module.css'\r\n\r\n// const Code = dynamic(() =>\r\n//   import('react-notion-x').then((notion) => notion.Code)\r\n// )\r\n//\r\n// const Collection = dynamic(() =>\r\n//   import('react-notion-x').then((notion) => notion.Collection)\r\n// )\r\n//\r\n// const CollectionRow = dynamic(\r\n//   () => import('react-notion-x').then((notion) => notion.CollectionRow),\r\n//   {\r\n//     ssr: false\r\n//   }\r\n// )\r\n\r\nconst Pdf = dynamic(() => import('react-notion-x').then((notion) => notion.Pdf))\r\n\r\nconst Equation = dynamic(() =>\r\n  import('react-notion-x').then((notion) => notion.Equation)\r\n)\r\n\r\n// we're now using a much lighter-weight tweet renderer react-static-tweets\r\n// instead of the official iframe-based embed widget from twitter\r\n// const Tweet = dynamic(() => import('react-tweet-embed'))\r\n\r\nconst Modal = dynamic(\r\n  () => import('react-notion-x').then((notion) => notion.Modal),\r\n  { ssr: false }\r\n)\r\n\r\nexport const NotionPage: React.FC<types.PageProps> = ({\r\n  site,\r\n  recordMap,\r\n  error,\r\n  pageId\r\n}) => {\r\n  const router = useRouter()\r\n  const lite = useSearchParam('lite')\r\n\r\n  const params: any = {}\r\n  if (lite) params.lite = lite\r\n\r\n  // lite mode is for oembed\r\n  const isLiteMode = lite === 'true'\r\n  const searchParams = new URLSearchParams(params)\r\n\r\n  const darkMode = useDarkMode(false, { classNameDark: 'dark-mode' })\r\n\r\n  if (router.isFallback) {\r\n    return <Loading />\r\n  }\r\n\r\n  const keys = Object.keys(recordMap?.block || {})\r\n  const block = recordMap?.block?.[keys[0]]?.value\r\n\r\n  if (error || !site || !keys.length || !block) {\r\n    return <Page404 site={site} pageId={pageId} error={error} />\r\n  }\r\n\r\n  const title = getBlockTitle(block, recordMap) || site.name\r\n\r\n  console.log('notion page', {\r\n    isDev: config.isDev,\r\n    title,\r\n    pageId,\r\n    rootNotionPageId: site.rootNotionPageId,\r\n    recordMap\r\n  })\r\n\r\n  if (!config.isServer) {\r\n    // add important objects to the window global for easy debugging\r\n    const g = window as any\r\n    g.pageId = pageId\r\n    g.recordMap = recordMap\r\n    g.block = block\r\n  }\r\n\r\n  const siteMapPageUrl = mapPageUrl(site, recordMap, searchParams)\r\n\r\n  const canonicalPageUrl =\r\n    !config.isDev && getCanonicalPageUrl(site, recordMap)(pageId)\r\n\r\n  // const isRootPage =\r\n  //   parsePageId(block.id) === parsePageId(site.rootNotionPageId)\r\n  const isBlogPost =\r\n    block.type === 'page' && block.parent_table === 'collection'\r\n  const showTableOfContents = !!isBlogPost\r\n  const minTableOfContentsItems = 3\r\n\r\n  const socialImage =\r\n    mapNotionImageUrl(\r\n      (block as PageBlock).format?.page_cover || config.defaultPageCover,\r\n      block\r\n    ) || config.api.renderSocialImage(pageId)\r\n\r\n  const socialDescription =\r\n    getPageDescription(block, recordMap) ?? config.description\r\n\r\n  let comments: React.ReactNode = null\r\n  let pageAside: React.ReactChild = null\r\n\r\n  // only display comments and page actions on blog post pages\r\n  if (isBlogPost) {\r\n    if (config.utterancesGitHubRepo) {\r\n      comments = (\r\n        <ReactUtterances\r\n          repo={config.utterancesGitHubRepo}\r\n          issueMap='issue-term'\r\n          issueTerm='title'\r\n          theme={darkMode.value ? 'photon-dark' : 'github-light'}\r\n        />\r\n      )\r\n    }\r\n\r\n    const tweet = getPageTweet(block, recordMap)\r\n    if (tweet) {\r\n      pageAside = <PageActions tweet={tweet} />\r\n    }\r\n  } else {\r\n    pageAside = <PageSocial />\r\n  }\r\n\r\n  return (\r\n    <Twitter.Provider\r\n      value={{\r\n        tweetAstMap: (recordMap as any).tweetAstMap || {},\r\n        swrOptions: {\r\n          fetcher: (id) =>\r\n            fetch(`/api/get-tweet-ast/${id}`).then((r) => r.json())\r\n        }\r\n      }}\r\n    >\r\n      <PageHead site={site} />\r\n\r\n      <Head>\r\n        <meta property='og:title' content={title} />\r\n        <meta property='og:site_name' content={site.name} />\r\n\r\n        <meta name='twitter:title' content={title} />\r\n        <meta property='twitter:domain' content={site.domain} />\r\n\r\n        {config.twitter && (\r\n          <meta name='twitter:creator' content={`@${config.twitter}`} />\r\n        )}\r\n\r\n        {socialDescription && (\r\n          <>\r\n            <meta name='description' content={socialDescription} />\r\n            <meta property='og:description' content={socialDescription} />\r\n            <meta name='twitter:description' content={socialDescription} />\r\n          </>\r\n        )}\r\n\r\n        {socialImage ? (\r\n          <>\r\n            <meta name='twitter:card' content='summary_large_image' />\r\n            <meta name='twitter:image' content={socialImage} />\r\n            <meta property='og:image' content={socialImage} />\r\n          </>\r\n        ) : (\r\n          <meta name='twitter:card' content='summary' />\r\n        )}\r\n\r\n        {canonicalPageUrl && (\r\n          <>\r\n            <link rel='canonical' href={canonicalPageUrl} />\r\n            <meta property='og:url' content={canonicalPageUrl} />\r\n            <meta property='twitter:url' content={canonicalPageUrl} />\r\n          </>\r\n        )}\r\n\r\n        <title>{title}</title>\r\n      </Head>\r\n\r\n      <CustomFont site={site} />\r\n\r\n      {isLiteMode && <BodyClassName className='notion-lite' />}\r\n\r\n      <NotionRenderer\r\n        bodyClassName={cs(\r\n          styles.notion,\r\n          pageId === site.rootNotionPageId && 'index-page'\r\n        )}\r\n        components={{\r\n          pageLink: ({\r\n            href,\r\n            as,\r\n            passHref,\r\n            prefetch,\r\n            replace,\r\n            scroll,\r\n            shallow,\r\n            locale,\r\n            ...props\r\n          }) => (\r\n            <Link\r\n              href={href}\r\n              as={as}\r\n              passHref={passHref}\r\n              prefetch={prefetch}\r\n              replace={replace}\r\n              scroll={scroll}\r\n              shallow={shallow}\r\n              locale={locale}\r\n            >\r\n              <a {...props} />\r\n            </Link>\r\n          ),\r\n          code: Code,\r\n          collection: Collection,\r\n          collectionRow: CollectionRow,\r\n          tweet: Tweet,\r\n          modal: Modal,\r\n          pdf: Pdf,\r\n          equation: Equation\r\n        }}\r\n        recordMap={recordMap}\r\n        rootPageId={site.rootNotionPageId}\r\n        fullPage={!isLiteMode}\r\n        darkMode={darkMode.value}\r\n        previewImages={site.previewImages !== false}\r\n        showCollectionViewDropdown={false}\r\n        showTableOfContents={showTableOfContents}\r\n        minTableOfContentsItems={minTableOfContentsItems}\r\n        defaultPageIcon={config.defaultPageIcon}\r\n        defaultPageCover={config.defaultPageCover}\r\n        defaultPageCoverPosition={config.defaultPageCoverPosition}\r\n        mapPageUrl={siteMapPageUrl}\r\n        mapImageUrl={mapNotionImageUrl}\r\n        searchNotion={searchNotion}\r\n        pageFooter={comments}\r\n        pageAside={pageAside}\r\n        footer={\r\n          <Footer\r\n            isDarkMode={darkMode.value}\r\n            toggleDarkMode={darkMode.toggle}\r\n          />\r\n        }\r\n      />\r\n\r\n      \r\n\r\n      <CustomHtml site={site} />\r\n    </Twitter.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}