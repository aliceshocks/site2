{"ast":null,"code":"import { uuidToId, parsePageId } from 'notion-utils';\nimport { includeNotionIdInUrls } from './config';\nimport { getCanonicalPageId } from './get-canonical-page-id'; // include UUIDs in page URLs during local development but not in production\n// (they're nice for debugging and speed up local dev)\n\nconst uuid = !!includeNotionIdInUrls;\nexport const mapPageUrl = (site, recordMap, searchParams) => (pageId = '') => {\n  if (uuidToId(pageId) === site.rootNotionPageId) {\n    return createUrl('/', searchParams);\n  } else {\n    return createUrl(`/${getCanonicalPageId(pageId, recordMap, {\n      uuid\n    })}`, searchParams);\n  }\n};\nexport const getCanonicalPageUrl = (site, recordMap) => (pageId = '') => {\n  const pageUuid = parsePageId(pageId, {\n    uuid: true\n  });\n\n  if (uuidToId(pageId) === site.rootNotionPageId) {\n    return `https://${site.domain}`;\n  } else {\n    return `https://${site.domain}/${getCanonicalPageId(pageUuid, recordMap, {\n      uuid\n    })}`;\n  }\n};\n\nfunction createUrl(path, searchParams) {\n  return [path, searchParams.toString()].filter(Boolean).join('?');\n}","map":{"version":3,"sources":["B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/lib/map-page-url.ts"],"names":["uuidToId","parsePageId","includeNotionIdInUrls","getCanonicalPageId","uuid","mapPageUrl","site","recordMap","searchParams","pageId","rootNotionPageId","createUrl","getCanonicalPageUrl","pageUuid","domain","path","toString","filter","Boolean","join"],"mappings":"AACA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,cAAtC;AAGA,SAASC,qBAAT,QAAsC,UAAtC;AACA,SAASC,kBAAT,QAAmC,yBAAnC,C,CAEA;AACA;;AACA,MAAMC,IAAI,GAAG,CAAC,CAACF,qBAAf;AAEA,OAAO,MAAMG,UAAU,GAAG,CACxBC,IADwB,EAExBC,SAFwB,EAGxBC,YAHwB,KAIrB,CAACC,MAAM,GAAG,EAAV,KAAiB;AACpB,MAAIT,QAAQ,CAACS,MAAD,CAAR,KAAqBH,IAAI,CAACI,gBAA9B,EAAgD;AAC9C,WAAOC,SAAS,CAAC,GAAD,EAAMH,YAAN,CAAhB;AACD,GAFD,MAEO;AACL,WAAOG,SAAS,CACb,IAAGR,kBAAkB,CAACM,MAAD,EAASF,SAAT,EAAoB;AAAEH,MAAAA;AAAF,KAApB,CAA8B,EADtC,EAEdI,YAFc,CAAhB;AAID;AACF,CAbM;AAeP,OAAO,MAAMI,mBAAmB,GAAG,CACjCN,IADiC,EAEjCC,SAFiC,KAG9B,CAACE,MAAM,GAAG,EAAV,KAAiB;AACpB,QAAMI,QAAQ,GAAGZ,WAAW,CAACQ,MAAD,EAAS;AAAEL,IAAAA,IAAI,EAAE;AAAR,GAAT,CAA5B;;AAEA,MAAIJ,QAAQ,CAACS,MAAD,CAAR,KAAqBH,IAAI,CAACI,gBAA9B,EAAgD;AAC9C,WAAQ,WAAUJ,IAAI,CAACQ,MAAO,EAA9B;AACD,GAFD,MAEO;AACL,WAAQ,WAAUR,IAAI,CAACQ,MAAO,IAAGX,kBAAkB,CAACU,QAAD,EAAWN,SAAX,EAAsB;AACvEH,MAAAA;AADuE,KAAtB,CAEhD,EAFH;AAGD;AACF,CAbM;;AAeP,SAASO,SAAT,CAAmBI,IAAnB,EAAiCP,YAAjC,EAAgE;AAC9D,SAAO,CAACO,IAAD,EAAOP,YAAY,CAACQ,QAAb,EAAP,EAAgCC,MAAhC,CAAuCC,OAAvC,EAAgDC,IAAhD,CAAqD,GAArD,CAAP;AACD","sourcesContent":["import { ExtendedRecordMap } from 'notion-types'\r\nimport { uuidToId, parsePageId } from 'notion-utils'\r\n\r\nimport { Site } from './types'\r\nimport { includeNotionIdInUrls } from './config'\r\nimport { getCanonicalPageId } from './get-canonical-page-id'\r\n\r\n// include UUIDs in page URLs during local development but not in production\r\n// (they're nice for debugging and speed up local dev)\r\nconst uuid = !!includeNotionIdInUrls\r\n\r\nexport const mapPageUrl = (\r\n  site: Site,\r\n  recordMap: ExtendedRecordMap,\r\n  searchParams: URLSearchParams\r\n) => (pageId = '') => {\r\n  if (uuidToId(pageId) === site.rootNotionPageId) {\r\n    return createUrl('/', searchParams)\r\n  } else {\r\n    return createUrl(\r\n      `/${getCanonicalPageId(pageId, recordMap, { uuid })}`,\r\n      searchParams\r\n    )\r\n  }\r\n}\r\n\r\nexport const getCanonicalPageUrl = (\r\n  site: Site,\r\n  recordMap: ExtendedRecordMap\r\n) => (pageId = '') => {\r\n  const pageUuid = parsePageId(pageId, { uuid: true })\r\n\r\n  if (uuidToId(pageId) === site.rootNotionPageId) {\r\n    return `https://${site.domain}`\r\n  } else {\r\n    return `https://${site.domain}/${getCanonicalPageId(pageUuid, recordMap, {\r\n      uuid\r\n    })}`\r\n  }\r\n}\r\n\r\nfunction createUrl(path: string, searchParams: URLSearchParams) {\r\n  return [path, searchParams.toString()].filter(Boolean).join('?')\r\n}\r\n"]},"metadata":{},"sourceType":"module"}