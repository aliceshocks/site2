{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { NotionAPI } from 'notion-client';\nimport { getPreviewImages } from './get-preview-images';\nimport { mapNotionImageUrl } from './map-image-url';\nimport { fetchTweetAst } from 'static-tweets';\nimport pMap from 'p-map';\nexport const notion = new NotionAPI({\n  apiBaseUrl: process.env.NOTION_API_BASE_URL\n});\nexport async function getPage(pageId) {\n  const recordMap = await notion.getPage(pageId);\n  const blockIds = Object.keys(recordMap.block);\n  const imageUrls = blockIds.map(blockId => {\n    var _recordMap$block$bloc;\n\n    const block = (_recordMap$block$bloc = recordMap.block[blockId]) === null || _recordMap$block$bloc === void 0 ? void 0 : _recordMap$block$bloc.value;\n\n    if (block) {\n      var _block$format;\n\n      if (block.type === 'image') {\n        var _block$properties, _block$properties$sou, _block$properties$sou2;\n\n        const source = (_block$properties = block.properties) === null || _block$properties === void 0 ? void 0 : (_block$properties$sou = _block$properties.source) === null || _block$properties$sou === void 0 ? void 0 : (_block$properties$sou2 = _block$properties$sou[0]) === null || _block$properties$sou2 === void 0 ? void 0 : _block$properties$sou2[0];\n\n        if (source) {\n          return {\n            block,\n            url: source\n          };\n        }\n      }\n\n      if ((_block$format = block.format) !== null && _block$format !== void 0 && _block$format.page_cover) {\n        const source = block.format.page_cover;\n        return {\n          block,\n          url: source\n        };\n      }\n    }\n\n    return null;\n  }).filter(Boolean).map(({\n    block,\n    url\n  }) => mapNotionImageUrl(url, block)).filter(Boolean);\n  const urls = Array.from(new Set(imageUrls));\n  const previewImageMap = await getPreviewImages(urls);\n  recordMap.preview_images = previewImageMap;\n  const tweetIds = blockIds.map(blockId => {\n    var _recordMap$block$bloc2;\n\n    const block = (_recordMap$block$bloc2 = recordMap.block[blockId]) === null || _recordMap$block$bloc2 === void 0 ? void 0 : _recordMap$block$bloc2.value;\n\n    if (block) {\n      if (block.type === 'tweet') {\n        var _block$properties2, _block$properties2$so, _block$properties2$so2;\n\n        const src = (_block$properties2 = block.properties) === null || _block$properties2 === void 0 ? void 0 : (_block$properties2$so = _block$properties2.source) === null || _block$properties2$so === void 0 ? void 0 : (_block$properties2$so2 = _block$properties2$so[0]) === null || _block$properties2$so2 === void 0 ? void 0 : _block$properties2$so2[0];\n\n        if (src) {\n          const id = src.split('?')[0].split('/').pop();\n          if (id) return id;\n        }\n      }\n    }\n\n    return null;\n  }).filter(Boolean);\n  const tweetAsts = await pMap(tweetIds, async tweetId => {\n    try {\n      return {\n        tweetId,\n        tweetAst: await fetchTweetAst(tweetId)\n      };\n    } catch (err) {\n      console.error('error fetching tweet info', tweetId, err);\n    }\n  }, {\n    concurrency: 4\n  });\n  const tweetAstMap = tweetAsts.reduce((acc, {\n    tweetId,\n    tweetAst\n  }) => {\n    if (tweetAst) {\n      return _objectSpread(_objectSpread({}, acc), {}, {\n        [tweetId]: tweetAst\n      });\n    } else {\n      return acc;\n    }\n  }, {});\n  recordMap.tweetAstMap = tweetAstMap;\n  return recordMap;\n}\nexport async function search(params) {\n  return notion.search(params);\n}","map":{"version":3,"sources":["B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/lib/notion.ts"],"names":["NotionAPI","getPreviewImages","mapNotionImageUrl","fetchTweetAst","pMap","notion","apiBaseUrl","process","env","NOTION_API_BASE_URL","getPage","pageId","recordMap","blockIds","Object","keys","block","imageUrls","map","blockId","value","type","source","properties","url","format","page_cover","filter","Boolean","urls","Array","from","Set","previewImageMap","preview_images","tweetIds","src","id","split","pop","tweetAsts","tweetId","tweetAst","err","console","error","concurrency","tweetAstMap","reduce","acc","search","params"],"mappings":"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","sourcesContent":["import { NotionAPI } from 'notion-client'\r\nimport { ExtendedRecordMap, SearchParams, SearchResults } from 'notion-types'\r\nimport { getPreviewImages } from './get-preview-images'\r\nimport { mapNotionImageUrl } from './map-image-url'\r\nimport { fetchTweetAst } from 'static-tweets'\r\nimport pMap from 'p-map'\r\n\r\nexport const notion = new NotionAPI({\r\n  apiBaseUrl: process.env.NOTION_API_BASE_URL\r\n})\r\n\r\nexport async function getPage(pageId: string): Promise<ExtendedRecordMap> {\r\n  const recordMap = await notion.getPage(pageId)\r\n  const blockIds = Object.keys(recordMap.block)\r\n\r\n  const imageUrls: string[] = blockIds\r\n    .map((blockId) => {\r\n      const block = recordMap.block[blockId]?.value\r\n\r\n      if (block) {\r\n        if (block.type === 'image') {\r\n          const source = block.properties?.source?.[0]?.[0]\r\n\r\n          if (source) {\r\n            return {\r\n              block,\r\n              url: source\r\n            }\r\n          }\r\n        }\r\n\r\n        if ((block.format as any)?.page_cover) {\r\n          const source = (block.format as any).page_cover\r\n\r\n          return {\r\n            block,\r\n            url: source\r\n          }\r\n        }\r\n      }\r\n\r\n      return null\r\n    })\r\n    .filter(Boolean)\r\n    .map(({ block, url }) => mapNotionImageUrl(url, block))\r\n    .filter(Boolean)\r\n\r\n  const urls = Array.from(new Set(imageUrls))\r\n  const previewImageMap = await getPreviewImages(urls)\r\n  ;(recordMap as any).preview_images = previewImageMap\r\n\r\n  const tweetIds: string[] = blockIds\r\n    .map((blockId) => {\r\n      const block = recordMap.block[blockId]?.value\r\n\r\n      if (block) {\r\n        if (block.type === 'tweet') {\r\n          const src = block.properties?.source?.[0]?.[0]\r\n\r\n          if (src) {\r\n            const id = src.split('?')[0].split('/').pop()\r\n            if (id) return id\r\n          }\r\n        }\r\n      }\r\n\r\n      return null\r\n    })\r\n    .filter(Boolean)\r\n\r\n  const tweetAsts = await pMap(\r\n    tweetIds,\r\n    async (tweetId) => {\r\n      try {\r\n        return {\r\n          tweetId,\r\n          tweetAst: await fetchTweetAst(tweetId)\r\n        }\r\n      } catch (err) {\r\n        console.error('error fetching tweet info', tweetId, err)\r\n      }\r\n    },\r\n    {\r\n      concurrency: 4\r\n    }\r\n  )\r\n\r\n  const tweetAstMap = tweetAsts.reduce((acc, { tweetId, tweetAst }) => {\r\n    if (tweetAst) {\r\n      return {\r\n        ...acc,\r\n        [tweetId]: tweetAst\r\n      }\r\n    } else {\r\n      return acc\r\n    }\r\n  }, {})\r\n\r\n  ;(recordMap as any).tweetAstMap = tweetAstMap\r\n\r\n  return recordMap\r\n}\r\n\r\nexport async function search(params: SearchParams): Promise<SearchResults> {\r\n  return notion.search(params)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}