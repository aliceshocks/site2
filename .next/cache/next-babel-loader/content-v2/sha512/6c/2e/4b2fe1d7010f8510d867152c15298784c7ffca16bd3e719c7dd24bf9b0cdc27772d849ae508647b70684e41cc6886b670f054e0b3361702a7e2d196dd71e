{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport pMap from 'p-map';\nimport { getAllPages } from './get-all-pages';\nimport { getSites } from './get-sites';\nexport async function getSiteMaps() {\n  const sites = await getSites();\n  const siteMaps = await pMap(sites, async (site, index) => {\n    try {\n      console.log('getSiteMap', `${index + 1}/${sites.length}`, `(${(index + 1) / sites.length * 100 | 0}%)`, site);\n      return _objectSpread({\n        site\n      }, await getAllPages(site.rootNotionPageId, site.rootNotionSpaceId));\n    } catch (err) {\n      console.warn('site build error', index, site, err);\n    }\n  }, {\n    concurrency: 4\n  });\n  return siteMaps.filter(Boolean);\n}","map":{"version":3,"sources":["B:/jacko/Documents/JacksNewSiteCRM/jackoregankenny.com/NewOne/nextjs-notion-starter-kit/lib/get-site-maps.ts"],"names":["pMap","getAllPages","getSites","getSiteMaps","sites","siteMaps","site","index","console","log","length","rootNotionPageId","rootNotionSpaceId","err","warn","concurrency","filter","Boolean"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,OAAjB;AAEA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAGA,OAAO,eAAeC,WAAf,GAAuD;AAC5D,QAAMC,KAAK,GAAG,MAAMF,QAAQ,EAA5B;AAEA,QAAMG,QAAQ,GAAG,MAAML,IAAI,CACzBI,KADyB,EAEzB,OAAOE,IAAP,EAAaC,KAAb,KAAuB;AACrB,QAAI;AACFC,MAAAA,OAAO,CAACC,GAAR,CACE,YADF,EAEG,GAAEF,KAAK,GAAG,CAAE,IAAGH,KAAK,CAACM,MAAO,EAF/B,EAGG,IAAK,CAACH,KAAK,GAAG,CAAT,IAAcH,KAAK,CAACM,MAArB,GAA+B,GAAhC,GAAuC,CAAE,IAH/C,EAIEJ,IAJF;AAOA;AACEA,QAAAA;AADF,SAEM,MAAML,WAAW,CAACK,IAAI,CAACK,gBAAN,EAAwBL,IAAI,CAACM,iBAA7B,CAFvB;AAID,KAZD,CAYE,OAAOC,GAAP,EAAY;AACZL,MAAAA,OAAO,CAACM,IAAR,CAAa,kBAAb,EAAiCP,KAAjC,EAAwCD,IAAxC,EAA8CO,GAA9C;AACD;AACF,GAlBwB,EAmBzB;AACEE,IAAAA,WAAW,EAAE;AADf,GAnByB,CAA3B;AAwBA,SAAOV,QAAQ,CAACW,MAAT,CAAgBC,OAAhB,CAAP;AACD","sourcesContent":["import pMap from 'p-map'\r\n\r\nimport { getAllPages } from './get-all-pages'\r\nimport { getSites } from './get-sites'\r\nimport * as types from './types'\r\n\r\nexport async function getSiteMaps(): Promise<types.SiteMap[]> {\r\n  const sites = await getSites()\r\n\r\n  const siteMaps = await pMap(\r\n    sites,\r\n    async (site, index) => {\r\n      try {\r\n        console.log(\r\n          'getSiteMap',\r\n          `${index + 1}/${sites.length}`,\r\n          `(${(((index + 1) / sites.length) * 100) | 0}%)`,\r\n          site\r\n        )\r\n\r\n        return {\r\n          site,\r\n          ...(await getAllPages(site.rootNotionPageId, site.rootNotionSpaceId))\r\n        } as types.SiteMap\r\n      } catch (err) {\r\n        console.warn('site build error', index, site, err)\r\n      }\r\n    },\r\n    {\r\n      concurrency: 4\r\n    }\r\n  )\r\n\r\n  return siteMaps.filter(Boolean)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}